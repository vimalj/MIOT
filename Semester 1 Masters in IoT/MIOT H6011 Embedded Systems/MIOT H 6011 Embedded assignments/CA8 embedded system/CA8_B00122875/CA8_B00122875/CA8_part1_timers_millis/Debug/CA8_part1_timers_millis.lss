
CA8_part1_timers_millis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  0000030c  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f30  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00001c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000007cb  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005de  00000000  00000000  0000249b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000164  00000000  00000000  00002a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/sleep.h>

uint32_t interval = 250;

int main (void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	28 97       	sbiw	r28, 0x08	; 8
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
cli();					//clearing/disabling all interrupts
  ba:	f8 94       	cli

millisInit();
  bc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <millisInit>
uint32_t previousMillis=0;
  c0:	19 82       	std	Y+1, r1	; 0x01
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	1b 82       	std	Y+3, r1	; 0x03
  c6:	1c 82       	std	Y+4, r1	; 0x04
DDRB |= (1 << 5) ; 		// Set LED as output
  c8:	84 e2       	ldi	r24, 0x24	; 36
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	24 e2       	ldi	r18, 0x24	; 36
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	20 62       	ori	r18, 0x20	; 32
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18

sei();					//enable global interrupt
  da:	78 94       	sei

while(1)
{
		sleep_mode();
  dc:	83 e5       	ldi	r24, 0x53	; 83
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	23 e5       	ldi	r18, 0x53	; 83
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	21 60       	ori	r18, 0x01	; 1
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
  ee:	88 95       	sleep
  f0:	83 e5       	ldi	r24, 0x53	; 83
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	23 e5       	ldi	r18, 0x53	; 83
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	2e 7f       	andi	r18, 0xFE	; 254
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
		//CPU stops executing code running in low power mode as normal computer sleeps until any key is pressed

		uint32_t currentMillis = millis();
 102:	0e 94 17 01 	call	0x22e	; 0x22e <millis>
 106:	dc 01       	movw	r26, r24
 108:	cb 01       	movw	r24, r22
 10a:	8d 83       	std	Y+5, r24	; 0x05
 10c:	9e 83       	std	Y+6, r25	; 0x06
 10e:	af 83       	std	Y+7, r26	; 0x07
 110:	b8 87       	std	Y+8, r27	; 0x08
		if ((currentMillis - previousMillis) >= interval)
 112:	2d 81       	ldd	r18, Y+5	; 0x05
 114:	3e 81       	ldd	r19, Y+6	; 0x06
 116:	4f 81       	ldd	r20, Y+7	; 0x07
 118:	58 85       	ldd	r21, Y+8	; 0x08
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	ab 81       	ldd	r26, Y+3	; 0x03
 120:	bc 81       	ldd	r27, Y+4	; 0x04
 122:	28 1b       	sub	r18, r24
 124:	39 0b       	sbc	r19, r25
 126:	4a 0b       	sbc	r20, r26
 128:	5b 0b       	sbc	r21, r27
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	90 91 01 01 	lds	r25, 0x0101
 132:	a0 91 02 01 	lds	r26, 0x0102
 136:	b0 91 03 01 	lds	r27, 0x0103
 13a:	28 17       	cp	r18, r24
 13c:	39 07       	cpc	r19, r25
 13e:	4a 07       	cpc	r20, r26
 140:	5b 07       	cpc	r21, r27
 142:	98 f0       	brcs	.+38     	; 0x16a <main+0xc4>
		{PORTB ^=(1<<5);
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	25 e2       	ldi	r18, 0x25	; 37
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	30 81       	ld	r19, Z
 150:	20 e2       	ldi	r18, 0x20	; 32
 152:	23 27       	eor	r18, r19
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
		previousMillis = currentMillis;}
 158:	8d 81       	ldd	r24, Y+5	; 0x05
 15a:	9e 81       	ldd	r25, Y+6	; 0x06
 15c:	af 81       	ldd	r26, Y+7	; 0x07
 15e:	b8 85       	ldd	r27, Y+8	; 0x08
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	ab 83       	std	Y+3, r26	; 0x03
 166:	bc 83       	std	Y+4, r27	; 0x04
}
 168:	b9 cf       	rjmp	.-142    	; 0xdc <main+0x36>
 16a:	b8 cf       	rjmp	.-144    	; 0xdc <main+0x36>

0000016c <__vector_14>:
– A hardware event like pushbutton – an IRQ*/

// Time CTC interrupt - 1ms
ISR ( TIMER0_COMPA_vect )

{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	00 90 5f 00 	lds	r0, 0x005F
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
elapsedMillis++;
 188:	80 91 04 01 	lds	r24, 0x0104
 18c:	90 91 05 01 	lds	r25, 0x0105
 190:	a0 91 06 01 	lds	r26, 0x0106
 194:	b0 91 07 01 	lds	r27, 0x0107
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	a1 1d       	adc	r26, r1
 19c:	b1 1d       	adc	r27, r1
 19e:	80 93 04 01 	sts	0x0104, r24
 1a2:	90 93 05 01 	sts	0x0105, r25
 1a6:	a0 93 06 01 	sts	0x0106, r26
 1aa:	b0 93 07 01 	sts	0x0107, r27
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	00 92 5f 00 	sts	0x005F, r0
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <millisInit>:
 * Initialise elapsedMillis to zero.
 * Set correct prescale and start timer.
 */

void millisInit(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	TCCR0A |= (1 << WGM01);  // Configure timer 0 for CTC mode
 1ce:	84 e4       	ldi	r24, 0x44	; 68
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	24 e4       	ldi	r18, 0x44	; 68
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	22 60       	ori	r18, 0x02	; 2
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
	TIMSK0 |= (1 << OCIE0A);  // Enable CTC interrupt
 1e0:	8e e6       	ldi	r24, 0x6E	; 110
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2e e6       	ldi	r18, 0x6E	; 110
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	22 60       	ori	r18, 0x02	; 2
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
	sei () ; // Enable global interrupts
 1f2:	78 94       	sei
	OCR0A = 249; // Set CTC compare value to 1Hz at 1 MHz AVR clock , with a prescaler of 64
 1f4:	87 e4       	ldi	r24, 0x47	; 71
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	29 ef       	ldi	r18, 0xF9	; 249
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	TCNT0 = 0;
 1fe:	86 e4       	ldi	r24, 0x46	; 70
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fc 01       	movw	r30, r24
 204:	10 82       	st	Z, r1
	elapsedMillis=0;
 206:	10 92 04 01 	sts	0x0104, r1
 20a:	10 92 05 01 	sts	0x0105, r1
 20e:	10 92 06 01 	sts	0x0106, r1
 212:	10 92 07 01 	sts	0x0107, r1
	TCCR0B |= (1 << CS00) | (1 << CS01) ; // set pre-scaler to 64 and start the timer FCPU
 216:	85 e4       	ldi	r24, 0x45	; 69
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	25 e4       	ldi	r18, 0x45	; 69
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	f9 01       	movw	r30, r18
 220:	20 81       	ld	r18, Z
 222:	23 60       	ori	r18, 0x03	; 3
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <millis>:
 * the millisInit() function was called.
 * The count of elapsedMillis is incremented by an ISR.
 */

uint32_t millis(void)
{
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	00 d0       	rcall	.+0      	; 0x234 <millis+0x6>
 234:	00 d0       	rcall	.+0      	; 0x236 <millis+0x8>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
   * Do you need to do anything to ensure this function works correctly in
   * that case?
   */

	uint32_t localmillis;
	cli();
 23a:	f8 94       	cli
	localmillis= elapsedMillis;
 23c:	80 91 04 01 	lds	r24, 0x0104
 240:	90 91 05 01 	lds	r25, 0x0105
 244:	a0 91 06 01 	lds	r26, 0x0106
 248:	b0 91 07 01 	lds	r27, 0x0107
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	ab 83       	std	Y+3, r26	; 0x03
 252:	bc 83       	std	Y+4, r27	; 0x04
	sei();
 254:	78 94       	sei
	return localmillis;
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	ab 81       	ldd	r26, Y+3	; 0x03
 25c:	bc 81       	ldd	r27, Y+4	; 0x04
}
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
