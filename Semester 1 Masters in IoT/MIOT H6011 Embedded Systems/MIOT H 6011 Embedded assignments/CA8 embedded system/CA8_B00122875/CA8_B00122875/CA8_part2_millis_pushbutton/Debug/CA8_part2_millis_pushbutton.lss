
CA8_part2_millis_pushbutton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000242  2**0
                  ALLOC
  3 .stab         00000a20  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f2b  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000072e  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005ca  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000f2  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  88:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <vmillis>:
#include "millis.h"

void vmillis(uint32_t interval);
void vmillis(uint32_t interval)
{
millisInit();
  90:	0e 94 b2 00 	call	0x164	; 0x164 <millisInit>
uint32_t previousMillis=0;

{
		uint32_t currentMillis = millis();
  94:	0c 94 ca 00 	jmp	0x194	; 0x194 <millis>

00000098 <main>:
}
}

int main(void)
{
	cli();
  98:	f8 94       	cli


	DDRB |= (1<<5);			//LED PIN direction
  9a:	25 9a       	sbi	0x04, 5	; 4

	DDRD &= ~(1<<2);		//pull up resistor INT0  PD2pin
  9c:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<2);
  9e:	5a 9a       	sbi	0x0b, 2	; 11

	EICRA |= (1<<ISC01);	//configure falling edge
  a0:	80 91 69 00 	lds	r24, 0x0069
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 93 69 00 	sts	0x0069, r24
	EIMSK |= (1<<INT0);		//enable int0
  aa:	e8 9a       	sbi	0x1d, 0	; 29

	sei();		//global enable interrupt- put 1 in I bit SREG tells CPU to allow interrupts
  ac:	78 94       	sei
					//without this cpu cannot recognize interrupt/ISR.

	while(1)
	{
		sleep_mode();	//CPU stops executing code
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	83 bf       	out	0x33, r24	; 51
  b4:	88 95       	sleep
  b6:	83 b7       	in	r24, 0x33	; 51
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	83 bf       	out	0x33, r24	; 51
  bc:	f8 cf       	rjmp	.-16     	; 0xae <main+0x16>

000000be <__vector_1>:
		//if here- interrupt occurred
	}
}

ISR(INT0_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
#include "millis.h"

void vmillis(uint32_t interval);
void vmillis(uint32_t interval)
{
millisInit();
  e0:	0e 94 b2 00 	call	0x164	; 0x164 <millisInit>
uint32_t previousMillis=0;

{
		uint32_t currentMillis = millis();
  e4:	0e 94 ca 00 	call	0x194	; 0x194 <millis>

ISR(INT0_vect)
{
	vmillis(20);		//not good for ISRs avoid delays

	if (EIFR & (1<<INTF0))
  e8:	e0 99       	sbic	0x1c, 0	; 28
	{
	//clear bounce manually flag
	EIFR |= (1<<INTF0);				//write 1 to flag
  ea:	e0 9a       	sbi	0x1c, 0	; 28
	}

	if( !(PIND & (1<<2))) 			// pd2 is low
  ec:	4a 99       	sbic	0x09, 2	; 9
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <__vector_1+0x3a>
	{
		PORTB ^= (1<<5);			//toggle led of Arduino
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	90 e2       	ldi	r25, 0x20	; 32
  f4:	89 27       	eor	r24, r25
  f6:	85 b9       	out	0x05, r24	; 5
	}
}
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_14>:
static uint32_t elapsedMillis;


// Time CTC interrupt - 1ms
ISR ( TIMER0_COMPA_vect )
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
elapsedMillis++;
 12c:	80 91 00 01 	lds	r24, 0x0100
 130:	90 91 01 01 	lds	r25, 0x0101
 134:	a0 91 02 01 	lds	r26, 0x0102
 138:	b0 91 03 01 	lds	r27, 0x0103
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	a1 1d       	adc	r26, r1
 140:	b1 1d       	adc	r27, r1
 142:	80 93 00 01 	sts	0x0100, r24
 146:	90 93 01 01 	sts	0x0101, r25
 14a:	a0 93 02 01 	sts	0x0102, r26
 14e:	b0 93 03 01 	sts	0x0103, r27
}
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <millisInit>:
 * Set correct prescale and start timer.
 */

void millisInit(void)
{
	TCCR0A |= (1 << WGM01);  // Configure timer 0 for CTC mode
 164:	84 b5       	in	r24, 0x24	; 36
 166:	82 60       	ori	r24, 0x02	; 2
 168:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);  // Enable CTC interrupt
 16a:	ee e6       	ldi	r30, 0x6E	; 110
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	82 60       	ori	r24, 0x02	; 2
 172:	80 83       	st	Z, r24
	sei () ; // Enable global interrupts
 174:	78 94       	sei
	OCR0A = 249; // Set CTC compare value to 1Hz at 1 MHz AVR clock , with a prescaler of 64
 176:	89 ef       	ldi	r24, 0xF9	; 249
 178:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0;
 17a:	16 bc       	out	0x26, r1	; 38
	elapsedMillis=0;
 17c:	10 92 00 01 	sts	0x0100, r1
 180:	10 92 01 01 	sts	0x0101, r1
 184:	10 92 02 01 	sts	0x0102, r1
 188:	10 92 03 01 	sts	0x0103, r1
	TCCR0B |= (1 << CS00) | (1 << CS01) ; // set pre-scaler to 64 and start the timer FCPU
 18c:	85 b5       	in	r24, 0x25	; 37
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	85 bd       	out	0x25, r24	; 37
 192:	08 95       	ret

00000194 <millis>:
   * Do you need to do anything to ensure this function works correctly in
   * that case?
   */

	uint32_t localmillis;
	cli();
 194:	f8 94       	cli
	localmillis= elapsedMillis;
 196:	60 91 00 01 	lds	r22, 0x0100
 19a:	70 91 01 01 	lds	r23, 0x0101
 19e:	80 91 02 01 	lds	r24, 0x0102
 1a2:	90 91 03 01 	lds	r25, 0x0103
	sei();
 1a6:	78 94       	sei
	return localmillis;
}
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
