
count_press.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000000e6  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000588  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bc5  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000027  00000000  00000000  000012b9  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000012e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072e  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ca  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f5  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

int main(void)
{

  uint8_t CV , OV=1,count=0;
  DDRD  = 0xFF;			// port D as ouput.
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
  DDRB  &=~(1<<4);		// port B bit 4 (pin 12 on arduino) as button
  9a:	24 98       	cbi	0x04, 4	; 4
  PORTB |= (1<<4);  	// pull up
  9c:	2c 9a       	sbi	0x05, 4	; 5

  PORTD =DEC_0;
  9e:	8f e3       	ldi	r24, 0x3F	; 63
  a0:	8b b9       	out	0x0b, r24	; 11
int roll[9] = { DEC_9, DEC_8, DEC_7, DEC_6, DEC_5, DEC_4, DEC_3, DEC_2, DEC_1} ;

int main(void)
{

  uint8_t CV , OV=1,count=0;
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	21 e0       	ldi	r18, 0x01	; 1
       PORTD =roll[count];
       count++;
      }
      else             // button not pressed
      {count =0;
       PORTD =DEC_0;}
  a6:	4f e3       	ldi	r20, 0x3F	; 63
  a8:	10 c0       	rjmp	.+32     	; 0xca <main+0x34>
    if(CV==0 && OV != 0 )		// button is pressed
     {

      if(count<number)
      {
       PORTD =roll[count];
  aa:	e3 2f       	mov	r30, r19
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	e0 50       	subi	r30, 0x00	; 0
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	80 81       	ld	r24, Z
  b8:	8b b9       	out	0x0b, r24	; 11
       count++;
  ba:	3f 5f       	subi	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	ef e3       	ldi	r30, 0x3F	; 63
  be:	fc e9       	ldi	r31, 0x9C	; 156
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x30>
  c6:	00 00       	nop
      }
      else             // button not pressed
      {count =0;
       PORTD =DEC_0;}
     }
    OV = CV; //
  c8:	29 2f       	mov	r18, r25
  PORTD =DEC_0;

  while(1)
  {

    CV =PINB &(1<<4); 	// assigning bit 4 value anded with input port b
  ca:	83 b1       	in	r24, 0x03	; 3

    if(CV==0 && OV != 0 )		// button is pressed
  cc:	98 2f       	mov	r25, r24
  ce:	90 71       	andi	r25, 0x10	; 16
  d0:	84 fd       	sbrc	r24, 4
  d2:	f4 cf       	rjmp	.-24     	; 0xbc <main+0x26>
  d4:	22 23       	and	r18, r18
  d6:	91 f3       	breq	.-28     	; 0xbc <main+0x26>
     {

      if(count<number)
  d8:	39 30       	cpi	r19, 0x09	; 9
  da:	38 f3       	brcs	.-50     	; 0xaa <main+0x14>
       PORTD =roll[count];
       count++;
      }
      else             // button not pressed
      {count =0;
       PORTD =DEC_0;}
  dc:	4b b9       	out	0x0b, r20	; 11
      {
       PORTD =roll[count];
       count++;
      }
      else             // button not pressed
      {count =0;
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	ed cf       	rjmp	.-38     	; 0xbc <main+0x26>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
