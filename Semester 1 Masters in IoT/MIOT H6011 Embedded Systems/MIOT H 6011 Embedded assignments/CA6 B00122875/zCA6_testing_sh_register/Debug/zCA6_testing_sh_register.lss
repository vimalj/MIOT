
zCA6_testing_sh_register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000008d0  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c1d  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000027  00000000  00000000  000016b5  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000016e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072e  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ca  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f5  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  0000250d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <util/delay.h>			//delay header file
#include "sr595.h"


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	28 97       	sbiw	r28, 0x08	; 8
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	uint8_t led[8]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
  bc:	ce 01       	movw	r24, r28
  be:	09 96       	adiw	r24, 0x09	; 9
  c0:	7c 01       	movw	r14, r24
	while(1)
	{
		SR595Init();
  c2:	0e 94 78 00 	call	0xf0	; 0xf0 <SR595Init>
  c6:	8e 01       	movw	r16, r28
  c8:	0f 5f       	subi	r16, 0xFF	; 255
  ca:	1f 4f       	sbci	r17, 0xFF	; 255
	{
			for(uint8_t m=0;m<8;m++)
			{
			    SR595Send(led[m]);
  cc:	f8 01       	movw	r30, r16
  ce:	81 91       	ld	r24, Z+
  d0:	8f 01       	movw	r16, r30
  d2:	0e 94 82 00 	call	0x104	; 0x104 <SR595Send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	ff ef       	ldi	r31, 0xFF	; 255
  d8:	29 e6       	ldi	r18, 0x69	; 105
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	f1 50       	subi	r31, 0x01	; 1
  de:	20 40       	sbci	r18, 0x00	; 0
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x46>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x50>
  e6:	00 00       	nop
	uint8_t led[8]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
	while(1)
	{
		SR595Init();
	{
			for(uint8_t m=0;m<8;m++)
  e8:	0e 15       	cp	r16, r14
  ea:	1f 05       	cpc	r17, r15
  ec:	79 f7       	brne	.-34     	; 0xcc <main+0x36>
  ee:	e9 cf       	rjmp	.-46     	; 0xc2 <main+0x2c>

000000f0 <SR595Init>:
#include <util/delay.h>
#include "sr595.h"

void SR595Init()
{
	SR_DATA_DIR |= ((1<<latchPin)|(1<<clockPin)|(1<<dataPin));
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	80 67       	ori	r24, 0x70	; 112
  f4:	8a b9       	out	0x0a, r24	; 10
  f6:	08 95       	ret

000000f8 <SR595Latch>:
}
void SR595Latch()
{
	SR_DATA_PORT |=(1<<latchPin);//HIGH
  f8:	5d 9a       	sbi	0x0b, 5	; 11
	SR_DATA_PORT &=~(1<<latchPin);//LOW
  fa:	5d 98       	cbi	0x0b, 5	; 11
  fc:	08 95       	ret

000000fe <SR595Clock>:
}
void SR595Clock()
{
	  SR_DATA_PORT |=(1<<clockPin);//HIGH
  fe:	5e 9a       	sbi	0x0b, 6	; 11
	  SR_DATA_PORT &=~(1<<clockPin);//LOW
 100:	5e 98       	cbi	0x0b, 6	; 11
 102:	08 95       	ret

00000104 <SR595Send>:
}

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=(~(1<<latchPin));
 104:	5d 98       	cbi	0x0b, 5	; 11
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	08 c0       	rjmp	.+16     	; 0x11e <SR595Send+0x1a>
   for(uint8_t i=0;i<8;i++)
   {
      if (byteToSend & (1<<i))
      {

    	  SR_DATA_PORT|=(1<<dataPin);
 10e:	5c 9a       	sbi	0x0b, 4	; 11
	SR_DATA_PORT |=(1<<latchPin);//HIGH
	SR_DATA_PORT &=~(1<<latchPin);//LOW
}
void SR595Clock()
{
	  SR_DATA_PORT |=(1<<clockPin);//HIGH
 110:	5e 9a       	sbi	0x0b, 6	; 11
	  SR_DATA_PORT &=~(1<<clockPin);//LOW
 112:	5e 98       	cbi	0x0b, 6	; 11
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=(~(1<<latchPin));

   for(uint8_t i=0;i<8;i++)
 118:	28 30       	cpi	r18, 0x08	; 8
 11a:	31 05       	cpc	r19, r1
 11c:	89 f0       	breq	.+34     	; 0x140 <SR595Send+0x3c>
   {
      if (byteToSend & (1<<i))
 11e:	ac 01       	movw	r20, r24
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <SR595Send+0x24>
 124:	55 95       	asr	r21
 126:	47 95       	ror	r20
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <SR595Send+0x20>
 12c:	40 fd       	sbrc	r20, 0
 12e:	ef cf       	rjmp	.-34     	; 0x10e <SR595Send+0xa>
    	  SR_DATA_PORT|=(1<<dataPin);
      }
      else
      {

    	  SR_DATA_PORT&=~(1<<dataPin);
 130:	5c 98       	cbi	0x0b, 4	; 11
	SR_DATA_PORT |=(1<<latchPin);//HIGH
	SR_DATA_PORT &=~(1<<latchPin);//LOW
}
void SR595Clock()
{
	  SR_DATA_PORT |=(1<<clockPin);//HIGH
 132:	5e 9a       	sbi	0x0b, 6	; 11
	  SR_DATA_PORT &=~(1<<clockPin);//LOW
 134:	5e 98       	cbi	0x0b, 6	; 11
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=(~(1<<latchPin));

   for(uint8_t i=0;i<8;i++)
 13a:	28 30       	cpi	r18, 0x08	; 8
 13c:	31 05       	cpc	r19, r1
 13e:	79 f7       	brne	.-34     	; 0x11e <SR595Send+0x1a>
{
	SR_DATA_DIR |= ((1<<latchPin)|(1<<clockPin)|(1<<dataPin));
}
void SR595Latch()
{
	SR_DATA_PORT |=(1<<latchPin);//HIGH
 140:	5d 9a       	sbi	0x0b, 5	; 11
	SR_DATA_PORT &=~(1<<latchPin);//LOW
 142:	5d 98       	cbi	0x0b, 5	; 11
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
