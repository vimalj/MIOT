
CA6-74HC595-LCD-interfacing-b00122875.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000214  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000ef4  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c8c  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000027  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00001e48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072e  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ca  00000000  00000000  000025b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f5  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  00002c75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  8e:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcdInit>:
#include "lcd.h"

void lcdInit(void)		// Setting input and output ports only
{
	//LCD_DATA_DIR = 0xFF; // Setting Port D as output
	SR595Init();
  96:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SR595Init>
	LCD_CONTROL_DIR |= (1<<E_PIN); // E pin high (1<<4 or 0b0001 0000) (A4 on arduino uc chip)
  9a:	3c 9a       	sbi	0x07, 4	; 7
	LCD_CONTROL_DIR |= (1<<RS_PIN); //RS pin high (1<<5 or 0b0010 0000)	(A5 on arduino uc chip)
  9c:	3d 9a       	sbi	0x07, 5	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	89 ef       	ldi	r24, 0xF9	; 249
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <lcdInit+0xe>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcdInit+0x18>
  ae:	00 00       	nop
  b0:	08 95       	ret

000000b2 <lcdWriteCommand>:
}

void lcdWriteCommand(uint8_t command)		// Turning on LCD with cursor (0x0F) or without cursor (0x0C)

  {
    LCD_CONTROL_PORT &= ~(1<<RS_PIN);   //RS is 0b0000 0000 (low)
  b2:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	95 e0       	ldi	r25, 0x05	; 5
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcdWriteCommand+0x4>
  ba:	00 00       	nop
      _delay_us(1);

      //LCD_DATA_PORT = command;   // (0x0F) user will give (hex code) command for output through port D on lcd

      SR595Send(command);
  bc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SR595Send>
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcdWriteCommand+0x10>
  c6:	00 00       	nop
      _delay_us(1);

      LCD_CONTROL_PORT |= (1<<E_PIN);	// 	E is 0b0001 0000 setting high E pin(A4) if it is low otherwise ok
  c8:	44 9a       	sbi	0x08, 4	; 8
  ca:	95 e0       	ldi	r25, 0x05	; 5
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdWriteCommand+0x1a>
  d0:	00 00       	nop
      _delay_us(1);
      LCD_CONTROL_PORT &= ~(1<<E_PIN); // E is 0b0000 0000 setting low
  d2:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9f e1       	ldi	r25, 0x1F	; 31
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcdWriteCommand+0x26>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcdWriteCommand+0x2c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <lcdWriteChar>:
      _delay_ms(2);			// if hex code is 0x0F this will turn on lcd with blinking cursor.
  }

	void lcdWriteChar(char letter)		// This function will display character
  {
      LCD_CONTROL_PORT |= (1<<RS_PIN);   //RS is 0b0010 0000  (high)
  e2:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	95 e0       	ldi	r25, 0x05	; 5
  e6:	9a 95       	dec	r25
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcdWriteChar+0x4>
  ea:	00 00       	nop
      _delay_us(1);

      SR595Send(letter);
  ec:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SR595Send>
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcdWriteChar+0x10>
  f6:	00 00       	nop
     // LCD_DATA_PORT = letter   //command for entering suitable ASCII equivalent hex code or alphabet directly (eg; ASCII A,B,C is 0x41, 0x42, 0x43 in hex)
      _delay_us(1);

      LCD_CONTROL_PORT |= (1<<E_PIN);    //E high
  f8:	44 9a       	sbi	0x08, 4	; 8
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcdWriteChar+0x1a>
 100:	00 00       	nop
      _delay_us(1);
      LCD_CONTROL_PORT &= ~(1<<E_PIN);		// E low
 102:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e3       	ldi	r24, 0x3F	; 63
 106:	9f e1       	ldi	r25, 0x1F	; 31
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcdWriteChar+0x26>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcdWriteChar+0x2c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <lcdWriteString>:
      _delay_ms(2);
  }										// This will display character

void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
	uint8_t i=0;

	while (str[i] !='\0') {
 11a:	88 81       	ld	r24, Y
 11c:	88 23       	and	r24, r24
 11e:	51 f0       	breq	.+20     	; 0x134 <lcdWriteString+0x22>
  }										// This will display character

void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
	uint8_t i=0;
 120:	10 e0       	ldi	r17, 0x00	; 0

	while (str[i] !='\0') {
		lcdWriteChar (str[i]);// print string
 122:	0e 94 71 00 	call	0xe2	; 0xe2 <lcdWriteChar>
		i++;
 126:	1f 5f       	subi	r17, 0xFF	; 255
void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
	uint8_t i=0;

	while (str[i] !='\0') {
 128:	fe 01       	movw	r30, r28
 12a:	e1 0f       	add	r30, r17
 12c:	f1 1d       	adc	r31, r1
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	f7 cf       	rjmp	.-18     	; 0x122 <lcdWriteString+0x10>
		lcdWriteChar (str[i]);// print string
		i++;
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	08 95       	ret

0000013c <main>:
#include "lcd.h"				// Personally defined (pre defined) or user defined header file of declarations.
#include "sr595.h"

int main (void)
  {
	 lcdInit();
 13c:	0e 94 4b 00 	call	0x96	; 0x96 <lcdInit>
	 lcdWriteCommand(DISPLAY_ON);		// 0x0C		while RS is 0 and then write 0x0C then toggle once E high then low
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
	 lcdWriteCommand(CLEAR_DISPLAY);	// 0x01 	while RS is 0 and then 0x01 is entered the again E pin high and low
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>

	 lcdWriteString ("*VIMAL*");		// While RS=1 write this string character as per ASCII-HEX values and E=1 and E=0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 89 00 	call	0x112	; 0x112 <lcdWriteString>
	 lcdWriteCommand(TWO_LINE_MODE);	//0x38
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
	 lcdWriteCommand(SET_ADDRESS|0x40);	// moving cursor to writable/usable data address (DDR RAM)
 15a:	80 ec       	ldi	r24, 0xC0	; 192
 15c:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
	 lcdWriteString ("*JASWAL*");		//While RS=1 write this string character as per ASCII-HEX values and E=1 and E=0
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 89 00 	call	0x112	; 0x112 <lcdWriteString>

	 while(1)
	  {
	    for( int m=0; m<8; m++)
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	c8 30       	cpi	r28, 0x08	; 8
 16e:	d1 05       	cpc	r29, r1
 170:	b4 f0       	brlt	.+44     	; 0x19e <main+0x62>
 172:	c8 e0       	ldi	r28, 0x08	; 8
 174:	d0 e0       	ldi	r29, 0x00	; 0
	    _delay_ms(250);
	    }

	    for (int k=8; k>0; k--)
	    {
	    lcdWriteCommand(DISPLAY_SHIFT_LEFT);	//while RS is 0 and then write 0x18 then toggle once E high then low
 176:	88 e1       	ldi	r24, 0x18	; 24
 178:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	84 e3       	ldi	r24, 0x34	; 52
 180:	9c e0       	ldi	r25, 0x0C	; 12
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x46>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x50>
 18c:	00 00       	nop
 18e:	21 97       	sbiw	r28, 0x01	; 1
	    {
	    lcdWriteCommand(DISPLAY_SHIFT_RIGHT);	//while RS is 0 and then write 0x1C then toggle once E high then low
	    _delay_ms(250);
	    }

	    for (int k=8; k>0; k--)
 190:	20 97       	sbiw	r28, 0x00	; 0
 192:	89 f7       	brne	.-30     	; 0x176 <main+0x3a>
	 lcdWriteCommand(SET_ADDRESS|0x40);	// moving cursor to writable/usable data address (DDR RAM)
	 lcdWriteString ("*JASWAL*");		//While RS=1 write this string character as per ASCII-HEX values and E=1 and E=0

	 while(1)
	  {
	    for( int m=0; m<8; m++)
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	c8 30       	cpi	r28, 0x08	; 8
 19a:	d1 05       	cpc	r29, r1
 19c:	54 f7       	brge	.-44     	; 0x172 <main+0x36>
	    {
	    lcdWriteCommand(DISPLAY_SHIFT_RIGHT);	//while RS is 0 and then write 0x1C then toggle once E high then low
 19e:	8c e1       	ldi	r24, 0x1C	; 28
 1a0:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	84 e3       	ldi	r24, 0x34	; 52
 1a8:	9c e0       	ldi	r25, 0x0C	; 12
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x6e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x78>
 1b4:	00 00       	nop
	 lcdWriteCommand(SET_ADDRESS|0x40);	// moving cursor to writable/usable data address (DDR RAM)
	 lcdWriteString ("*JASWAL*");		//While RS=1 write this string character as per ASCII-HEX values and E=1 and E=0

	 while(1)
	  {
	    for( int m=0; m<8; m++)
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	d9 cf       	rjmp	.-78     	; 0x16c <main+0x30>

000001ba <SR595Init>:
#include <util/delay.h>
#include "sr595.h"

void SR595Init()
{
	SR_DATA_DIR |= ((1<<latchPin)|(1<<clockPin)|(1<<dataPin));
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	80 67       	ori	r24, 0x70	; 112
 1be:	8a b9       	out	0x0a, r24	; 10
 1c0:	08 95       	ret

000001c2 <SR595Latch>:
}
void SR595Latch()
{
	SR_DATA_PORT |=(1<<latchPin);//HIGH
 1c2:	5d 9a       	sbi	0x0b, 5	; 11
	SR_DATA_PORT &=~(1<<latchPin);//LOW
 1c4:	5d 98       	cbi	0x0b, 5	; 11
 1c6:	08 95       	ret

000001c8 <SR595Clock>:
}
void SR595Clock()
{
	 SR_DATA_PORT |=(1<<clockPin);//HIGH
 1c8:	5e 9a       	sbi	0x0b, 6	; 11
	 SR_DATA_PORT &=~(1<<clockPin);//LOW
 1ca:	5e 98       	cbi	0x0b, 6	; 11
 1cc:	08 95       	ret

000001ce <SR595Send>:

}

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=~(1<<latchPin);
 1ce:	5d 98       	cbi	0x0b, 5	; 11
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <SR595Send+0x1a>
   for(uint8_t i=0;i<8;i++)
   {
      if (byteToSend & (1<<i))
      {

    	  SR_DATA_PORT|=(1<<dataPin);
 1d8:	5c 9a       	sbi	0x0b, 4	; 11
	SR_DATA_PORT |=(1<<latchPin);//HIGH
	SR_DATA_PORT &=~(1<<latchPin);//LOW
}
void SR595Clock()
{
	 SR_DATA_PORT |=(1<<clockPin);//HIGH
 1da:	5e 9a       	sbi	0x0b, 6	; 11
	 SR_DATA_PORT &=~(1<<clockPin);//LOW
 1dc:	5e 98       	cbi	0x0b, 6	; 11
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=~(1<<latchPin);

   for(uint8_t i=0;i<8;i++)
 1e2:	28 30       	cpi	r18, 0x08	; 8
 1e4:	31 05       	cpc	r19, r1
 1e6:	89 f0       	breq	.+34     	; 0x20a <SR595Send+0x3c>
   {
      if (byteToSend & (1<<i))
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <SR595Send+0x24>
 1ee:	55 95       	asr	r21
 1f0:	47 95       	ror	r20
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <SR595Send+0x20>
 1f6:	40 fd       	sbrc	r20, 0
 1f8:	ef cf       	rjmp	.-34     	; 0x1d8 <SR595Send+0xa>
    	  SR_DATA_PORT|=(1<<dataPin);
      }
      else
      {

    	  SR_DATA_PORT&=~(1<<dataPin);
 1fa:	5c 98       	cbi	0x0b, 4	; 11
	SR_DATA_PORT |=(1<<latchPin);//HIGH
	SR_DATA_PORT &=~(1<<latchPin);//LOW
}
void SR595Clock()
{
	 SR_DATA_PORT |=(1<<clockPin);//HIGH
 1fc:	5e 9a       	sbi	0x0b, 6	; 11
	 SR_DATA_PORT &=~(1<<clockPin);//LOW
 1fe:	5e 98       	cbi	0x0b, 6	; 11
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	3f 4f       	sbci	r19, 0xFF	; 255

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=~(1<<latchPin);

   for(uint8_t i=0;i<8;i++)
 204:	28 30       	cpi	r18, 0x08	; 8
 206:	31 05       	cpc	r19, r1
 208:	79 f7       	brne	.-34     	; 0x1e8 <SR595Send+0x1a>
{
	SR_DATA_DIR |= ((1<<latchPin)|(1<<clockPin)|(1<<dataPin));
}
void SR595Latch()
{
	SR_DATA_PORT |=(1<<latchPin);//HIGH
 20a:	5d 9a       	sbi	0x0b, 5	; 11
	SR_DATA_PORT &=~(1<<latchPin);//LOW
 20c:	5d 98       	cbi	0x0b, 5	; 11
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
