
Keypad_interfacing_lcd_using_benheader2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000023a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000102c  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c6c  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000027  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000691  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  00002621  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000083  00000000  00000000  00002bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  00002c5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  78:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <keypadSetupPins>:
 */

void keypadSetupPins(void)
{
	//Set column pins as output pins
	COL_DIR |= ( (1<<COL_1_PIN) | (1<<COL_2_PIN) | (1<<COL_3_PIN) );
  80:	84 b1       	in	r24, 0x04	; 4
  82:	87 60       	ori	r24, 0x07	; 7
  84:	84 b9       	out	0x04, r24	; 4

	//Set row pins as inputs
	ROW_DIR &= ~((1<<ROW_1_PIN) |  (1<<ROW_2_PIN) | (1<<ROW_3_PIN) | (1<<ROW_4_PIN));
  86:	87 b1       	in	r24, 0x07	; 7
  88:	80 7f       	andi	r24, 0xF0	; 240
  8a:	87 b9       	out	0x07, r24	; 7

	//Enable pull ups 1's on row pins
	ROW_PORT |= ((1<<ROW_1_PIN) |  (1<<ROW_2_PIN) | (1<<ROW_3_PIN) | (1<<ROW_4_PIN));
  8c:	88 b1       	in	r24, 0x08	; 8
  8e:	8f 60       	ori	r24, 0x0F	; 15
  90:	88 b9       	out	0x08, r24	; 8

	//Send out three 0's on columns
	COL_PORT |= ( (1<<COL_1_PIN) | (1<<COL_2_PIN) | (1<<COL_3_PIN) );
  92:	85 b1       	in	r24, 0x05	; 5
  94:	87 60       	ori	r24, 0x07	; 7
  96:	85 b9       	out	0x05, r24	; 5
  98:	08 95       	ret

0000009a <keypadGetKeyPressed>:
char keypadGetKeyPressed(void)
{
	char retval=0;

	//Set 011 on columns---------------checking all rows using column 1
	COL_PORT &= ~(1<<COL_1_PIN);
  9a:	28 98       	cbi	0x05, 0	; 5
	COL_PORT |= ((1<<COL_2_PIN) | (1<<COL_3_PIN));
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	86 60       	ori	r24, 0x06	; 6
  a0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	25 e0       	ldi	r18, 0x05	; 5
  a4:	2a 95       	dec	r18
  a6:	f1 f7       	brne	.-4      	; 0xa4 <keypadGetKeyPressed+0xa>
  a8:	00 00       	nop
	//delay to allow values to propagate to rows
	_delay_us(1);

	//test row 1 column 1
	if (!(ROW_INPUT & (1<< ROW_1_PIN)))
  aa:	30 9b       	sbis	0x06, 0	; 6
  ac:	28 c0       	rjmp	.+80     	; 0xfe <keypadGetKeyPressed+0x64>
 * Returns 0 if no key pressed and returns ascii code if key pressed.
 * Sets all the cols to low when done.
 */
char keypadGetKeyPressed(void)
{
	char retval=0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
		//there is 0 on RC11 pin => key 1 is pressed
		retval = '1';
	}

	//test row 2 column 1
		if (!(ROW_INPUT & (1<< ROW_2_PIN)))
  b0:	31 9b       	sbis	0x06, 1	; 6
		{
			//there is 0 on RC21 => key 4 is pressed
			retval = '4';
  b2:	84 e3       	ldi	r24, 0x34	; 52
		}
	//test row 3 column 1
		if (!(ROW_INPUT & (1<< ROW_3_PIN)))
  b4:	32 9b       	sbis	0x06, 2	; 6
			{
				//there is 0 on RC31 pin => key 7 is pressed
				retval = '7';
  b6:	87 e3       	ldi	r24, 0x37	; 55
			}
	//test row 4 column 1
		if (!(ROW_INPUT & (1<< ROW_4_PIN)))
  b8:	33 9b       	sbis	0x06, 3	; 6
  ba:	28 c0       	rjmp	.+80     	; 0x10c <keypadGetKeyPressed+0x72>
				lcdWriteCommand(CURSOR_SHIFT_LEFT);
				_delay_ms(20);
			}

	//Set 101 on columns---------------checking all rows using column 2
		COL_PORT &= ~(1<<COL_2_PIN);
  bc:	29 98       	cbi	0x05, 1	; 5
		COL_PORT |= ((1<<COL_1_PIN) | (1<<COL_3_PIN));
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	95 60       	ori	r25, 0x05	; 5
  c2:	95 b9       	out	0x05, r25	; 5
  c4:	95 e0       	ldi	r25, 0x05	; 5
  c6:	9a 95       	dec	r25
  c8:	f1 f7       	brne	.-4      	; 0xc6 <keypadGetKeyPressed+0x2c>
  ca:	00 00       	nop
		_delay_us(1);	//delay to allow values to propagate to rows

	//test row 1 column 2
			if (!(ROW_INPUT & (1<< ROW_1_PIN)))
  cc:	30 9b       	sbis	0x06, 0	; 6
			{
				//there is 0 on RC12 pin => key 2 is pressed
				retval = '2';
  ce:	82 e3       	ldi	r24, 0x32	; 50
			}

	//test row 2 column 2
			if (!(ROW_INPUT & (1<< ROW_2_PIN)))
  d0:	31 9b       	sbis	0x06, 1	; 6
			{
				//there is 0 on RC22 pin => key 5 is pressed
				retval = '5';
  d2:	85 e3       	ldi	r24, 0x35	; 53
				}

	//test row 3 column 2
		if (!(ROW_INPUT & (1<< ROW_3_PIN)))
  d4:	32 9b       	sbis	0x06, 2	; 6
			{
				//there is 0 on RC32 pin => key 8 is pressed
				retval = '8';
  d6:	88 e3       	ldi	r24, 0x38	; 56
			}
	//test row 4 column 2
		if (!(ROW_INPUT & (1<< ROW_4_PIN)))
  d8:	33 9b       	sbis	0x06, 3	; 6
			{
				//there is 0 on RC42 pin => key 0 is pressed
				retval = '0';
  da:	80 e3       	ldi	r24, 0x30	; 48
			}


//Set 110 on columns ----------checking all rows using column 3
			COL_PORT &= ~(1<<COL_3_PIN);
  dc:	2a 98       	cbi	0x05, 2	; 5
			COL_PORT |= ((1<<COL_1_PIN) | (1<<COL_2_PIN));
  de:	95 b1       	in	r25, 0x05	; 5
  e0:	93 60       	ori	r25, 0x03	; 3
  e2:	95 b9       	out	0x05, r25	; 5
  e4:	25 e0       	ldi	r18, 0x05	; 5
  e6:	2a 95       	dec	r18
  e8:	f1 f7       	brne	.-4      	; 0xe6 <keypadGetKeyPressed+0x4c>
  ea:	00 00       	nop
		//delay to allow values to propagate to rows
			_delay_us(1);

		//test row 1 column 3
				if (!(ROW_INPUT & (1<< ROW_1_PIN)))
  ec:	30 9b       	sbis	0x06, 0	; 6
				{
					//there is 0 on RC13 pin => key 2 is pressed
					retval = '3';
  ee:	83 e3       	ldi	r24, 0x33	; 51
				}

		//test row 2 column 3
				if (!(ROW_INPUT & (1<< ROW_2_PIN)))
  f0:	31 9b       	sbis	0x06, 1	; 6
				{
					//there is 0 on RC23 pin => key 5 is pressed
					retval = '6';
  f2:	86 e3       	ldi	r24, 0x36	; 54
					}

		//test row 3 column 3
			if (!(ROW_INPUT & (1<< ROW_3_PIN)))
  f4:	32 9b       	sbis	0x06, 2	; 6
				{
					//there is 0 on RC33 pin => key 8 is pressed
					retval = '9';
  f6:	89 e3       	ldi	r24, 0x39	; 57
				}
		//test row 4 column 3
			if (!(ROW_INPUT & (1<< ROW_4_PIN)))
  f8:	33 9b       	sbis	0x06, 3	; 6
  fa:	03 c0       	rjmp	.+6      	; 0x102 <keypadGetKeyPressed+0x68>
					lcdWriteCommand(CLEAR_DISPLAY);
				}


	return retval;
}
  fc:	08 95       	ret

	//test row 1 column 1
	if (!(ROW_INPUT & (1<< ROW_1_PIN)))
	{
		//there is 0 on RC11 pin => key 1 is pressed
		retval = '1';
  fe:	81 e3       	ldi	r24, 0x31	; 49
 100:	d7 cf       	rjmp	.-82     	; 0xb0 <keypadGetKeyPressed+0x16>
		//test row 4 column 3
			if (!(ROW_INPUT & (1<< ROW_4_PIN)))
				{
					//there is 0 on RC43 pin => key 0 is pressed
					retval = '#';
					lcdWriteCommand(CLEAR_DISPLAY);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 ba 00 	call	0x174	; 0x174 <lcdWriteCommand>
				}
		//test row 4 column 3
			if (!(ROW_INPUT & (1<< ROW_4_PIN)))
				{
					//there is 0 on RC43 pin => key 0 is pressed
					retval = '#';
 108:	83 e2       	ldi	r24, 0x23	; 35
					lcdWriteCommand(CLEAR_DISPLAY);
				}


	return retval;
}
 10a:	08 95       	ret
		if (!(ROW_INPUT & (1<< ROW_4_PIN)))
			{
			//there is 0 on RC41 pin => key * is pressed
			retval = ' ';

				lcdWriteCommand(CURSOR_SHIFT_LEFT);
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	0e 94 ba 00 	call	0x174	; 0x174 <lcdWriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	99 ef       	ldi	r25, 0xF9	; 249
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	20 40       	sbci	r18, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <keypadGetKeyPressed+0x7e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <keypadGetKeyPressed+0x88>
 122:	00 00       	nop
				_delay_ms(20);
				lcdWriteChar(' ');
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcdWriteChar>
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	99 ef       	ldi	r25, 0xF9	; 249
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	81 50       	subi	r24, 0x01	; 1
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	20 40       	sbci	r18, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <keypadGetKeyPressed+0x96>
 138:	00 c0       	rjmp	.+0      	; 0x13a <keypadGetKeyPressed+0xa0>
 13a:	00 00       	nop
				_delay_ms(20);
				lcdWriteCommand(CURSOR_SHIFT_LEFT);
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	0e 94 ba 00 	call	0x174	; 0x174 <lcdWriteCommand>
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	99 ef       	ldi	r25, 0xF9	; 249
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <keypadGetKeyPressed+0xae>
 150:	00 c0       	rjmp	.+0      	; 0x152 <keypadGetKeyPressed+0xb8>
 152:	00 00       	nop
			}
	//test row 4 column 1
		if (!(ROW_INPUT & (1<< ROW_4_PIN)))
			{
			//there is 0 on RC41 pin => key * is pressed
			retval = ' ';
 154:	80 e2       	ldi	r24, 0x20	; 32
 156:	b2 cf       	rjmp	.-156    	; 0xbc <keypadGetKeyPressed+0x22>

00000158 <lcdInit>:
#include <util/delay.h>
#include "lcd.h"

void lcdInit(void)		// Setting input and output ports only
{
  DDRD = 0xFF; // Setting Port D as output
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	8a b9       	out	0x0a, r24	; 10

  DDRC |= (1<<E_PIN); // E pin  (1<<4 or 0b0001 0000) (A4 on arduino uc chip) data direction using port C. 0 0r 1
 15c:	3c 9a       	sbi	0x07, 4	; 7
  DDRC |= (1<<RS_PIN); //RS pin	(1<<5 or 0b0010 0000)	(A5 on arduino uc chip)
 15e:	3d 9a       	sbi	0x07, 5	; 7
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <lcdInit+0xe>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcdInit+0x18>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <lcdWriteCommand>:
}

void lcdWriteCommand(uint8_t command)		// Turning on LCD with cursor (0x0F) or without cursor (0x0C)

  {
    PORTC &= ~(1<<RS_PIN);   //RS is 0b0000 0000 (set pin A5 0 or low)
 174:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	95 e0       	ldi	r25, 0x05	; 5
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcdWriteCommand+0x4>
 17c:	00 00       	nop
      _delay_us(1);

      PORTD = command;   // (0x0F) user will give (hex code) command for output through port D on lcd
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <lcdWriteCommand+0xe>
 186:	00 00       	nop
      _delay_us(1);

      PORTC |= (1<<E_PIN);	// 	E is 0b0001 0000 setting high E pin(A4) if it is low otherwise ok
 188:	44 9a       	sbi	0x08, 4	; 8
 18a:	95 e0       	ldi	r25, 0x05	; 5
 18c:	9a 95       	dec	r25
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcdWriteCommand+0x18>
 190:	00 00       	nop
      _delay_us(1);
      PORTC &= ~(1<<E_PIN); // E is 0b0000 0000 setting low
 192:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9f e1       	ldi	r25, 0x1F	; 31
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcdWriteCommand+0x24>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcdWriteCommand+0x2a>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <lcdWriteChar>:
      _delay_ms(2);			// if hex code is 0x0F this will turn on lcd with blinking cursor.
  }

	void lcdWriteChar(char letter)		// This function will display character
  {
      PORTC |= (1<<RS_PIN);   //RS is 0b0010 0000  high
 1a2:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	95 e0       	ldi	r25, 0x05	; 5
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcdWriteChar+0x4>
 1aa:	00 00       	nop
      _delay_us(1);

      PORTD = letter;   //command for entering suitable ASCII equivalent hex code or alphabet directly (eg; ASCII A,B,C is 0x41, 0x42, 0x43 in hex)
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	85 e0       	ldi	r24, 0x05	; 5
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcdWriteChar+0xe>
 1b4:	00 00       	nop
      _delay_us(1);

      PORTC |= (1<<E_PIN);    //E high
 1b6:	44 9a       	sbi	0x08, 4	; 8
 1b8:	95 e0       	ldi	r25, 0x05	; 5
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcdWriteChar+0x18>
 1be:	00 00       	nop
      _delay_us(1);
      PORTC &= ~(1<<E_PIN);		// E low
 1c0:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9f e1       	ldi	r25, 0x1F	; 31
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcdWriteChar+0x24>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcdWriteChar+0x2a>
 1cc:	00 00       	nop
 1ce:	08 95       	ret

000001d0 <lcdWriteString>:
      _delay_ms(2);
  }										// This will display character

void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	uint8_t i=0;

	while (str[i] !='\0') {
 1d8:	88 81       	ld	r24, Y
 1da:	88 23       	and	r24, r24
 1dc:	51 f0       	breq	.+20     	; 0x1f2 <lcdWriteString+0x22>
  }										// This will display character

void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
	uint8_t i=0;
 1de:	10 e0       	ldi	r17, 0x00	; 0

	while (str[i] !='\0') {
		lcdWriteChar (str[i]);// print string
 1e0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcdWriteChar>
		i++;
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
	uint8_t i=0;

	while (str[i] !='\0') {
 1e6:	fe 01       	movw	r30, r28
 1e8:	e1 0f       	add	r30, r17
 1ea:	f1 1d       	adc	r31, r1
 1ec:	80 81       	ld	r24, Z
 1ee:	81 11       	cpse	r24, r1
 1f0:	f7 cf       	rjmp	.-18     	; 0x1e0 <lcdWriteString+0x10>
		lcdWriteChar (str[i]);// print string
		i++;
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	08 95       	ret

000001fa <main>:
void lcdWriteCommand(uint8_t command);

int main (void)
  {
	char keypressed, oldkeypressed=0;
	lcdInit();
 1fa:	0e 94 ac 00 	call	0x158	; 0x158 <lcdInit>
	 keypadSetupPins();
 1fe:	0e 94 40 00 	call	0x80	; 0x80 <keypadSetupPins>
	 lcdWriteCommand(DISPLAY_ON|UNDERLINE);
 202:	8e e0       	ldi	r24, 0x0E	; 14
 204:	0e 94 ba 00 	call	0x174	; 0x174 <lcdWriteCommand>
	 lcdWriteCommand(CLEAR_DISPLAY);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 ba 00 	call	0x174	; 0x174 <lcdWriteCommand>
void lcdInit(void);
void lcdWriteCommand(uint8_t command);

int main (void)
  {
	char keypressed, oldkeypressed=0;
 20e:	d0 e0       	ldi	r29, 0x00	; 0
	 lcdWriteCommand(DISPLAY_ON|UNDERLINE);
	 lcdWriteCommand(CLEAR_DISPLAY);

	 while(1)
	  {
		 keypressed = keypadGetKeyPressed();
 210:	0e 94 4d 00 	call	0x9a	; 0x9a <keypadGetKeyPressed>
 214:	c8 2f       	mov	r28, r24

		 if (keypressed != 0 && (keypressed != oldkeypressed))
 216:	88 23       	and	r24, r24
 218:	19 f0       	breq	.+6      	; 0x220 <main+0x26>
 21a:	8d 13       	cpse	r24, r29
		 {
			 lcdWriteChar(keypressed);
 21c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcdWriteChar>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	89 ef       	ldi	r24, 0xF9	; 249
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x2c>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x36>
 230:	00 00       	nop
	 lcdWriteCommand(DISPLAY_ON|UNDERLINE);
	 lcdWriteCommand(CLEAR_DISPLAY);

	 while(1)
	  {
		 keypressed = keypadGetKeyPressed();
 232:	dc 2f       	mov	r29, r28
 234:	ed cf       	rjmp	.-38     	; 0x210 <main+0x16>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
