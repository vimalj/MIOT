
CA7_pinchange_interrupts_lcd_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000036a  2**0
                  ALLOC
  3 .stab         0000144c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d0d  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  000024c5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  000024f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000072e  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005ca  00000000  00000000  00002c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000f2  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  0000331a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  88:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <keypadSetupPins>:
 */

void keypadSetupPins(void)
{
	//Set column pins as output pins
	COL_DIR |= ( (1<<COL_1_PIN) | (1<<COL_2_PIN) | (1<<COL_3_PIN) );
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8c 61       	ori	r24, 0x1C	; 28
  94:	84 b9       	out	0x04, r24	; 4

	//Set row pins as inputs
	ROW_DIR &= ~((1<<ROW_1_PIN) |  (1<<ROW_2_PIN) | (1<<ROW_3_PIN) | (1<<ROW_4_PIN));
  96:	87 b1       	in	r24, 0x07	; 7
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	87 b9       	out	0x07, r24	; 7

	//Enable pull ups 1's on row pins
	ROW_PORT |= ((1<<ROW_1_PIN) |  (1<<ROW_2_PIN) | (1<<ROW_3_PIN) | (1<<ROW_4_PIN));
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	88 b9       	out	0x08, r24	; 8

	// Sending out 0's on columns
	COL_PORT &= ~((1<<COL_1_PIN) | (1<<COL_2_PIN) | (1<<COL_3_PIN));
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	83 7e       	andi	r24, 0xE3	; 227
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	08 95       	ret

000000aa <keypadGetKeyPressed>:
char keypadGetKeyPressed(void)
{
	char retval=0;   // initializing variable for returning ASCII value/ character.

	//-------- Set 011 on columns ------checking all rows through column 1
	COL_PORT &= ~(1<<COL_1_PIN);
  aa:	2a 98       	cbi	0x05, 2	; 5
	COL_PORT |= ((1<<COL_2_PIN) | (1<<COL_3_PIN));
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	88 61       	ori	r24, 0x18	; 24
  b0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e9       	ldi	r24, 0x9F	; 159
  b4:	9f e0       	ldi	r25, 0x0F	; 15
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <keypadGetKeyPressed+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <keypadGetKeyPressed+0x12>
  bc:	00 00       	nop

	//crucial: delay to allow values to propagate to rows
	_delay_ms(1);

	//test row 1 on column 1
	if (!(ROW_INPUT & (1<< ROW_1_PIN)))	//if(NOT(PINC & (1<<0)))->anded value with PINC is not 1 then it must be pressed
  be:	30 9b       	sbis	0x06, 0	; 6
  c0:	2b c0       	rjmp	.+86     	; 0x118 <keypadGetKeyPressed+0x6e>
 * Returns 0 if no key pressed and returns ASCII code if key pressed.
 * Sets all the columns to low when done.
 */
char keypadGetKeyPressed(void)
{
	char retval=0;   // initializing variable for returning ASCII value/ character.
  c2:	80 e0       	ldi	r24, 0x00	; 0
		//there is 0 on RC11 pin => key 1 is pressed
		retval = '1';
	}

	//test row 2  on column 1
		if (!(ROW_INPUT & (1<< ROW_2_PIN)))
  c4:	31 9b       	sbis	0x06, 1	; 6
		{
			//there is 0 on RC21 => key 4 is pressed
			retval = '4';
  c6:	84 e3       	ldi	r24, 0x34	; 52
		}
	//test row 3 on column 1
		if (!(ROW_INPUT & (1<< ROW_3_PIN)))
  c8:	32 9b       	sbis	0x06, 2	; 6
			{
				//there is 0 on RC31 pin => key 7 is pressed
				retval = '7';
  ca:	87 e3       	ldi	r24, 0x37	; 55
			}
	//test row 4 column 1
		if (!(ROW_INPUT & (1<< ROW_4_PIN)))
  cc:	33 9b       	sbis	0x06, 3	; 6
			{
			//there is 0 on RC41 pin => key * is pressed
			retval = '*';
  ce:	8a e2       	ldi	r24, 0x2A	; 42

			}

	//--------- Set 101 on columns ------checking all rows using column 2
		COL_PORT &= ~(1<<COL_2_PIN);		//setting column 2 low
  d0:	2b 98       	cbi	0x05, 3	; 5
		COL_PORT |= ((1<<COL_1_PIN) | (1<<COL_3_PIN));
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	94 61       	ori	r25, 0x14	; 20
  d6:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	95 e0       	ldi	r25, 0x05	; 5
  da:	9a 95       	dec	r25
  dc:	f1 f7       	brne	.-4      	; 0xda <keypadGetKeyPressed+0x30>
  de:	00 00       	nop
		_delay_us(1);	//delay to allow values to propagate to rows

	//test row 1 column 2
			if (!(ROW_INPUT & (1<< ROW_1_PIN)))
  e0:	30 9b       	sbis	0x06, 0	; 6
			{
				//there is 0 on RC12 pin => key 2 is pressed
				retval = '2';
  e2:	82 e3       	ldi	r24, 0x32	; 50
			}

	//test row 2 column 2
			if (!(ROW_INPUT & (1<< ROW_2_PIN)))
  e4:	31 9b       	sbis	0x06, 1	; 6
			{
				//there is 0 on RC22 pin => key 5 is pressed
				retval = '5';
  e6:	85 e3       	ldi	r24, 0x35	; 53
				}

	//test row 3 column 2
		if (!(ROW_INPUT & (1<< ROW_3_PIN)))
  e8:	32 9b       	sbis	0x06, 2	; 6
			{
				//there is 0 on RC32 pin => key 8 is pressed
				retval = '8';
  ea:	88 e3       	ldi	r24, 0x38	; 56
			}
	//test row 4 column 2
		if (!(ROW_INPUT & (1<< ROW_4_PIN)))
  ec:	33 9b       	sbis	0x06, 3	; 6
			{
				//there is 0 on RC42 pin => key 0 is pressed
				retval = '0';
  ee:	80 e3       	ldi	r24, 0x30	; 48
			}


//------------ Set 110 on columns ----------checking all rows using column 3
			COL_PORT &= ~(1<<COL_3_PIN);
  f0:	2c 98       	cbi	0x05, 4	; 5
			COL_PORT |= ((1<<COL_1_PIN) | (1<<COL_2_PIN));
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	9c 60       	ori	r25, 0x0C	; 12
  f6:	95 b9       	out	0x05, r25	; 5
  f8:	95 e0       	ldi	r25, 0x05	; 5
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <keypadGetKeyPressed+0x50>
  fe:	00 00       	nop
		//delay to allow values to propagate to rows
			_delay_us(1);

		//test row 1 column 3
				if (!(ROW_INPUT & (1<< ROW_1_PIN)))
 100:	30 9b       	sbis	0x06, 0	; 6
				{
					//there is 0 on RC13 pin => key 2 is pressed
					retval = '3';
 102:	83 e3       	ldi	r24, 0x33	; 51
				}

		//test row 2 column 3
				if (!(ROW_INPUT & (1<< ROW_2_PIN)))
 104:	31 9b       	sbis	0x06, 1	; 6
				{
					//there is 0 on RC23 pin => key 5 is pressed
					retval = '6';
 106:	86 e3       	ldi	r24, 0x36	; 54
					}

		//test row 3 column 3
			if (!(ROW_INPUT & (1<< ROW_3_PIN)))
 108:	32 9b       	sbis	0x06, 2	; 6
				{
					//there is 0 on RC33 pin => key 8 is pressed
					retval = '9';
 10a:	89 e3       	ldi	r24, 0x39	; 57
				}
		//test row 4 column 3
			if (!(ROW_INPUT & (1<< ROW_4_PIN)))
 10c:	33 9b       	sbis	0x06, 3	; 6
				{
					//there is 0 on RC43 pin => key 0 is pressed
					retval = '#';
 10e:	83 e2       	ldi	r24, 0x23	; 35
				}
			COL_PORT &= ~((1<<COL_1_PIN) | (1<<COL_2_PIN) | (1<<COL_3_PIN));
 110:	95 b1       	in	r25, 0x05	; 5
 112:	93 7e       	andi	r25, 0xE3	; 227
 114:	95 b9       	out	0x05, r25	; 5
	return retval;
}
 116:	08 95       	ret

	//test row 1 on column 1
	if (!(ROW_INPUT & (1<< ROW_1_PIN)))	//if(NOT(PINC & (1<<0)))->anded value with PINC is not 1 then it must be pressed
	{
		//there is 0 on RC11 pin => key 1 is pressed
		retval = '1';
 118:	81 e3       	ldi	r24, 0x31	; 49
 11a:	d4 cf       	rjmp	.-88     	; 0xc4 <keypadGetKeyPressed+0x1a>

0000011c <lcdInit>:
#include "lcd.h"

void lcdInit(void)		// Setting input and output ports only
{
	//LCD_DATA_DIR = 0xFF; // Setting Port D as output
	SR595Init();
 11c:	0e 94 3e 01 	call	0x27c	; 0x27c <SR595Init>
	LCD_CONTROL_DIR |= (1<<E_PIN); // E pin high (1<<4 or 0b0001 0000) (A4 on arduino uc chip)
 120:	3c 9a       	sbi	0x07, 4	; 7
	LCD_CONTROL_DIR |= (1<<RS_PIN); //RS pin high (1<<5 or 0b0010 0000)	(A5 on arduino uc chip)
 122:	3d 9a       	sbi	0x07, 5	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <lcdInit+0xe>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcdInit+0x18>
 134:	00 00       	nop
 136:	08 95       	ret

00000138 <lcdWriteCommand>:
}

void lcdWriteCommand(uint8_t command)		// Turning on LCD with cursor (0x0F) or without cursor (0x0C)

  {
    LCD_CONTROL_PORT &= ~(1<<RS_PIN);   //RS is 0b0000 0000 (low)
 138:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	95 e0       	ldi	r25, 0x05	; 5
 13c:	9a 95       	dec	r25
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdWriteCommand+0x4>
 140:	00 00       	nop
      _delay_us(1);

      //LCD_DATA_PORT = command;   // (0x0F) user will give (hex code) command for output through port D on lcd

      SR595Send(command);
 142:	0e 94 48 01 	call	0x290	; 0x290 <SR595Send>
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcdWriteCommand+0x10>
 14c:	00 00       	nop
      _delay_us(1);

      LCD_CONTROL_PORT |= (1<<E_PIN);	// 	E is 0b0001 0000 setting high E pin(A4) if it is low otherwise ok
 14e:	44 9a       	sbi	0x08, 4	; 8
 150:	95 e0       	ldi	r25, 0x05	; 5
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <lcdWriteCommand+0x1a>
 156:	00 00       	nop
      _delay_us(1);
      LCD_CONTROL_PORT &= ~(1<<E_PIN); // E is 0b0000 0000 setting low
 158:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e3       	ldi	r24, 0x3F	; 63
 15c:	9f e1       	ldi	r25, 0x1F	; 31
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcdWriteCommand+0x26>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcdWriteCommand+0x2c>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <lcdWriteChar>:
      _delay_ms(2);			// if hex code is 0x0F this will turn on lcd with blinking cursor.
  }

	void lcdWriteChar(char letter)		// This function will display character
  {
      LCD_CONTROL_PORT |= (1<<RS_PIN);   //RS is 0b0010 0000  (high)
 168:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	95 e0       	ldi	r25, 0x05	; 5
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcdWriteChar+0x4>
 170:	00 00       	nop
      _delay_us(1);

      SR595Send(letter);
 172:	0e 94 48 01 	call	0x290	; 0x290 <SR595Send>
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcdWriteChar+0x10>
 17c:	00 00       	nop
     // LCD_DATA_PORT = letter   //command for entering suitable ASCII equivalent hex code or alphabet directly (eg; ASCII A,B,C is 0x41, 0x42, 0x43 in hex)
      _delay_us(1);

      LCD_CONTROL_PORT |= (1<<E_PIN);    //E high
 17e:	44 9a       	sbi	0x08, 4	; 8
 180:	95 e0       	ldi	r25, 0x05	; 5
 182:	9a 95       	dec	r25
 184:	f1 f7       	brne	.-4      	; 0x182 <lcdWriteChar+0x1a>
 186:	00 00       	nop
      _delay_us(1);
      LCD_CONTROL_PORT &= ~(1<<E_PIN);		// E low
 188:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9f e1       	ldi	r25, 0x1F	; 31
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcdWriteChar+0x26>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcdWriteChar+0x2c>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <lcdWriteString>:
      _delay_ms(2);
  }										// This will display character

void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
	uint8_t i=0;

	while (str[i] !='\0') {
 1a0:	88 81       	ld	r24, Y
 1a2:	88 23       	and	r24, r24
 1a4:	51 f0       	breq	.+20     	; 0x1ba <lcdWriteString+0x22>
  }										// This will display character

void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
	uint8_t i=0;
 1a6:	10 e0       	ldi	r17, 0x00	; 0

	while (str[i] !='\0') {
		lcdWriteChar (str[i]);// print string
 1a8:	0e 94 b4 00 	call	0x168	; 0x168 <lcdWriteChar>
		i++;
 1ac:	1f 5f       	subi	r17, 0xFF	; 255
void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
	uint8_t i=0;

	while (str[i] !='\0') {
 1ae:	fe 01       	movw	r30, r28
 1b0:	e1 0f       	add	r30, r17
 1b2:	f1 1d       	adc	r31, r1
 1b4:	80 81       	ld	r24, Z
 1b6:	81 11       	cpse	r24, r1
 1b8:	f7 cf       	rjmp	.-18     	; 0x1a8 <lcdWriteString+0x10>
		lcdWriteChar (str[i]);// print string
		i++;
	}
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	08 95       	ret

000001c2 <main>:
#include <avr/sleep.h>

int main (void)
{
static char keypressed, oldkeypressed=0;			//initializing variables
lcdInit();									//initializing LCD
 1c2:	0e 94 8e 00 	call	0x11c	; 0x11c <lcdInit>
keypadSetupPins();							// calling function to setup pins and i/o registers
 1c6:	0e 94 48 00 	call	0x90	; 0x90 <keypadSetupPins>
lcdWriteCommand(DISPLAY_ON|BLINK|UNDERLINE);
 1ca:	8f e0       	ldi	r24, 0x0F	; 15
 1cc:	0e 94 9c 00 	call	0x138	; 0x138 <lcdWriteCommand>
lcdWriteCommand(CLEAR_DISPLAY);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 9c 00 	call	0x138	; 0x138 <lcdWriteCommand>

//Enable PCINT1 interrupt
PCICR |= (1<<PCIE1);
 1d6:	80 91 68 00 	lds	r24, 0x0068
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 93 68 00 	sts	0x0068, r24

//Enable specific pins to generate	PCINT1
PCMSK1 |= ((1<<PCINT8)	| (1<<PCINT9) | (1<<PCINT10) | (1<<PCINT11));
 1e0:	80 91 6c 00 	lds	r24, 0x006C
 1e4:	8f 60       	ori	r24, 0x0F	; 15
 1e6:	80 93 6c 00 	sts	0x006C, r24

sei();   //telling CPU to allow interrupt request IRQ
 1ea:	78 94       	sei
 1ec:	17 c0       	rjmp	.+46     	; 0x21c <main+0x5a>
keypressed = keypadGetKeyPressed();		//twiddling the cols
	sei();		//re-enable interrupts

	PCIFR |= (1<<PCIF1);	// manually clear int flag

if (keypressed != 0 && (keypressed != oldkeypressed))
 1ee:	90 91 00 01 	lds	r25, 0x0100
 1f2:	89 17       	cp	r24, r25
 1f4:	41 f0       	breq	.+16     	; 0x206 <main+0x44>
{
//condition for key-press if it is not 0 anded with oldkeypress give output as per function.

 if (keypressed == '*')
 1f6:	8a 32       	cpi	r24, 0x2A	; 42
 1f8:	59 f1       	breq	.+86     	; 0x250 <main+0x8e>
	 lcdWriteCommand(CURSOR_SHIFT_LEFT);
	 lcdWriteChar(' ');
	 lcdWriteCommand(CURSOR_SHIFT_LEFT);
 	 }

 	 else if (keypressed == '#')
 1fa:	83 32       	cpi	r24, 0x23	; 35
 1fc:	19 f1       	breq	.+70     	; 0x244 <main+0x82>
	{
	 lcdWriteCommand(CLEAR_DISPLAY);
	}

	 else lcdWriteChar(keypressed);
 1fe:	0e 94 b4 00 	call	0x168	; 0x168 <lcdWriteChar>
 202:	80 91 01 01 	lds	r24, 0x0101
	}

 	 oldkeypressed=keypressed;
 206:	80 93 00 01 	sts	0x0100, r24
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	89 ef       	ldi	r24, 0xF9	; 249
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0x4e>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x58>
 21a:	00 00       	nop

sei();   //telling CPU to allow interrupt request IRQ

while(1)
{
	sleep_mode(); 		//code stops here CPU freeze
 21c:	83 b7       	in	r24, 0x33	; 51
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	83 bf       	out	0x33, r24	; 51
 222:	88 95       	sleep
 224:	83 b7       	in	r24, 0x33	; 51
 226:	8e 7f       	andi	r24, 0xFE	; 254
 228:	83 bf       	out	0x33, r24	; 51
	cli();				//globally disable interrupt - ignore int for now
 22a:	f8 94       	cli
keypressed = keypadGetKeyPressed();		//twiddling the cols
 22c:	0e 94 55 00 	call	0xaa	; 0xaa <keypadGetKeyPressed>
 230:	80 93 01 01 	sts	0x0101, r24
	sei();		//re-enable interrupts
 234:	78 94       	sei

	PCIFR |= (1<<PCIF1);	// manually clear int flag
 236:	d9 9a       	sbi	0x1b, 1	; 27

if (keypressed != 0 && (keypressed != oldkeypressed))
 238:	80 91 01 01 	lds	r24, 0x0101
 23c:	81 11       	cpse	r24, r1
 23e:	d7 cf       	rjmp	.-82     	; 0x1ee <main+0x2c>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	e1 cf       	rjmp	.-62     	; 0x206 <main+0x44>
	 lcdWriteCommand(CURSOR_SHIFT_LEFT);
 	 }

 	 else if (keypressed == '#')
	{
	 lcdWriteCommand(CLEAR_DISPLAY);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 9c 00 	call	0x138	; 0x138 <lcdWriteCommand>
 24a:	80 91 01 01 	lds	r24, 0x0101
 24e:	db cf       	rjmp	.-74     	; 0x206 <main+0x44>
{
//condition for key-press if it is not 0 anded with oldkeypress give output as per function.

 if (keypressed == '*')
{
	 lcdWriteCommand(CURSOR_SHIFT_LEFT);
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	0e 94 9c 00 	call	0x138	; 0x138 <lcdWriteCommand>
	 lcdWriteChar(' ');
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	0e 94 b4 00 	call	0x168	; 0x168 <lcdWriteChar>
	 lcdWriteCommand(CURSOR_SHIFT_LEFT);
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	0e 94 9c 00 	call	0x138	; 0x138 <lcdWriteCommand>
 262:	80 91 01 01 	lds	r24, 0x0101
 266:	cf cf       	rjmp	.-98     	; 0x206 <main+0x44>

00000268 <__vector_4>:
 	 _delay_ms(20);
	}
}

ISR(PCINT1_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
//wake up cpu
}
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <SR595Init>:
#include <util/delay.h>
#include "sr595.h"

void SR595Init()
{
	SR_DATA_DIR |= ((1<<latchPin)|(1<<clockPin)|(1<<dataPin));
 27c:	8a b1       	in	r24, 0x0a	; 10
 27e:	80 67       	ori	r24, 0x70	; 112
 280:	8a b9       	out	0x0a, r24	; 10
 282:	08 95       	ret

00000284 <SR595Latch>:
}
void SR595Latch()
{
	SR_DATA_PORT |=(1<<latchPin);//HIGH
 284:	5d 9a       	sbi	0x0b, 5	; 11
	SR_DATA_PORT &=~(1<<latchPin);//LOW
 286:	5d 98       	cbi	0x0b, 5	; 11
 288:	08 95       	ret

0000028a <SR595Clock>:
}
void SR595Clock()
{
	 SR_DATA_PORT |=(1<<clockPin);//HIGH
 28a:	5e 9a       	sbi	0x0b, 6	; 11
	 SR_DATA_PORT &=~(1<<clockPin);//LOW
 28c:	5e 98       	cbi	0x0b, 6	; 11
 28e:	08 95       	ret

00000290 <SR595Send>:

}

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=~(1<<latchPin);
 290:	5d 98       	cbi	0x0b, 5	; 11
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	08 c0       	rjmp	.+16     	; 0x2aa <SR595Send+0x1a>
   for(uint8_t i=0;i<8;i++)
   {
      if (byteToSend & (1<<i))
      {

    	  SR_DATA_PORT|=(1<<dataPin);
 29a:	5c 9a       	sbi	0x0b, 4	; 11
	SR_DATA_PORT |=(1<<latchPin);//HIGH
	SR_DATA_PORT &=~(1<<latchPin);//LOW
}
void SR595Clock()
{
	 SR_DATA_PORT |=(1<<clockPin);//HIGH
 29c:	5e 9a       	sbi	0x0b, 6	; 11
	 SR_DATA_PORT &=~(1<<clockPin);//LOW
 29e:	5e 98       	cbi	0x0b, 6	; 11
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=~(1<<latchPin);

   for(uint8_t i=0;i<8;i++)
 2a4:	28 30       	cpi	r18, 0x08	; 8
 2a6:	31 05       	cpc	r19, r1
 2a8:	89 f0       	breq	.+34     	; 0x2cc <SR595Send+0x3c>
   {
      if (byteToSend & (1<<i))
 2aa:	ac 01       	movw	r20, r24
 2ac:	02 2e       	mov	r0, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <SR595Send+0x24>
 2b0:	55 95       	asr	r21
 2b2:	47 95       	ror	r20
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <SR595Send+0x20>
 2b8:	40 fd       	sbrc	r20, 0
 2ba:	ef cf       	rjmp	.-34     	; 0x29a <SR595Send+0xa>
    	  SR_DATA_PORT|=(1<<dataPin);
      }
      else
      {

    	  SR_DATA_PORT&=~(1<<dataPin);
 2bc:	5c 98       	cbi	0x0b, 4	; 11
	SR_DATA_PORT |=(1<<latchPin);//HIGH
	SR_DATA_PORT &=~(1<<latchPin);//LOW
}
void SR595Clock()
{
	 SR_DATA_PORT |=(1<<clockPin);//HIGH
 2be:	5e 9a       	sbi	0x0b, 6	; 11
	 SR_DATA_PORT &=~(1<<clockPin);//LOW
 2c0:	5e 98       	cbi	0x0b, 6	; 11
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255

void SR595Send(uint8_t byteToSend)
{
	SR_DATA_PORT &=~(1<<latchPin);

   for(uint8_t i=0;i<8;i++)
 2c6:	28 30       	cpi	r18, 0x08	; 8
 2c8:	31 05       	cpc	r19, r1
 2ca:	79 f7       	brne	.-34     	; 0x2aa <SR595Send+0x1a>
{
	SR_DATA_DIR |= ((1<<latchPin)|(1<<clockPin)|(1<<dataPin));
}
void SR595Latch()
{
	SR_DATA_PORT |=(1<<latchPin);//HIGH
 2cc:	5d 9a       	sbi	0x0b, 5	; 11
	SR_DATA_PORT &=~(1<<latchPin);//LOW
 2ce:	5d 98       	cbi	0x0b, 5	; 11
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
