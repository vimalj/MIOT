
CA_SCROLL_TEXT_lcd_using_benheader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000b1c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c25  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000027  00000000  00000000  00001981  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000019a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072e  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ca  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f5  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  8e:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcdInit>:
#include <util/delay.h>
#include "lcd.h"

void lcdInit(void)		// Setting input and output ports only
{
  DDRD = 0xFF; // Setting Port D as output
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10

  DDRC |= (1<<E_PIN); // E pin  (1<<4 or 0b0001 0000) (A4 on arduino uc chip) data direction using port C. 0 0r 1
  9a:	3c 9a       	sbi	0x07, 4	; 7
  DDRC |= (1<<RS_PIN); //RS pin	(1<<5 or 0b0010 0000)	(A5 on arduino uc chip)
  9c:	3d 9a       	sbi	0x07, 5	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	89 ef       	ldi	r24, 0xF9	; 249
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <lcdInit+0xe>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcdInit+0x18>
  ae:	00 00       	nop
  b0:	08 95       	ret

000000b2 <lcdWriteCommand>:
}

void lcdWriteCommand(uint8_t command)		// Turning on LCD with cursor (0x0F) or without cursor (0x0C)

  {
    PORTC &= ~(1<<RS_PIN);   //RS is 0b0000 0000 (set pin A5 0 or low)
  b2:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	95 e0       	ldi	r25, 0x05	; 5
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcdWriteCommand+0x4>
  ba:	00 00       	nop
      _delay_us(1);

      PORTD = command;   // (0x0F) user will give (hex code) command for output through port D on lcd
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcdWriteCommand+0xe>
  c4:	00 00       	nop
      _delay_us(1);

      PORTC |= (1<<E_PIN);	// 	E is 0b0001 0000 setting high E pin(A4) if it is low otherwise ok
  c6:	44 9a       	sbi	0x08, 4	; 8
  c8:	95 e0       	ldi	r25, 0x05	; 5
  ca:	9a 95       	dec	r25
  cc:	f1 f7       	brne	.-4      	; 0xca <lcdWriteCommand+0x18>
  ce:	00 00       	nop
      _delay_us(1);
      PORTC &= ~(1<<E_PIN); // E is 0b0000 0000 setting low
  d0:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	9f e1       	ldi	r25, 0x1F	; 31
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcdWriteCommand+0x24>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcdWriteCommand+0x2a>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <lcdWriteChar>:
      _delay_ms(2);			// if hex code is 0x0F this will turn on lcd with blinking cursor.
  }

	void lcdWriteChar(char letter)		// This function will display character
  {
      PORTC |= (1<<RS_PIN);   //RS is 0b0010 0000  high
  e0:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	95 e0       	ldi	r25, 0x05	; 5
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcdWriteChar+0x4>
  e8:	00 00       	nop
      _delay_us(1);

      PORTD = letter;   //command for entering suitable ASCII equivalent hex code or alphabet directly (eg; ASCII A,B,C is 0x41, 0x42, 0x43 in hex)
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <lcdWriteChar+0xe>
  f2:	00 00       	nop
      _delay_us(1);

      PORTC |= (1<<E_PIN);    //E high
  f4:	44 9a       	sbi	0x08, 4	; 8
  f6:	95 e0       	ldi	r25, 0x05	; 5
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcdWriteChar+0x18>
  fc:	00 00       	nop
      _delay_us(1);
      PORTC &= ~(1<<E_PIN);		// E low
  fe:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcdWriteChar+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcdWriteChar+0x2a>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <lcdWriteString>:
      _delay_ms(2);
  }										// This will display character

void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	uint8_t i=0;

	while (str[i] !='\0') {
 116:	88 81       	ld	r24, Y
 118:	88 23       	and	r24, r24
 11a:	51 f0       	breq	.+20     	; 0x130 <lcdWriteString+0x22>
  }										// This will display character

void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
	uint8_t i=0;
 11c:	10 e0       	ldi	r17, 0x00	; 0

	while (str[i] !='\0') {
		lcdWriteChar (str[i]);// print string
 11e:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdWriteChar>
		i++;
 122:	1f 5f       	subi	r17, 0xFF	; 255
void lcdWriteString (char str[]) 	// similarly this function can display character string by creating an array

{
	uint8_t i=0;

	while (str[i] !='\0') {
 124:	fe 01       	movw	r30, r28
 126:	e1 0f       	add	r30, r17
 128:	f1 1d       	adc	r31, r1
 12a:	80 81       	ld	r24, Z
 12c:	81 11       	cpse	r24, r1
 12e:	f7 cf       	rjmp	.-18     	; 0x11e <lcdWriteString+0x10>
		lcdWriteChar (str[i]);// print string
		i++;
	}
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	08 95       	ret

00000138 <main>:
void lcdWriteCommand(uint8_t command);
//void lcdWriteChar(char letter);   not in use

int main (void)
  {
	 lcdInit();
 138:	0e 94 4b 00 	call	0x96	; 0x96 <lcdInit>
	 lcdWriteCommand(DISPLAY_ON);		// 0x0C		while RS is 0 and then write 0x0C then toggle once E high then low
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
	 lcdWriteCommand(CLEAR_DISPLAY);	// 0x01 	while RS is 0 and then 0x01 is entered the again E pin high and low
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>

	 lcdWriteString ("*VIMAL*");		// While RS=1 write this string character as per ASCII-HEX values and E=1 and E=0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 87 00 	call	0x10e	; 0x10e <lcdWriteString>
	 lcdWriteCommand(TWO_LINE_MODE);	//0x38
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
	 lcdWriteCommand(SET_ADDRESS|0x40);	// moving cursor to writable/usable data address (DDR RAM)
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
	 lcdWriteString ("*JASWAL*");		//While RS=1 write this string character as per ASCII-HEX values and E=1 and E=0
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 87 00 	call	0x10e	; 0x10e <lcdWriteString>

	 while(1)
	  {
	    for( int m=0; m<8; m++)
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	c8 30       	cpi	r28, 0x08	; 8
 16a:	d1 05       	cpc	r29, r1
 16c:	b4 f0       	brlt	.+44     	; 0x19a <main+0x62>
 16e:	c8 e0       	ldi	r28, 0x08	; 8
 170:	d0 e0       	ldi	r29, 0x00	; 0
	    _delay_ms(250);
	    }

	    for (int k=8; k>0; k--)
	    {
	    lcdWriteCommand(DISPLAY_SHIFT_LEFT);	//while RS is 0 and then write 0x18 then toggle once E high then low
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	84 e3       	ldi	r24, 0x34	; 52
 17c:	9c e0       	ldi	r25, 0x0C	; 12
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x46>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x50>
 188:	00 00       	nop
 18a:	21 97       	sbiw	r28, 0x01	; 1
	    {
	    lcdWriteCommand(DISPLAY_SHIFT_RIGHT);	//while RS is 0 and then write 0x1C then toggle once E high then low
	    _delay_ms(250);
	    }

	    for (int k=8; k>0; k--)
 18c:	20 97       	sbiw	r28, 0x00	; 0
 18e:	89 f7       	brne	.-30     	; 0x172 <main+0x3a>
	 lcdWriteCommand(SET_ADDRESS|0x40);	// moving cursor to writable/usable data address (DDR RAM)
	 lcdWriteString ("*JASWAL*");		//While RS=1 write this string character as per ASCII-HEX values and E=1 and E=0

	 while(1)
	  {
	    for( int m=0; m<8; m++)
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	c8 30       	cpi	r28, 0x08	; 8
 196:	d1 05       	cpc	r29, r1
 198:	54 f7       	brge	.-44     	; 0x16e <main+0x36>
	    {
	    lcdWriteCommand(DISPLAY_SHIFT_RIGHT);	//while RS is 0 and then write 0x1C then toggle once E high then low
 19a:	8c e1       	ldi	r24, 0x1C	; 28
 19c:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdWriteCommand>
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	84 e3       	ldi	r24, 0x34	; 52
 1a4:	9c e0       	ldi	r25, 0x0C	; 12
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x6e>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x78>
 1b0:	00 00       	nop
	 lcdWriteCommand(SET_ADDRESS|0x40);	// moving cursor to writable/usable data address (DDR RAM)
	 lcdWriteString ("*JASWAL*");		//While RS=1 write this string character as per ASCII-HEX values and E=1 and E=0

	 while(1)
	  {
	    for( int m=0; m<8; m++)
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	d9 cf       	rjmp	.-78     	; 0x168 <main+0x30>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
