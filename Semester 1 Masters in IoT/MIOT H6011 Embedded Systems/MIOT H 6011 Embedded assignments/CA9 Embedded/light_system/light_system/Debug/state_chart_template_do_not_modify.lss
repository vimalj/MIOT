
state_chart_template_do_not_modify.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000006a8  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000139  00800100  00800100  0000073c  2**0
                  ALLOC
  3 .stab         0000159c  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b3c  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00003840  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000072e  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005ca  00000000  00000000  00003fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000f2  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  0000466a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 33       	cpi	r26, 0x39	; 57
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 30 03 	call	0x660	; 0x660 <main>
  88:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <state_chart_init>:
static void state_chart_clearInEvents(State_chart* handle);
static void state_chart_clearOutEvents(State_chart* handle);


void state_chart_init(State_chart* handle)
{
  90:	fc 01       	movw	r30, r24
		sc_integer i;
	
		for (i = 0; i < STATE_CHART_MAX_ORTHOGONAL_STATES; ++i)
		{
			handle->stateConfVector[i] = State_chart_last_state;
  92:	10 82       	st	Z, r1
		}
		
		
		handle->stateConfVectorPosition = 0;
  94:	12 82       	std	Z+2, r1	; 0x02
  96:	11 82       	std	Z+1, r1	; 0x01
   return bool_false;
}

static void state_chart_clearInEvents(State_chart* handle)
{
	handle->timeEvents.state_chart_main_region_Off_tev0_raised = bool_false;
  98:	13 82       	std	Z+3, r1	; 0x03
	handle->timeEvents.state_chart_main_region_On_tev0_raised = bool_false;
  9a:	14 82       	std	Z+4, r1	; 0x04
  9c:	08 95       	ret

0000009e <state_chart_enter>:
		state_chart_clearOutEvents(handle);
	
}

void state_chart_enter(State_chart* handle)
{
  9e:	0f 93       	push	r16
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	ec 01       	movw	r28, r24

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Off_tev0_raised) , 500, bool_false);
  a6:	bc 01       	movw	r22, r24
  a8:	6d 5f       	subi	r22, 0xFD	; 253
  aa:	7f 4f       	sbci	r23, 0xFF	; 255
  ac:	00 e0       	ldi	r16, 0x00	; 0
  ae:	24 ef       	ldi	r18, 0xF4	; 244
  b0:	31 e0       	ldi	r19, 0x01	; 1
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <state_chart_setTimer>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Off;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	19 82       	std	Y+1, r1	; 0x01

void state_chart_enter(State_chart* handle)
{
	/* Default enter sequence for statechart state_chart */
	state_chart_enseq_main_region_default(handle);
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	0f 91       	pop	r16
  c8:	08 95       	ret

000000ca <state_chart_exit>:
/* Default exit sequence for region main region */
static void state_chart_exseq_main_region(State_chart* handle)
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of state_chart.main_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
  ca:	fc 01       	movw	r30, r24
  cc:	20 81       	ld	r18, Z
  ce:	21 30       	cpi	r18, 0x01	; 1
  d0:	61 f0       	breq	.+24     	; 0xea <state_chart_exit+0x20>
  d2:	22 30       	cpi	r18, 0x02	; 2
  d4:	49 f4       	brne	.+18     	; 0xe8 <state_chart_exit+0x1e>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
  d6:	fc 01       	movw	r30, r24
  d8:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
  da:	12 82       	std	Z+2, r1	; 0x02
  dc:	11 82       	std	Z+1, r1	; 0x01

/* Exit action for state 'On'. */
static void state_chart_exact_main_region_On(State_chart* handle)
{
	/* Exit action for state 'On'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_On_tev0_raised) );		
  de:	bc 01       	movw	r22, r24
  e0:	6c 5f       	subi	r22, 0xFC	; 252
  e2:	7f 4f       	sbci	r23, 0xFF	; 255
  e4:	0c 94 ca 02 	jmp	0x594	; 0x594 <state_chart_unsetTimer>
  e8:	08 95       	ret

/* Default exit sequence for state Off */
static void state_chart_exseq_main_region_Off(State_chart* handle)
{
	/* Default exit sequence for state Off */
	handle->stateConfVector[0] = State_chart_last_state;
  ea:	fc 01       	movw	r30, r24
  ec:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
  ee:	12 82       	std	Z+2, r1	; 0x02
  f0:	11 82       	std	Z+1, r1	; 0x01

/* Exit action for state 'Off'. */
static void state_chart_exact_main_region_Off(State_chart* handle)
{
	/* Exit action for state 'Off'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Off_tev0_raised) );		
  f2:	bc 01       	movw	r22, r24
  f4:	6d 5f       	subi	r22, 0xFD	; 253
  f6:	7f 4f       	sbci	r23, 0xFF	; 255
  f8:	0c 94 ca 02 	jmp	0x594	; 0x594 <state_chart_unsetTimer>

000000fc <state_chart_isActive>:
	/* Default exit sequence for statechart state_chart */
	state_chart_exseq_main_region(handle);
}

sc_boolean state_chart_isActive(const State_chart* handle)
{
  fc:	fc 01       	movw	r30, r24
	sc_boolean result = bool_false;
	int i;
	
	for(i = 0; i < STATE_CHART_MAX_ORTHOGONAL_STATES; i++)
	{
		result = result || handle->stateConfVector[i] != State_chart_last_state;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 81       	ld	r25, Z
 102:	91 11       	cpse	r25, r1
 104:	01 c0       	rjmp	.+2      	; 0x108 <state_chart_isActive+0xc>
 106:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return result;
}
 108:	08 95       	ret

0000010a <state_chart_isFinal>:
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean state_chart_isFinal(const State_chart* handle)
{
   return bool_false;
}
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	08 95       	ret

0000010e <state_chart_runCycle>:
static void state_chart_clearOutEvents(State_chart* handle)
{
}

void state_chart_runCycle(State_chart* handle)
{
 10e:	0f 93       	push	r16
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
 116:	1a 82       	std	Y+2, r1	; 0x02
 118:	19 82       	std	Y+1, r1	; 0x01
 11a:	28 81       	ld	r18, Y
 11c:	0c c0       	rjmp	.+24     	; 0x136 <state_chart_runCycle+0x28>
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
 11e:	22 30       	cpi	r18, 0x02	; 2
 120:	19 f4       	brne	.+6      	; 0x128 <state_chart_runCycle+0x1a>

/* The reactions of state On. */
static void state_chart_react_main_region_On(State_chart* handle)
{
	/* The reactions of state On. */
	if (state_chart_check_main_region_On_tr0_tr0(handle) == bool_true)
 122:	8c 81       	ldd	r24, Y+4	; 0x04
 124:	81 11       	cpse	r24, r1
 126:	30 c0       	rjmp	.+96     	; 0x188 <state_chart_runCycle+0x7a>
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	01 96       	adiw	r24, 0x01	; 1
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01

void state_chart_runCycle(State_chart* handle)
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
 132:	89 2b       	or	r24, r25
 134:	19 f5       	brne	.+70     	; 0x17c <state_chart_runCycle+0x6e>
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
 136:	21 30       	cpi	r18, 0x01	; 1
 138:	91 f7       	brne	.-28     	; 0x11e <state_chart_runCycle+0x10>

/* The reactions of state Off. */
static void state_chart_react_main_region_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Off_tr0_tr0(handle) == bool_true)
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	88 23       	and	r24, r24
 13e:	a1 f3       	breq	.-24     	; 0x128 <state_chart_runCycle+0x1a>

/* Default exit sequence for state Off */
static void state_chart_exseq_main_region_Off(State_chart* handle)
{
	/* Default exit sequence for state Off */
	handle->stateConfVector[0] = State_chart_last_state;
 140:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Off'. */
static void state_chart_exact_main_region_Off(State_chart* handle)
{
	/* Exit action for state 'Off'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Off_tev0_raised) );		
 146:	be 01       	movw	r22, r28
 148:	6d 5f       	subi	r22, 0xFD	; 253
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 ca 02 	call	0x594	; 0x594 <state_chart_unsetTimer>
}

static void state_chart_effect_main_region_Off_tr0(State_chart* handle)
{
	state_chart_exseq_main_region_Off(handle);
	state_chartIface_setLight(handle, bool_true);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	ce 01       	movw	r24, r28
 156:	0e 94 4c 03 	call	0x698	; 0x698 <state_chartIface_setLight>

/* Entry action for state 'On'. */
static void state_chart_enact_main_region_On(State_chart* handle)
{
	/* Entry action for state 'On'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_On_tev0_raised) , 1 * 1000, bool_false);
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	28 ee       	ldi	r18, 0xE8	; 232
 15e:	33 e0       	ldi	r19, 0x03	; 3
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	be 01       	movw	r22, r28
 166:	6c 5f       	subi	r22, 0xFC	; 252
 168:	7f 4f       	sbci	r23, 0xFF	; 255
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <state_chart_setTimer>
/* 'default' enter sequence for state On */
static void state_chart_enseq_main_region_On_default(State_chart* handle)
{
	/* 'default' enter sequence for state On */
	state_chart_enact_main_region_On(handle);
	handle->stateConfVector[0] = State_chart_main_region_On;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	88 83       	st	Y, r24
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
   return bool_false;
}

static void state_chart_clearInEvents(State_chart* handle)
{
	handle->timeEvents.state_chart_main_region_Off_tev0_raised = bool_false;
 17c:	1b 82       	std	Y+3, r1	; 0x03
	handle->timeEvents.state_chart_main_region_On_tev0_raised = bool_false;
 17e:	1c 82       	std	Y+4, r1	; 0x04
			break;
		}
	}
	
	state_chart_clearInEvents(handle);
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	0f 91       	pop	r16
 186:	08 95       	ret

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
 188:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 18a:	1a 82       	std	Y+2, r1	; 0x02
 18c:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'On'. */
static void state_chart_exact_main_region_On(State_chart* handle)
{
	/* Exit action for state 'On'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_On_tev0_raised) );		
 18e:	be 01       	movw	r22, r28
 190:	6c 5f       	subi	r22, 0xFC	; 252
 192:	7f 4f       	sbci	r23, 0xFF	; 255
 194:	ce 01       	movw	r24, r28
 196:	0e 94 ca 02 	call	0x594	; 0x594 <state_chart_unsetTimer>
}

static void state_chart_effect_main_region_On_tr0(State_chart* handle)
{
	state_chart_exseq_main_region_On(handle);
	state_chartIface_setLight(handle, bool_false);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 4c 03 	call	0x698	; 0x698 <state_chartIface_setLight>

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Off_tev0_raised) , 500, bool_false);
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	24 ef       	ldi	r18, 0xF4	; 244
 1a6:	31 e0       	ldi	r19, 0x01	; 1
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	be 01       	movw	r22, r28
 1ae:	6d 5f       	subi	r22, 0xFD	; 253
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	ce 01       	movw	r24, r28
 1b4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <state_chart_setTimer>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Off;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	88 83       	st	Y, r24
 1bc:	db cf       	rjmp	.-74     	; 0x174 <state_chart_runCycle+0x66>

000001be <state_chart_raiseTimeEvent>:
	state_chart_clearInEvents(handle);
}

void state_chart_raiseTimeEvent(const State_chart* handle, sc_eventid evid)
{
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
 1be:	9c 01       	movw	r18, r24
 1c0:	2d 5f       	subi	r18, 0xFD	; 253
 1c2:	3f 4f       	sbci	r19, 0xFF	; 255
 1c4:	62 17       	cp	r22, r18
 1c6:	73 07       	cpc	r23, r19
 1c8:	3c f0       	brlt	.+14     	; 0x1d8 <state_chart_raiseTimeEvent+0x1a>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + sizeof(State_chartTimeEvents))
 1ca:	05 96       	adiw	r24, 0x05	; 5
 1cc:	68 17       	cp	r22, r24
 1ce:	79 07       	cpc	r23, r25
 1d0:	18 f4       	brcc	.+6      	; 0x1d8 <state_chart_raiseTimeEvent+0x1a>
		{
		*(sc_boolean*)evid = bool_true;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	fb 01       	movw	r30, r22
 1d6:	80 83       	st	Z, r24
 1d8:	08 95       	ret

000001da <state_chart_isStateActive>:
	}		
}

sc_boolean state_chart_isStateActive(const State_chart* handle, State_chartStates state)
{
 1da:	fc 01       	movw	r30, r24
	sc_boolean result = bool_false;
	switch (state)
 1dc:	61 30       	cpi	r22, 0x01	; 1
 1de:	41 f0       	breq	.+16     	; 0x1f0 <state_chart_isStateActive+0x16>
 1e0:	62 30       	cpi	r22, 0x02	; 2
 1e2:	21 f4       	brne	.+8      	; 0x1ec <state_chart_isStateActive+0x12>
		case State_chart_main_region_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_OFF] == State_chart_main_region_Off
			);
			break;
		case State_chart_main_region_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_ON] == State_chart_main_region_On
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 81       	ld	r25, Z
 1e8:	92 30       	cpi	r25, 0x02	; 2
 1ea:	09 f0       	breq	.+2      	; 0x1ee <state_chart_isStateActive+0x14>
			);
			break;
		default:
			result = bool_false;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return result;
}
 1ee:	08 95       	ret
{
	sc_boolean result = bool_false;
	switch (state)
	{
		case State_chart_main_region_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_OFF] == State_chart_main_region_Off
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 81       	ld	r25, Z
 1f4:	91 30       	cpi	r25, 0x01	; 1
 1f6:	d9 f3       	breq	.-10     	; 0x1ee <state_chart_isStateActive+0x14>
		case State_chart_main_region_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_ON] == State_chart_main_region_On
			);
			break;
		default:
			result = bool_false;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	f9 cf       	rjmp	.-14     	; 0x1ee <state_chart_isStateActive+0x14>

000001fc <sc_timer_start>:



/*! Starts a timer with the specified parameters. */
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {
 1fc:	6f 92       	push	r6
 1fe:	7f 92       	push	r7
 200:	8f 92       	push	r8
 202:	9f 92       	push	r9
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	cf 92       	push	r12
 20a:	df 92       	push	r13
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	ce 2d       	mov	r28, r14


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 218:	dc 01       	movw	r26, r24
 21a:	8d 90       	ld	r8, X+
 21c:	9d 90       	ld	r9, X+
 21e:	ad 90       	ld	r10, X+
 220:	bc 90       	ld	r11, X
 222:	13 97       	sbiw	r26, 0x03	; 3
 224:	18 14       	cp	r1, r8
 226:	19 04       	cpc	r1, r9
 228:	1a 04       	cpc	r1, r10
 22a:	1b 04       	cpc	r1, r11
 22c:	1c f5       	brge	.+70     	; 0x274 <sc_timer_start+0x78>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {
 22e:	14 96       	adiw	r26, 0x04	; 4
 230:	ed 91       	ld	r30, X+
 232:	fc 91       	ld	r31, X
 234:	15 97       	sbiw	r26, 0x05	; 5
 236:	a1 85       	ldd	r26, Z+9	; 0x09
 238:	b2 85       	ldd	r27, Z+10	; 0x0a
 23a:	ab 2b       	or	r26, r27
 23c:	49 f1       	breq	.+82     	; 0x290 <sc_timer_start+0x94>
 23e:	3f 01       	movw	r6, r30
 240:	bf e0       	ldi	r27, 0x0F	; 15
 242:	6b 0e       	add	r6, r27
 244:	71 1c       	adc	r7, r1
 246:	c1 2c       	mov	r12, r1
 248:	d1 2c       	mov	r13, r1
 24a:	76 01       	movw	r14, r12
 24c:	c3 94       	inc	r12
 24e:	0d c0       	rjmp	.+26     	; 0x26a <sc_timer_start+0x6e>
 250:	f3 01       	movw	r30, r6
 252:	bf ef       	ldi	r27, 0xFF	; 255
 254:	cb 1a       	sub	r12, r27
 256:	db 0a       	sbc	r13, r27
 258:	eb 0a       	sbc	r14, r27
 25a:	fb 0a       	sbc	r15, r27
 25c:	af e0       	ldi	r26, 0x0F	; 15
 25e:	6a 0e       	add	r6, r26
 260:	71 1c       	adc	r7, r1
 262:	a1 85       	ldd	r26, Z+9	; 0x09
 264:	b2 85       	ldd	r27, Z+10	; 0x0a
 266:	ab 2b       	or	r26, r27
 268:	99 f0       	breq	.+38     	; 0x290 <sc_timer_start+0x94>
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 26a:	c8 14       	cp	r12, r8
 26c:	d9 04       	cpc	r13, r9
 26e:	ea 04       	cpc	r14, r10
 270:	fb 04       	cpc	r15, r11
 272:	71 f7       	brne	.-36     	; 0x250 <sc_timer_start+0x54>

			break;
		}
	}

}
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	bf 90       	pop	r11
 284:	af 90       	pop	r10
 286:	9f 90       	pop	r9
 288:	8f 90       	pop	r8
 28a:	7f 90       	pop	r7
 28c:	6f 90       	pop	r6
 28e:	08 95       	ret

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {

			/* set timer properties */
			this->timers[i].pt_evid = evid;
 290:	52 87       	std	Z+10, r21	; 0x0a
 292:	41 87       	std	Z+9, r20	; 0x09
			this->timers[i].time_ms = time_ms;
 294:	00 83       	st	Z, r16
 296:	11 83       	std	Z+1, r17	; 0x01
 298:	22 83       	std	Z+2, r18	; 0x02
 29a:	33 83       	std	Z+3, r19	; 0x03
			this->timers[i].periodic = periodic;
 29c:	c4 83       	std	Z+4, r28	; 0x04
			this->timers[i].handle = handle;
 29e:	74 87       	std	Z+12, r23	; 0x0c
 2a0:	63 87       	std	Z+11, r22	; 0x0b
			this->timers[i].service = this;
 2a2:	96 87       	std	Z+14, r25	; 0x0e
 2a4:	85 87       	std	Z+13, r24	; 0x0d

			// reset the elapsed time ...
			this->timers[i].elapsed_time_ms = 0;
 2a6:	15 82       	std	Z+5, r1	; 0x05
 2a8:	16 82       	std	Z+6, r1	; 0x06
 2aa:	17 82       	std	Z+7, r1	; 0x07
 2ac:	10 86       	std	Z+8, r1	; 0x08

			break;
 2ae:	e2 cf       	rjmp	.-60     	; 0x274 <sc_timer_start+0x78>

000002b0 <sc_timer_cancel>:

}


/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	8b 01       	movw	r16, r22

	int i;

	for (i = 0; i < this->timer_count; i++) {
 2ba:	dc 01       	movw	r26, r24
 2bc:	4d 91       	ld	r20, X+
 2be:	5d 91       	ld	r21, X+
 2c0:	6d 91       	ld	r22, X+
 2c2:	7c 91       	ld	r23, X
 2c4:	13 97       	sbiw	r26, 0x03	; 3
 2c6:	14 16       	cp	r1, r20
 2c8:	15 06       	cpc	r1, r21
 2ca:	16 06       	cpc	r1, r22
 2cc:	17 06       	cpc	r1, r23
 2ce:	0c f5       	brge	.+66     	; 0x312 <sc_timer_cancel+0x62>
		if (this->timers[i].pt_evid == evid) {
 2d0:	14 96       	adiw	r26, 0x04	; 4
 2d2:	ed 91       	ld	r30, X+
 2d4:	fc 91       	ld	r31, X
 2d6:	15 97       	sbiw	r26, 0x05	; 5
 2d8:	81 85       	ldd	r24, Z+9	; 0x09
 2da:	92 85       	ldd	r25, Z+10	; 0x0a
 2dc:	80 17       	cp	r24, r16
 2de:	91 07       	cpc	r25, r17
 2e0:	e9 f0       	breq	.+58     	; 0x31c <sc_timer_cancel+0x6c>
 2e2:	9f 01       	movw	r18, r30
 2e4:	21 5f       	subi	r18, 0xF1	; 241
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	a0 e0       	ldi	r26, 0x00	; 0
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	0b c0       	rjmp	.+22     	; 0x308 <sc_timer_cancel+0x58>
 2f2:	f9 01       	movw	r30, r18
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	a1 1d       	adc	r26, r1
 2f8:	b1 1d       	adc	r27, r1
 2fa:	21 5f       	subi	r18, 0xF1	; 241
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
 2fe:	c1 85       	ldd	r28, Z+9	; 0x09
 300:	d2 85       	ldd	r29, Z+10	; 0x0a
 302:	c0 17       	cp	r28, r16
 304:	d1 07       	cpc	r29, r17
 306:	51 f0       	breq	.+20     	; 0x31c <sc_timer_cancel+0x6c>
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
 308:	84 17       	cp	r24, r20
 30a:	95 07       	cpc	r25, r21
 30c:	a6 07       	cpc	r26, r22
 30e:	b7 07       	cpc	r27, r23
 310:	81 f7       	brne	.-32     	; 0x2f2 <sc_timer_cancel+0x42>
			this->timers[i].handle = NULL;

			break;
		}
	}
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret
	int i;

	for (i = 0; i < this->timer_count; i++) {
		if (this->timers[i].pt_evid == evid) {

			this->timers[i].pt_evid = NULL;
 31c:	12 86       	std	Z+10, r1	; 0x0a
 31e:	11 86       	std	Z+9, r1	; 0x09
			this->timers[i].handle = NULL;
 320:	14 86       	std	Z+12, r1	; 0x0c
 322:	13 86       	std	Z+11, r1	; 0x0b

			break;
		}
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <sc_timer_service_init>:

/*! Initializes a timer service with a set of timers. */
void sc_timer_service_init(sc_timer_service_t *tservice,
	sc_timer_t *timers,
	sc_integer count,
	sc_raise_time_event_fp raise_event) {
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	fc 01       	movw	r30, r24

	tservice->timers = timers;
 334:	75 83       	std	Z+5, r23	; 0x05
 336:	64 83       	std	Z+4, r22	; 0x04
	tservice->timer_count = count;
 338:	20 83       	st	Z, r18
 33a:	31 83       	std	Z+1, r19	; 0x01
 33c:	42 83       	std	Z+2, r20	; 0x02
 33e:	53 83       	std	Z+3, r21	; 0x03
	for (int i=0; i<count; i++) {
 340:	12 16       	cp	r1, r18
 342:	13 06       	cpc	r1, r19
 344:	14 06       	cpc	r1, r20
 346:	15 06       	cpc	r1, r21
 348:	4c f4       	brge	.+18     	; 0x35c <sc_timer_service_init+0x2e>
 34a:	db 01       	movw	r26, r22
 34c:	1a 96       	adiw	r26, 0x0a	; 10
 34e:	1c 92       	st	X, r1
 350:	1e 92       	st	-X, r1
 352:	19 97       	sbiw	r26, 0x09	; 9
 354:	1e 96       	adiw	r26, 0x0e	; 14
 356:	9c 93       	st	X, r25
 358:	8e 93       	st	-X, r24
 35a:	1d 97       	sbiw	r26, 0x0d	; 13
		tservice->timers->pt_evid = NULL;
		tservice->timers->service = tservice;
	}

	tservice->raise_event = raise_event;
 35c:	17 83       	std	Z+7, r17	; 0x07
 35e:	06 83       	std	Z+6, r16	; 0x06
}
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <sc_timer_service_proceed>:


void sc_timer_service_proceed(sc_timer_service_t *this, const sc_integer time_ms) {
 366:	2f 92       	push	r2
 368:	3f 92       	push	r3
 36a:	4f 92       	push	r4
 36c:	5f 92       	push	r5
 36e:	6f 92       	push	r6
 370:	7f 92       	push	r7
 372:	8f 92       	push	r8
 374:	9f 92       	push	r9
 376:	af 92       	push	r10
 378:	bf 92       	push	r11
 37a:	cf 92       	push	r12
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	28 97       	sbiw	r28, 0x08	; 8
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	1c 01       	movw	r2, r24
 39c:	49 83       	std	Y+1, r20	; 0x01
 39e:	5a 83       	std	Y+2, r21	; 0x02
 3a0:	6b 83       	std	Y+3, r22	; 0x03
 3a2:	7c 83       	std	Y+4, r23	; 0x04

	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 3a4:	fc 01       	movw	r30, r24
 3a6:	80 80       	ld	r8, Z
 3a8:	91 80       	ldd	r9, Z+1	; 0x01
 3aa:	a2 80       	ldd	r10, Z+2	; 0x02
 3ac:	b3 80       	ldd	r11, Z+3	; 0x03
 3ae:	18 14       	cp	r1, r8
 3b0:	19 04       	cpc	r1, r9
 3b2:	1a 04       	cpc	r1, r10
 3b4:	1b 04       	cpc	r1, r11
 3b6:	0c f0       	brlt	.+2      	; 0x3ba <sc_timer_service_proceed+0x54>
 3b8:	7a c0       	rjmp	.+244    	; 0x4ae <sc_timer_service_proceed+0x148>
 3ba:	c1 2c       	mov	r12, r1
 3bc:	d1 2c       	mov	r13, r1
 3be:	76 01       	movw	r14, r12
 3c0:	c3 94       	inc	r12
 3c2:	18 86       	std	Y+8, r1	; 0x08
 3c4:	1f 82       	std	Y+7, r1	; 0x07
 3c6:	84 81       	ldd	r24, Z+4	; 0x04
 3c8:	95 81       	ldd	r25, Z+5	; 0x05
 3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <sc_timer_service_proceed+0x8c>
 3cc:	b7 01       	movw	r22, r14
 3ce:	a6 01       	movw	r20, r12
 3d0:	2f 81       	ldd	r18, Y+7	; 0x07
 3d2:	38 85       	ldd	r19, Y+8	; 0x08
 3d4:	21 5f       	subi	r18, 0xF1	; 241
 3d6:	3f 4f       	sbci	r19, 0xFF	; 255
 3d8:	38 87       	std	Y+8, r19	; 0x08
 3da:	2f 83       	std	Y+7, r18	; 0x07
 3dc:	3f ef       	ldi	r19, 0xFF	; 255
 3de:	c3 1a       	sub	r12, r19
 3e0:	d3 0a       	sbc	r13, r19
 3e2:	e3 0a       	sbc	r14, r19
 3e4:	f3 0a       	sbc	r15, r19
 3e6:	48 15       	cp	r20, r8
 3e8:	59 05       	cpc	r21, r9
 3ea:	6a 05       	cpc	r22, r10
 3ec:	7b 05       	cpc	r23, r11
 3ee:	0c f0       	brlt	.+2      	; 0x3f2 <sc_timer_service_proceed+0x8c>
 3f0:	5e c0       	rjmp	.+188    	; 0x4ae <sc_timer_service_proceed+0x148>

		/* ... and process all used. */
		if (this->timers[i].pt_evid != NULL) {
 3f2:	af 81       	ldd	r26, Y+7	; 0x07
 3f4:	b8 85       	ldd	r27, Y+8	; 0x08
 3f6:	a8 0f       	add	r26, r24
 3f8:	b9 1f       	adc	r27, r25
 3fa:	19 96       	adiw	r26, 0x09	; 9
 3fc:	2d 91       	ld	r18, X+
 3fe:	3c 91       	ld	r19, X
 400:	1a 97       	sbiw	r26, 0x0a	; 10
 402:	3e 83       	std	Y+6, r19	; 0x06
 404:	2d 83       	std	Y+5, r18	; 0x05
 406:	23 2b       	or	r18, r19
 408:	09 f3       	breq	.-62     	; 0x3cc <sc_timer_service_proceed+0x66>

			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
 40a:	15 96       	adiw	r26, 0x05	; 5
 40c:	4d 90       	ld	r4, X+
 40e:	5d 90       	ld	r5, X+
 410:	6d 90       	ld	r6, X+
 412:	7c 90       	ld	r7, X
 414:	18 97       	sbiw	r26, 0x08	; 8
 416:	0d 91       	ld	r16, X+
 418:	1d 91       	ld	r17, X+
 41a:	2d 91       	ld	r18, X+
 41c:	3c 91       	ld	r19, X
 41e:	13 97       	sbiw	r26, 0x03	; 3
 420:	40 16       	cp	r4, r16
 422:	51 06       	cpc	r5, r17
 424:	62 06       	cpc	r6, r18
 426:	73 06       	cpc	r7, r19
 428:	8c f6       	brge	.-94     	; 0x3cc <sc_timer_service_proceed+0x66>
				this->timers[i].elapsed_time_ms += time_ms;
 42a:	49 81       	ldd	r20, Y+1	; 0x01
 42c:	5a 81       	ldd	r21, Y+2	; 0x02
 42e:	6b 81       	ldd	r22, Y+3	; 0x03
 430:	7c 81       	ldd	r23, Y+4	; 0x04
 432:	44 0e       	add	r4, r20
 434:	55 1e       	adc	r5, r21
 436:	66 1e       	adc	r6, r22
 438:	77 1e       	adc	r7, r23
 43a:	15 96       	adiw	r26, 0x05	; 5
 43c:	4d 92       	st	X+, r4
 43e:	5d 92       	st	X+, r5
 440:	6d 92       	st	X+, r6
 442:	7c 92       	st	X, r7
 444:	18 97       	sbiw	r26, 0x08	; 8

				if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
 446:	40 16       	cp	r4, r16
 448:	51 06       	cpc	r5, r17
 44a:	62 06       	cpc	r6, r18
 44c:	73 06       	cpc	r7, r19
 44e:	0c f4       	brge	.+2      	; 0x452 <sc_timer_service_proceed+0xec>
 450:	bd cf       	rjmp	.-134    	; 0x3cc <sc_timer_service_proceed+0x66>


/*! Callback that is called when a timer fires. */
static void sc_timer_fired(sc_timer_t *timer) {

	timer->service->raise_event(timer->handle, timer->pt_evid);
 452:	1d 96       	adiw	r26, 0x0d	; 13
 454:	ed 91       	ld	r30, X+
 456:	fc 91       	ld	r31, X
 458:	1e 97       	sbiw	r26, 0x0e	; 14
 45a:	06 80       	ldd	r0, Z+6	; 0x06
 45c:	f7 81       	ldd	r31, Z+7	; 0x07
 45e:	e0 2d       	mov	r30, r0
 460:	6d 81       	ldd	r22, Y+5	; 0x05
 462:	7e 81       	ldd	r23, Y+6	; 0x06
 464:	1b 96       	adiw	r26, 0x0b	; 11
 466:	8d 91       	ld	r24, X+
 468:	9c 91       	ld	r25, X
 46a:	1c 97       	sbiw	r26, 0x0c	; 12
 46c:	09 95       	icall
			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
				this->timers[i].elapsed_time_ms += time_ms;

				if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
					sc_timer_fired(&(this->timers[i]));
					if (this->timers[i].periodic) {
 46e:	f1 01       	movw	r30, r2
 470:	84 81       	ldd	r24, Z+4	; 0x04
 472:	95 81       	ldd	r25, Z+5	; 0x05
 474:	ef 81       	ldd	r30, Y+7	; 0x07
 476:	f8 85       	ldd	r31, Y+8	; 0x08
 478:	e8 0f       	add	r30, r24
 47a:	f9 1f       	adc	r31, r25
 47c:	24 81       	ldd	r18, Z+4	; 0x04
 47e:	22 23       	and	r18, r18
 480:	81 f0       	breq	.+32     	; 0x4a2 <sc_timer_service_proceed+0x13c>
						this->timers[i].elapsed_time_ms -= this->timers[i].time_ms;
 482:	45 81       	ldd	r20, Z+5	; 0x05
 484:	56 81       	ldd	r21, Z+6	; 0x06
 486:	67 81       	ldd	r22, Z+7	; 0x07
 488:	70 85       	ldd	r23, Z+8	; 0x08
 48a:	00 81       	ld	r16, Z
 48c:	11 81       	ldd	r17, Z+1	; 0x01
 48e:	22 81       	ldd	r18, Z+2	; 0x02
 490:	33 81       	ldd	r19, Z+3	; 0x03
 492:	40 1b       	sub	r20, r16
 494:	51 0b       	sbc	r21, r17
 496:	62 0b       	sbc	r22, r18
 498:	73 0b       	sbc	r23, r19
 49a:	45 83       	std	Z+5, r20	; 0x05
 49c:	56 83       	std	Z+6, r21	; 0x06
 49e:	67 83       	std	Z+7, r22	; 0x07
 4a0:	70 87       	std	Z+8, r23	; 0x08
 4a2:	f1 01       	movw	r30, r2
 4a4:	80 80       	ld	r8, Z
 4a6:	91 80       	ldd	r9, Z+1	; 0x01
 4a8:	a2 80       	ldd	r10, Z+2	; 0x02
 4aa:	b3 80       	ldd	r11, Z+3	; 0x03
 4ac:	8f cf       	rjmp	.-226    	; 0x3cc <sc_timer_service_proceed+0x66>
				}
			}
		}
	}

}
 4ae:	28 96       	adiw	r28, 0x08	; 8
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	bf 90       	pop	r11
 4cc:	af 90       	pop	r10
 4ce:	9f 90       	pop	r9
 4d0:	8f 90       	pop	r8
 4d2:	7f 90       	pop	r7
 4d4:	6f 90       	pop	r6
 4d6:	5f 90       	pop	r5
 4d8:	4f 90       	pop	r4
 4da:	3f 90       	pop	r3
 4dc:	2f 90       	pop	r2
 4de:	08 95       	ret

000004e0 <state_chart_setTimer>:
#define CYCLE_PERIOD 10 //number of milliseconds that pass between each statechart cycle<br>
static sc_timer_service_t timer_service;
static sc_timer_t timers[MAX_TIMERS];

//! callback implementation for the setting up time events
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
 4e0:	4f 92       	push	r4
 4e2:	5f 92       	push	r5
 4e4:	6f 92       	push	r6
 4e6:	7f 92       	push	r7
 4e8:	af 92       	push	r10
 4ea:	bf 92       	push	r11
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	db 01       	movw	r26, r22
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 4fc:	c0 90 2c 02 	lds	r12, 0x022C
 500:	d0 90 2d 02 	lds	r13, 0x022D
 504:	e0 90 2e 02 	lds	r14, 0x022E
 508:	f0 90 2f 02 	lds	r15, 0x022F
 50c:	1c 14       	cp	r1, r12
 50e:	1d 04       	cpc	r1, r13
 510:	1e 04       	cpc	r1, r14
 512:	1f 04       	cpc	r1, r15
 514:	fc f4       	brge	.+62     	; 0x554 <state_chart_setTimer+0x74>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {
 516:	c0 91 30 02 	lds	r28, 0x0230
 51a:	d0 91 31 02 	lds	r29, 0x0231
 51e:	69 85       	ldd	r22, Y+9	; 0x09
 520:	7a 85       	ldd	r23, Y+10	; 0x0a
 522:	67 2b       	or	r22, r23
 524:	29 f1       	breq	.+74     	; 0x570 <state_chart_setTimer+0x90>
 526:	fe 01       	movw	r30, r28
 528:	3f 96       	adiw	r30, 0x0f	; 15
 52a:	41 2c       	mov	r4, r1
 52c:	51 2c       	mov	r5, r1
 52e:	32 01       	movw	r6, r4
 530:	43 94       	inc	r4
 532:	0b c0       	rjmp	.+22     	; 0x54a <state_chart_setTimer+0x6a>
 534:	ef 01       	movw	r28, r30
 536:	6f ef       	ldi	r22, 0xFF	; 255
 538:	46 1a       	sub	r4, r22
 53a:	56 0a       	sbc	r5, r22
 53c:	66 0a       	sbc	r6, r22
 53e:	76 0a       	sbc	r7, r22
 540:	3f 96       	adiw	r30, 0x0f	; 15
 542:	a9 84       	ldd	r10, Y+9	; 0x09
 544:	ba 84       	ldd	r11, Y+10	; 0x0a
 546:	ab 28       	or	r10, r11
 548:	99 f0       	breq	.+38     	; 0x570 <state_chart_setTimer+0x90>
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 54a:	4c 14       	cp	r4, r12
 54c:	5d 04       	cpc	r5, r13
 54e:	6e 04       	cpc	r6, r14
 550:	7f 04       	cpc	r7, r15
 552:	81 f7       	brne	.-32     	; 0x534 <state_chart_setTimer+0x54>
static sc_timer_t timers[MAX_TIMERS];

//! callback implementation for the setting up time events
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
    sc_timer_start(&timer_service, (void*) handle, evid, time_ms, periodic);
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	0f 91       	pop	r16
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	df 90       	pop	r13
 560:	cf 90       	pop	r12
 562:	bf 90       	pop	r11
 564:	af 90       	pop	r10
 566:	7f 90       	pop	r7
 568:	6f 90       	pop	r6
 56a:	5f 90       	pop	r5
 56c:	4f 90       	pop	r4
 56e:	08 95       	ret

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {

			/* set timer properties */
			this->timers[i].pt_evid = evid;
 570:	ba 87       	std	Y+10, r27	; 0x0a
 572:	a9 87       	std	Y+9, r26	; 0x09
			this->timers[i].time_ms = time_ms;
 574:	28 83       	st	Y, r18
 576:	39 83       	std	Y+1, r19	; 0x01
 578:	4a 83       	std	Y+2, r20	; 0x02
 57a:	5b 83       	std	Y+3, r21	; 0x03
			this->timers[i].periodic = periodic;
 57c:	0c 83       	std	Y+4, r16	; 0x04
			this->timers[i].handle = handle;
 57e:	9c 87       	std	Y+12, r25	; 0x0c
 580:	8b 87       	std	Y+11, r24	; 0x0b
			this->timers[i].service = this;
 582:	8c e2       	ldi	r24, 0x2C	; 44
 584:	92 e0       	ldi	r25, 0x02	; 2
 586:	9e 87       	std	Y+14, r25	; 0x0e
 588:	8d 87       	std	Y+13, r24	; 0x0d

			// reset the elapsed time ...
			this->timers[i].elapsed_time_ms = 0;
 58a:	1d 82       	std	Y+5, r1	; 0x05
 58c:	1e 82       	std	Y+6, r1	; 0x06
 58e:	1f 82       	std	Y+7, r1	; 0x07
 590:	18 86       	std	Y+8, r1	; 0x08
 592:	e0 cf       	rjmp	.-64     	; 0x554 <state_chart_setTimer+0x74>

00000594 <state_chart_unsetTimer>:
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
    sc_timer_start(&timer_service, (void*) handle, evid, time_ms, periodic);
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	8b 01       	movw	r16, r22
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
 59e:	40 91 2c 02 	lds	r20, 0x022C
 5a2:	50 91 2d 02 	lds	r21, 0x022D
 5a6:	60 91 2e 02 	lds	r22, 0x022E
 5aa:	70 91 2f 02 	lds	r23, 0x022F
 5ae:	14 16       	cp	r1, r20
 5b0:	15 06       	cpc	r1, r21
 5b2:	16 06       	cpc	r1, r22
 5b4:	17 06       	cpc	r1, r23
 5b6:	0c f5       	brge	.+66     	; 0x5fa <state_chart_unsetTimer+0x66>
		if (this->timers[i].pt_evid == evid) {
 5b8:	e0 91 30 02 	lds	r30, 0x0230
 5bc:	f0 91 31 02 	lds	r31, 0x0231
 5c0:	81 85       	ldd	r24, Z+9	; 0x09
 5c2:	92 85       	ldd	r25, Z+10	; 0x0a
 5c4:	08 17       	cp	r16, r24
 5c6:	19 07       	cpc	r17, r25
 5c8:	e9 f0       	breq	.+58     	; 0x604 <state_chart_unsetTimer+0x70>
 5ca:	9f 01       	movw	r18, r30
 5cc:	21 5f       	subi	r18, 0xF1	; 241
 5ce:	3f 4f       	sbci	r19, 0xFF	; 255
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	a0 e0       	ldi	r26, 0x00	; 0
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	0b c0       	rjmp	.+22     	; 0x5f0 <state_chart_unsetTimer+0x5c>
 5da:	f9 01       	movw	r30, r18
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	a1 1d       	adc	r26, r1
 5e0:	b1 1d       	adc	r27, r1
 5e2:	21 5f       	subi	r18, 0xF1	; 241
 5e4:	3f 4f       	sbci	r19, 0xFF	; 255
 5e6:	c1 85       	ldd	r28, Z+9	; 0x09
 5e8:	d2 85       	ldd	r29, Z+10	; 0x0a
 5ea:	0c 17       	cp	r16, r28
 5ec:	1d 07       	cpc	r17, r29
 5ee:	51 f0       	breq	.+20     	; 0x604 <state_chart_unsetTimer+0x70>
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
 5f0:	84 17       	cp	r24, r20
 5f2:	95 07       	cpc	r25, r21
 5f4:	a6 07       	cpc	r26, r22
 5f6:	b7 07       	cpc	r27, r23
 5f8:	81 f7       	brne	.-32     	; 0x5da <state_chart_unsetTimer+0x46>
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
    sc_timer_cancel(&timer_service, evid);
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	08 95       	ret
	int i;

	for (i = 0; i < this->timer_count; i++) {
		if (this->timers[i].pt_evid == evid) {

			this->timers[i].pt_evid = NULL;
 604:	12 86       	std	Z+10, r1	; 0x0a
 606:	11 86       	std	Z+9, r1	; 0x09
			this->timers[i].handle = NULL;
 608:	14 86       	std	Z+12, r1	; 0x0c
 60a:	13 86       	std	Z+11, r1	; 0x0b
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
    sc_timer_cancel(&timer_service, evid);
}
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <sc_timer_setup>:
void sc_timer_service_init(sc_timer_service_t *tservice,
	sc_timer_t *timers,
	sc_integer count,
	sc_raise_time_event_fp raise_event) {

	tservice->timers = timers;
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	90 93 31 02 	sts	0x0231, r25
 61e:	80 93 30 02 	sts	0x0230, r24
	tservice->timer_count = count;
 622:	ec e2       	ldi	r30, 0x2C	; 44
 624:	f2 e0       	ldi	r31, 0x02	; 2
 626:	84 e1       	ldi	r24, 0x14	; 20
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	a0 e0       	ldi	r26, 0x00	; 0
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	80 83       	st	Z, r24
 630:	91 83       	std	Z+1, r25	; 0x01
 632:	a2 83       	std	Z+2, r26	; 0x02
 634:	b3 83       	std	Z+3, r27	; 0x03
 636:	10 92 0a 01 	sts	0x010A, r1
 63a:	10 92 09 01 	sts	0x0109, r1
 63e:	f0 93 0e 01 	sts	0x010E, r31
 642:	e0 93 0d 01 	sts	0x010D, r30
	for (int i=0; i<count; i++) {
		tservice->timers->pt_evid = NULL;
		tservice->timers->service = tservice;
	}

	tservice->raise_event = raise_event;
 646:	8f ed       	ldi	r24, 0xDF	; 223
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	90 93 33 02 	sts	0x0233, r25
 64e:	80 93 32 02 	sts	0x0232, r24
 652:	08 95       	ret

00000654 <sc_timer_increment>:
								(sc_raise_time_event_fp) &state_chart_raiseTimeEvent);
}


void sc_timer_increment(const sc_integer time_ms)
{
 654:	ab 01       	movw	r20, r22
 656:	bc 01       	movw	r22, r24
	sc_timer_service_proceed(&timer_service, time_ms);
 658:	8c e2       	ldi	r24, 0x2C	; 44
 65a:	92 e0       	ldi	r25, 0x02	; 2
 65c:	0c 94 b3 01 	jmp	0x366	; 0x366 <sc_timer_service_proceed>

00000660 <main>:
static State_chart sc;


int main(void)
{
	DDRB |= (1<<5);
 660:	25 9a       	sbi	0x04, 5	; 4

	sc_timer_setup();  //setup the statechart timers
 662:	0e 94 0b 03 	call	0x616	; 0x616 <sc_timer_setup>

	state_chart_init(&sc); //initialize statechart
 666:	84 e3       	ldi	r24, 0x34	; 52
 668:	92 e0       	ldi	r25, 0x02	; 2
 66a:	0e 94 48 00 	call	0x90	; 0x90 <state_chart_init>
	state_chart_enter(&sc); //enter the statechart
 66e:	84 e3       	ldi	r24, 0x34	; 52
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	0e 94 4f 00 	call	0x9e	; 0x9e <state_chart_enter>

	while(1)
	{
		sc_timer_increment(10);  //increment statechart timer by 10ms
 676:	6a e0       	ldi	r22, 0x0A	; 10
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 2a 03 	call	0x654	; 0x654 <sc_timer_increment>
		state_chart_runCycle(&sc); //"run" the statechart
 682:	84 e3       	ldi	r24, 0x34	; 52
 684:	92 e0       	ldi	r25, 0x02	; 2
 686:	0e 94 87 00 	call	0x10e	; 0x10e <state_chart_runCycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68a:	8f e3       	ldi	r24, 0x3F	; 63
 68c:	9c e9       	ldi	r25, 0x9C	; 156
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <main+0x2e>
 692:	00 c0       	rjmp	.+0      	; 0x694 <main+0x34>
 694:	00 00       	nop
 696:	ef cf       	rjmp	.-34     	; 0x676 <main+0x16>

00000698 <state_chartIface_setLight>:

}

//Functions from State_chartRequired.h
void state_chartIface_setLight(const State_chart* handle, const sc_boolean lightOn) {
    if(lightOn)
 698:	61 11       	cpse	r22, r1
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <state_chartIface_setLight+0x8>
        PORTB |= (1<<5);
    else
    	PORTB &= ~(1<<5);
 69c:	2d 98       	cbi	0x05, 5	; 5
 69e:	08 95       	ret
}

//Functions from State_chartRequired.h
void state_chartIface_setLight(const State_chart* handle, const sc_boolean lightOn) {
    if(lightOn)
        PORTB |= (1<<5);
 6a0:	2d 9a       	sbi	0x05, 5	; 5
 6a2:	08 95       	ret

000006a4 <_exit>:
 6a4:	f8 94       	cli

000006a6 <__stop_program>:
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <__stop_program>
