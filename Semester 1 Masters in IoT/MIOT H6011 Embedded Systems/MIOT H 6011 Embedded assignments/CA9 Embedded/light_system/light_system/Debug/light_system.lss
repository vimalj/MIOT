
light_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001172  00001206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  0080012e  0080012e  00001234  2**0
                  ALLOC
  3 .stab         00002d9c  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023c0  00000000  00000000  00003fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00006390  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  000063b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009a2  00000000  00000000  00006478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000061a  00000000  00000000  00006e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002da  00000000  00000000  00007434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  0000770e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_14>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	d6 01       	movw	r26, r12
      6a:	dc 01       	movw	r26, r24
      6c:	e2 01       	movw	r28, r4
      6e:	e8 01       	movw	r28, r16
      70:	ee 01       	movw	r28, r28
      72:	f4 01       	movw	r30, r8
      74:	d0 01       	movw	r26, r0
      76:	ca 01       	movw	r24, r20

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e2 e7       	ldi	r30, 0x72	; 114
      8c:	f1 e1       	ldi	r31, 0x11	; 17
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	ae 32       	cpi	r26, 0x2E	; 46
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	12 e0       	ldi	r17, 0x02	; 2
      9c:	ae e2       	ldi	r26, 0x2E	; 46
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a2 37       	cpi	r26, 0x72	; 114
      a6:	b1 07       	cpc	r27, r17
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 b0 04 	call	0x960	; 0x960 <main>
      ae:	0c 94 b7 08 	jmp	0x116e	; 0x116e <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <state_chart_effect_main_region_Manual_tr0>:
{
	return handle->iface.BRIGHT_raised;
}

static void state_chart_effect_main_region_Manual_tr0(State_chart* handle)
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	ec 01       	movw	r28, r24
/* Default exit sequence for region r1 */
static void state_chart_exseq_main_region_Manual_r1(State_chart* handle)
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of state_chart.main_region.Manual.r1) at position 0... */
	switch(handle->stateConfVector[ 0 ])
      bc:	88 81       	ld	r24, Y
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	11 f0       	breq	.+4      	; 0xc6 <state_chart_effect_main_region_Manual_tr0+0x10>
      c2:	83 30       	cpi	r24, 0x03	; 3
      c4:	19 f4       	brne	.+6      	; 0xcc <state_chart_effect_main_region_Manual_tr0+0x16>

/* Default exit sequence for state LIGHT ON */
static void state_chart_exseq_main_region_Manual_r1_LIGHT_ON(State_chart* handle)
{
	/* Default exit sequence for state LIGHT ON */
	handle->stateConfVector[0] = State_chart_last_state;
      c6:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
      c8:	1a 82       	std	Y+2, r1	; 0x02
      ca:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'LIGHT OFF'. */
static void state_chart_enact_main_region_Automatic_r1_LIGHT_OFF(State_chart* handle)
{
	/* Entry action for state 'LIGHT OFF'. */
	state_chartIface_setLight(handle, bool_false);
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	ce 01       	movw	r24, r28
      d0:	0e 94 65 05 	call	0xaca	; 0xaca <state_chartIface_setLight>
/* 'default' enter sequence for state LIGHT OFF */
static void state_chart_enseq_main_region_Automatic_r1_LIGHT_OFF_default(State_chart* handle)
{
	/* 'default' enter sequence for state LIGHT OFF */
	state_chart_enact_main_region_Automatic_r1_LIGHT_OFF(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_r1_LIGHT_OFF;
      d4:	87 e0       	ldi	r24, 0x07	; 7
      d6:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
      d8:	1a 82       	std	Y+2, r1	; 0x02
      da:	19 82       	std	Y+1, r1	; 0x01

static void state_chart_effect_main_region_Manual_tr0(State_chart* handle)
{
	state_chart_exseq_main_region_Manual(handle);
	state_chart_enseq_main_region_Automatic_default(handle);
}
      dc:	df 91       	pop	r29
      de:	cf 91       	pop	r28
      e0:	08 95       	ret

000000e2 <state_chart_effect_main_region_Automatic_tr0>:
	state_chart_exseq_main_region_Manual_r1_LIGHT_ON(handle);
	state_chart_enseq_main_region_Manual_r1_LIGHT_OFF_default(handle);
}

static void state_chart_effect_main_region_Automatic_tr0(State_chart* handle)
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
/* Default exit sequence for region r1 */
static void state_chart_exseq_main_region_Automatic_r1(State_chart* handle)
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of state_chart.main_region.Automatic.r1) at position 0... */
	switch(handle->stateConfVector[ 0 ])
      e8:	88 81       	ld	r24, Y
      ea:	86 30       	cpi	r24, 0x06	; 6
      ec:	f9 f0       	breq	.+62     	; 0x12c <state_chart_effect_main_region_Automatic_tr0+0x4a>
      ee:	90 f0       	brcs	.+36     	; 0x114 <state_chart_effect_main_region_Automatic_tr0+0x32>
      f0:	87 30       	cpi	r24, 0x07	; 7
      f2:	11 f0       	breq	.+4      	; 0xf8 <state_chart_effect_main_region_Automatic_tr0+0x16>
      f4:	88 30       	cpi	r24, 0x08	; 8
      f6:	19 f4       	brne	.+6      	; 0xfe <state_chart_effect_main_region_Automatic_tr0+0x1c>

/* Default exit sequence for state LIGHT ON */
static void state_chart_exseq_main_region_Automatic_r1_LIGHT_ON(State_chart* handle)
{
	/* Default exit sequence for state LIGHT ON */
	handle->stateConfVector[0] = State_chart_last_state;
      f8:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
      fa:	1a 82       	std	Y+2, r1	; 0x02
      fc:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'LIGHT OFF'. */
static void state_chart_enact_main_region_Manual_r1_LIGHT_OFF(State_chart* handle)
{
	/* Entry action for state 'LIGHT OFF'. */
	state_chartIface_setLight(handle, bool_false);
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	ce 01       	movw	r24, r28
     102:	0e 94 65 05 	call	0xaca	; 0xaca <state_chartIface_setLight>
/* 'default' enter sequence for state LIGHT OFF */
static void state_chart_enseq_main_region_Manual_r1_LIGHT_OFF_default(State_chart* handle)
{
	/* 'default' enter sequence for state LIGHT OFF */
	state_chart_enact_main_region_Manual_r1_LIGHT_OFF(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_r1_LIGHT_OFF;
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
     10a:	1a 82       	std	Y+2, r1	; 0x02
     10c:	19 82       	std	Y+1, r1	; 0x01

static void state_chart_effect_main_region_Automatic_tr0(State_chart* handle)
{
	state_chart_exseq_main_region_Automatic(handle);
	state_chart_enseq_main_region_Manual_default(handle);
}
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret
/* Default exit sequence for region r1 */
static void state_chart_exseq_main_region_Automatic_r1(State_chart* handle)
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of state_chart.main_region.Automatic.r1) at position 0... */
	switch(handle->stateConfVector[ 0 ])
     114:	85 30       	cpi	r24, 0x05	; 5
     116:	99 f7       	brne	.-26     	; 0xfe <state_chart_effect_main_region_Automatic_tr0+0x1c>

/* Default exit sequence for state DarkWaiting */
static void state_chart_exseq_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Default exit sequence for state DarkWaiting */
	handle->stateConfVector[0] = State_chart_last_state;
     118:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     11a:	1a 82       	std	Y+2, r1	; 0x02
     11c:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'DarkWaiting'. */
static void state_chart_exact_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Exit action for state 'DarkWaiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_DarkWaiting_tev0_raised) );		
     11e:	be 01       	movw	r22, r28
     120:	68 5f       	subi	r22, 0xF8	; 248
     122:	7f 4f       	sbci	r23, 0xFF	; 255
     124:	ce 01       	movw	r24, r28
     126:	0e 94 da 03 	call	0x7b4	; 0x7b4 <state_chart_unsetTimer>
     12a:	e9 cf       	rjmp	.-46     	; 0xfe <state_chart_effect_main_region_Automatic_tr0+0x1c>

/* Default exit sequence for state BrightWating */
static void state_chart_exseq_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Default exit sequence for state BrightWating */
	handle->stateConfVector[0] = State_chart_last_state;
     12c:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     12e:	1a 82       	std	Y+2, r1	; 0x02
     130:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'BrightWating'. */
static void state_chart_exact_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Exit action for state 'BrightWating'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_BrightWating_tev0_raised) );		
     132:	be 01       	movw	r22, r28
     134:	67 5f       	subi	r22, 0xF7	; 247
     136:	7f 4f       	sbci	r23, 0xFF	; 255
     138:	ce 01       	movw	r24, r28
     13a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <state_chart_unsetTimer>
     13e:	df cf       	rjmp	.-66     	; 0xfe <state_chart_effect_main_region_Automatic_tr0+0x1c>

00000140 <state_chart_init>:
static void state_chart_clearInEvents(State_chart* handle);
static void state_chart_clearOutEvents(State_chart* handle);


void state_chart_init(State_chart* handle)
{
     140:	fc 01       	movw	r30, r24
		sc_integer i;
	
		for (i = 0; i < STATE_CHART_MAX_ORTHOGONAL_STATES; ++i)
		{
			handle->stateConfVector[i] = State_chart_last_state;
     142:	10 82       	st	Z, r1
		}
		
		
		handle->stateConfVectorPosition = 0;
     144:	12 82       	std	Z+2, r1	; 0x02
     146:	11 82       	std	Z+1, r1	; 0x01
   return bool_false;
}

static void state_chart_clearInEvents(State_chart* handle)
{
	handle->iface.ON_raised = bool_false;
     148:	13 82       	std	Z+3, r1	; 0x03
	handle->iface.OFF_raised = bool_false;
     14a:	14 82       	std	Z+4, r1	; 0x04
	handle->iface.MODE_raised = bool_false;
     14c:	15 82       	std	Z+5, r1	; 0x05
	handle->iface.DARK_raised = bool_false;
     14e:	16 82       	std	Z+6, r1	; 0x06
	handle->iface.BRIGHT_raised = bool_false;
     150:	17 82       	std	Z+7, r1	; 0x07
	handle->timeEvents.state_chart_main_region_Automatic_r1_DarkWaiting_tev0_raised = bool_false;
     152:	10 86       	std	Z+8, r1	; 0x08
	handle->timeEvents.state_chart_main_region_Automatic_r1_BrightWating_tev0_raised = bool_false;
     154:	11 86       	std	Z+9, r1	; 0x09
     156:	08 95       	ret

00000158 <state_chart_enter>:
		state_chart_clearOutEvents(handle);
	
}

void state_chart_enter(State_chart* handle)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	ec 01       	movw	r28, r24

/* Entry action for state 'LIGHT OFF'. */
static void state_chart_enact_main_region_Manual_r1_LIGHT_OFF(State_chart* handle)
{
	/* Entry action for state 'LIGHT OFF'. */
	state_chartIface_setLight(handle, bool_false);
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	0e 94 65 05 	call	0xaca	; 0xaca <state_chartIface_setLight>
/* 'default' enter sequence for state LIGHT OFF */
static void state_chart_enseq_main_region_Manual_r1_LIGHT_OFF_default(State_chart* handle)
{
	/* 'default' enter sequence for state LIGHT OFF */
	state_chart_enact_main_region_Manual_r1_LIGHT_OFF(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_r1_LIGHT_OFF;
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
     168:	1a 82       	std	Y+2, r1	; 0x02
     16a:	19 82       	std	Y+1, r1	; 0x01

void state_chart_enter(State_chart* handle)
{
	/* Default enter sequence for statechart state_chart */
	state_chart_enseq_main_region_default(handle);
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <state_chart_exit>:

void state_chart_exit(State_chart* handle)
{
     172:	fc 01       	movw	r30, r24
/* Default exit sequence for region main region */
static void state_chart_exseq_main_region(State_chart* handle)
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of state_chart.main_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
     174:	80 81       	ld	r24, Z
     176:	85 30       	cpi	r24, 0x05	; 5
     178:	c9 f0       	breq	.+50     	; 0x1ac <state_chart_exit+0x3a>
     17a:	48 f0       	brcs	.+18     	; 0x18e <state_chart_exit+0x1c>
     17c:	87 30       	cpi	r24, 0x07	; 7
     17e:	19 f0       	breq	.+6      	; 0x186 <state_chart_exit+0x14>
     180:	60 f0       	brcs	.+24     	; 0x19a <state_chart_exit+0x28>
     182:	88 30       	cpi	r24, 0x08	; 8
     184:	49 f4       	brne	.+18     	; 0x198 <state_chart_exit+0x26>

/* Default exit sequence for state LIGHT ON */
static void state_chart_exseq_main_region_Automatic_r1_LIGHT_ON(State_chart* handle)
{
	/* Default exit sequence for state LIGHT ON */
	handle->stateConfVector[0] = State_chart_last_state;
     186:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
     188:	12 82       	std	Z+2, r1	; 0x02
     18a:	11 82       	std	Z+1, r1	; 0x01
     18c:	08 95       	ret
/* Default exit sequence for region main region */
static void state_chart_exseq_main_region(State_chart* handle)
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of state_chart.main_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
     18e:	82 30       	cpi	r24, 0x02	; 2
     190:	d1 f3       	breq	.-12     	; 0x186 <state_chart_exit+0x14>
     192:	83 30       	cpi	r24, 0x03	; 3
     194:	c1 f3       	breq	.-16     	; 0x186 <state_chart_exit+0x14>
     196:	08 95       	ret
     198:	08 95       	ret

/* Default exit sequence for state BrightWating */
static void state_chart_exseq_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Default exit sequence for state BrightWating */
	handle->stateConfVector[0] = State_chart_last_state;
     19a:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
     19c:	12 82       	std	Z+2, r1	; 0x02
     19e:	11 82       	std	Z+1, r1	; 0x01

/* Exit action for state 'BrightWating'. */
static void state_chart_exact_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Exit action for state 'BrightWating'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_BrightWating_tev0_raised) );		
     1a0:	bf 01       	movw	r22, r30
     1a2:	67 5f       	subi	r22, 0xF7	; 247
     1a4:	7f 4f       	sbci	r23, 0xFF	; 255
     1a6:	cf 01       	movw	r24, r30
     1a8:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <state_chart_unsetTimer>

/* Default exit sequence for state DarkWaiting */
static void state_chart_exseq_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Default exit sequence for state DarkWaiting */
	handle->stateConfVector[0] = State_chart_last_state;
     1ac:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
     1ae:	12 82       	std	Z+2, r1	; 0x02
     1b0:	11 82       	std	Z+1, r1	; 0x01

/* Exit action for state 'DarkWaiting'. */
static void state_chart_exact_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Exit action for state 'DarkWaiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_DarkWaiting_tev0_raised) );		
     1b2:	bf 01       	movw	r22, r30
     1b4:	68 5f       	subi	r22, 0xF8	; 248
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	cf 01       	movw	r24, r30
     1ba:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <state_chart_unsetTimer>

000001be <state_chart_isActive>:
	/* Default exit sequence for statechart state_chart */
	state_chart_exseq_main_region(handle);
}

sc_boolean state_chart_isActive(const State_chart* handle)
{
     1be:	fc 01       	movw	r30, r24
	sc_boolean result = bool_false;
	int i;
	
	for(i = 0; i < STATE_CHART_MAX_ORTHOGONAL_STATES; i++)
	{
		result = result || handle->stateConfVector[i] != State_chart_last_state;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 81       	ld	r25, Z
     1c4:	91 11       	cpse	r25, r1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <state_chart_isActive+0xc>
     1c8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return result;
}
     1ca:	08 95       	ret

000001cc <state_chart_isFinal>:
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean state_chart_isFinal(const State_chart* handle)
{
   return bool_false;
}
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret

000001d0 <state_chart_runCycle>:
static void state_chart_clearOutEvents(State_chart* handle)
{
}

void state_chart_runCycle(State_chart* handle)
{
     1d0:	0f 93       	push	r16
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	ec 01       	movw	r28, r24
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
     1d8:	1a 82       	std	Y+2, r1	; 0x02
     1da:	19 82       	std	Y+1, r1	; 0x01
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
     1dc:	88 81       	ld	r24, Y
     1de:	85 30       	cpi	r24, 0x05	; 5
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <state_chart_runCycle+0x14>
     1e2:	5d c0       	rjmp	.+186    	; 0x29e <state_chart_runCycle+0xce>
     1e4:	f0 f0       	brcs	.+60     	; 0x222 <state_chart_runCycle+0x52>
     1e6:	87 30       	cpi	r24, 0x07	; 7
     1e8:	09 f4       	brne	.+2      	; 0x1ec <state_chart_runCycle+0x1c>
     1ea:	73 c0       	rjmp	.+230    	; 0x2d2 <state_chart_runCycle+0x102>
     1ec:	70 f1       	brcs	.+92     	; 0x24a <state_chart_runCycle+0x7a>
     1ee:	88 30       	cpi	r24, 0x08	; 8
     1f0:	31 f4       	brne	.+12     	; 0x1fe <state_chart_runCycle+0x2e>

/* The reactions of state LIGHT ON. */
static void state_chart_react_main_region_Automatic_r1_LIGHT_ON(State_chart* handle)
{
	/* The reactions of state LIGHT ON. */
	if (state_chart_check_main_region_Automatic_tr0_tr0(handle) == bool_true)
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	81 11       	cpse	r24, r1
     1f6:	89 c0       	rjmp	.+274    	; 0x30a <state_chart_runCycle+0x13a>
	{ 
		state_chart_effect_main_region_Automatic_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_r1_LIGHT_ON_tr0_tr0(handle) == bool_true)
     1f8:	8f 81       	ldd	r24, Y+7	; 0x07
     1fa:	81 11       	cpse	r24, r1
     1fc:	91 c0       	rjmp	.+290    	; 0x320 <state_chart_runCycle+0x150>
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	01 96       	adiw	r24, 0x01	; 1
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
     204:	9a 83       	std	Y+2, r25	; 0x02
     206:	89 83       	std	Y+1, r24	; 0x01

void state_chart_runCycle(State_chart* handle)
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
     208:	89 2b       	or	r24, r25
     20a:	41 f3       	breq	.-48     	; 0x1dc <state_chart_runCycle+0xc>
   return bool_false;
}

static void state_chart_clearInEvents(State_chart* handle)
{
	handle->iface.ON_raised = bool_false;
     20c:	1b 82       	std	Y+3, r1	; 0x03
	handle->iface.OFF_raised = bool_false;
     20e:	1c 82       	std	Y+4, r1	; 0x04
	handle->iface.MODE_raised = bool_false;
     210:	1d 82       	std	Y+5, r1	; 0x05
	handle->iface.DARK_raised = bool_false;
     212:	1e 82       	std	Y+6, r1	; 0x06
	handle->iface.BRIGHT_raised = bool_false;
     214:	1f 82       	std	Y+7, r1	; 0x07
	handle->timeEvents.state_chart_main_region_Automatic_r1_DarkWaiting_tev0_raised = bool_false;
     216:	18 86       	std	Y+8, r1	; 0x08
	handle->timeEvents.state_chart_main_region_Automatic_r1_BrightWating_tev0_raised = bool_false;
     218:	19 86       	std	Y+9, r1	; 0x09
			break;
		}
	}
	
	state_chart_clearInEvents(handle);
}
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	0f 91       	pop	r16
     220:	08 95       	ret
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	59 f1       	breq	.+86     	; 0x27c <state_chart_runCycle+0xac>
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	51 f7       	brne	.-44     	; 0x1fe <state_chart_runCycle+0x2e>

/* The reactions of state LIGHT ON. */
static void state_chart_react_main_region_Manual_r1_LIGHT_ON(State_chart* handle)
{
	/* The reactions of state LIGHT ON. */
	if (state_chart_check_main_region_Manual_tr0_tr0(handle) == bool_true)
     22a:	8d 81       	ldd	r24, Y+5	; 0x05
     22c:	81 11       	cpse	r24, r1
     22e:	74 c0       	rjmp	.+232    	; 0x318 <state_chart_runCycle+0x148>
	{ 
		state_chart_effect_main_region_Manual_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Manual_r1_LIGHT_ON_tr0_tr0(handle) == bool_true)
     230:	8c 81       	ldd	r24, Y+4	; 0x04
     232:	88 23       	and	r24, r24
     234:	21 f3       	breq	.-56     	; 0x1fe <state_chart_runCycle+0x2e>

/* Default exit sequence for state LIGHT ON */
static void state_chart_exseq_main_region_Manual_r1_LIGHT_ON(State_chart* handle)
{
	/* Default exit sequence for state LIGHT ON */
	handle->stateConfVector[0] = State_chart_last_state;
     236:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     238:	1a 82       	std	Y+2, r1	; 0x02
     23a:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'LIGHT OFF'. */
static void state_chart_enact_main_region_Manual_r1_LIGHT_OFF(State_chart* handle)
{
	/* Entry action for state 'LIGHT OFF'. */
	state_chartIface_setLight(handle, bool_false);
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	ce 01       	movw	r24, r28
     240:	0e 94 65 05 	call	0xaca	; 0xaca <state_chartIface_setLight>
/* 'default' enter sequence for state LIGHT OFF */
static void state_chart_enseq_main_region_Manual_r1_LIGHT_OFF_default(State_chart* handle)
{
	/* 'default' enter sequence for state LIGHT OFF */
	state_chart_enact_main_region_Manual_r1_LIGHT_OFF(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_r1_LIGHT_OFF;
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	88 83       	st	Y, r24
     248:	5b c0       	rjmp	.+182    	; 0x300 <state_chart_runCycle+0x130>

/* The reactions of state BrightWating. */
static void state_chart_react_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* The reactions of state BrightWating. */
	if (state_chart_check_main_region_Automatic_tr0_tr0(handle) == bool_true)
     24a:	8d 81       	ldd	r24, Y+5	; 0x05
     24c:	81 11       	cpse	r24, r1
     24e:	5d c0       	rjmp	.+186    	; 0x30a <state_chart_runCycle+0x13a>
	{ 
		state_chart_effect_main_region_Automatic_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_r1_BrightWating_tr0_tr0(handle) == bool_true)
     250:	89 85       	ldd	r24, Y+9	; 0x09
     252:	81 11       	cpse	r24, r1
     254:	76 c0       	rjmp	.+236    	; 0x342 <state_chart_runCycle+0x172>
		{ 
			state_chart_effect_main_region_Automatic_r1_BrightWating_tr0(handle);
		}  else
		{
			if (state_chart_check_main_region_Automatic_r1_BrightWating_tr1_tr1(handle) == bool_true)
     256:	8e 81       	ldd	r24, Y+6	; 0x06
     258:	88 23       	and	r24, r24
     25a:	89 f2       	breq	.-94     	; 0x1fe <state_chart_runCycle+0x2e>

/* Default exit sequence for state BrightWating */
static void state_chart_exseq_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Default exit sequence for state BrightWating */
	handle->stateConfVector[0] = State_chart_last_state;
     25c:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     25e:	1a 82       	std	Y+2, r1	; 0x02
     260:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'BrightWating'. */
static void state_chart_exact_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Exit action for state 'BrightWating'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_BrightWating_tev0_raised) );		
     262:	be 01       	movw	r22, r28
     264:	67 5f       	subi	r22, 0xF7	; 247
     266:	7f 4f       	sbci	r23, 0xFF	; 255
     268:	ce 01       	movw	r24, r28
     26a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <state_chart_unsetTimer>

/* Entry action for state 'LIGHT ON'. */
static void state_chart_enact_main_region_Automatic_r1_LIGHT_ON(State_chart* handle)
{
	/* Entry action for state 'LIGHT ON'. */
	state_chartIface_setLight(handle, bool_true);
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	ce 01       	movw	r24, r28
     272:	0e 94 65 05 	call	0xaca	; 0xaca <state_chartIface_setLight>
/* 'default' enter sequence for state LIGHT ON */
static void state_chart_enseq_main_region_Automatic_r1_LIGHT_ON_default(State_chart* handle)
{
	/* 'default' enter sequence for state LIGHT ON */
	state_chart_enact_main_region_Automatic_r1_LIGHT_ON(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_r1_LIGHT_ON;
     276:	88 e0       	ldi	r24, 0x08	; 8
     278:	88 83       	st	Y, r24
     27a:	42 c0       	rjmp	.+132    	; 0x300 <state_chart_runCycle+0x130>

/* The reactions of state LIGHT OFF. */
static void state_chart_react_main_region_Manual_r1_LIGHT_OFF(State_chart* handle)
{
	/* The reactions of state LIGHT OFF. */
	if (state_chart_check_main_region_Manual_tr0_tr0(handle) == bool_true)
     27c:	8d 81       	ldd	r24, Y+5	; 0x05
     27e:	81 11       	cpse	r24, r1
     280:	4b c0       	rjmp	.+150    	; 0x318 <state_chart_runCycle+0x148>
	{ 
		state_chart_effect_main_region_Manual_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Manual_r1_LIGHT_OFF_tr0_tr0(handle) == bool_true)
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	88 23       	and	r24, r24
     286:	09 f4       	brne	.+2      	; 0x28a <state_chart_runCycle+0xba>
     288:	ba cf       	rjmp	.-140    	; 0x1fe <state_chart_runCycle+0x2e>

/* Default exit sequence for state LIGHT OFF */
static void state_chart_exseq_main_region_Manual_r1_LIGHT_OFF(State_chart* handle)
{
	/* Default exit sequence for state LIGHT OFF */
	handle->stateConfVector[0] = State_chart_last_state;
     28a:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     28c:	1a 82       	std	Y+2, r1	; 0x02
     28e:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'LIGHT ON'. */
static void state_chart_enact_main_region_Manual_r1_LIGHT_ON(State_chart* handle)
{
	/* Entry action for state 'LIGHT ON'. */
	state_chartIface_setLight(handle, bool_true);
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	ce 01       	movw	r24, r28
     294:	0e 94 65 05 	call	0xaca	; 0xaca <state_chartIface_setLight>
/* 'default' enter sequence for state LIGHT ON */
static void state_chart_enseq_main_region_Manual_r1_LIGHT_ON_default(State_chart* handle)
{
	/* 'default' enter sequence for state LIGHT ON */
	state_chart_enact_main_region_Manual_r1_LIGHT_ON(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_r1_LIGHT_ON;
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	88 83       	st	Y, r24
     29c:	31 c0       	rjmp	.+98     	; 0x300 <state_chart_runCycle+0x130>

/* The reactions of state DarkWaiting. */
static void state_chart_react_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* The reactions of state DarkWaiting. */
	if (state_chart_check_main_region_Automatic_tr0_tr0(handle) == bool_true)
     29e:	8d 81       	ldd	r24, Y+5	; 0x05
     2a0:	81 11       	cpse	r24, r1
     2a2:	33 c0       	rjmp	.+102    	; 0x30a <state_chart_runCycle+0x13a>
	{ 
		state_chart_effect_main_region_Automatic_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_r1_DarkWaiting_tr0_tr0(handle) == bool_true)
     2a4:	88 85       	ldd	r24, Y+8	; 0x08
     2a6:	81 11       	cpse	r24, r1
     2a8:	53 c0       	rjmp	.+166    	; 0x350 <state_chart_runCycle+0x180>
		{ 
			state_chart_effect_main_region_Automatic_r1_DarkWaiting_tr0(handle);
		}  else
		{
			if (state_chart_check_main_region_Automatic_r1_DarkWaiting_tr1_tr1(handle) == bool_true)
     2aa:	8f 81       	ldd	r24, Y+7	; 0x07
     2ac:	88 23       	and	r24, r24
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <state_chart_runCycle+0xe2>
     2b0:	a6 cf       	rjmp	.-180    	; 0x1fe <state_chart_runCycle+0x2e>

/* Default exit sequence for state DarkWaiting */
static void state_chart_exseq_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Default exit sequence for state DarkWaiting */
	handle->stateConfVector[0] = State_chart_last_state;
     2b2:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     2b4:	1a 82       	std	Y+2, r1	; 0x02
     2b6:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'DarkWaiting'. */
static void state_chart_exact_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Exit action for state 'DarkWaiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_DarkWaiting_tev0_raised) );		
     2b8:	be 01       	movw	r22, r28
     2ba:	68 5f       	subi	r22, 0xF8	; 248
     2bc:	7f 4f       	sbci	r23, 0xFF	; 255

/* Exit action for state 'BrightWating'. */
static void state_chart_exact_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Exit action for state 'BrightWating'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_BrightWating_tev0_raised) );		
     2be:	ce 01       	movw	r24, r28
     2c0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <state_chart_unsetTimer>

/* Entry action for state 'LIGHT OFF'. */
static void state_chart_enact_main_region_Automatic_r1_LIGHT_OFF(State_chart* handle)
{
	/* Entry action for state 'LIGHT OFF'. */
	state_chartIface_setLight(handle, bool_false);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	ce 01       	movw	r24, r28
     2c8:	0e 94 65 05 	call	0xaca	; 0xaca <state_chartIface_setLight>
/* 'default' enter sequence for state LIGHT OFF */
static void state_chart_enseq_main_region_Automatic_r1_LIGHT_OFF_default(State_chart* handle)
{
	/* 'default' enter sequence for state LIGHT OFF */
	state_chart_enact_main_region_Automatic_r1_LIGHT_OFF(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_r1_LIGHT_OFF;
     2cc:	87 e0       	ldi	r24, 0x07	; 7
     2ce:	88 83       	st	Y, r24
     2d0:	17 c0       	rjmp	.+46     	; 0x300 <state_chart_runCycle+0x130>

/* The reactions of state LIGHT OFF. */
static void state_chart_react_main_region_Automatic_r1_LIGHT_OFF(State_chart* handle)
{
	/* The reactions of state LIGHT OFF. */
	if (state_chart_check_main_region_Automatic_tr0_tr0(handle) == bool_true)
     2d2:	8d 81       	ldd	r24, Y+5	; 0x05
     2d4:	81 11       	cpse	r24, r1
     2d6:	19 c0       	rjmp	.+50     	; 0x30a <state_chart_runCycle+0x13a>
	{ 
		state_chart_effect_main_region_Automatic_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_r1_LIGHT_OFF_tr0_tr0(handle) == bool_true)
     2d8:	8e 81       	ldd	r24, Y+6	; 0x06
     2da:	88 23       	and	r24, r24
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <state_chart_runCycle+0x110>
     2de:	8f cf       	rjmp	.-226    	; 0x1fe <state_chart_runCycle+0x2e>

/* Default exit sequence for state LIGHT OFF */
static void state_chart_exseq_main_region_Automatic_r1_LIGHT_OFF(State_chart* handle)
{
	/* Default exit sequence for state LIGHT OFF */
	handle->stateConfVector[0] = State_chart_last_state;
     2e0:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     2e2:	1a 82       	std	Y+2, r1	; 0x02
     2e4:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'DarkWaiting'. */
static void state_chart_enact_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Entry action for state 'DarkWaiting'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_DarkWaiting_tev0_raised) , 2500, bool_false);
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	24 ec       	ldi	r18, 0xC4	; 196
     2ea:	39 e0       	ldi	r19, 0x09	; 9
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	be 01       	movw	r22, r28
     2f2:	68 5f       	subi	r22, 0xF8	; 248
     2f4:	7f 4f       	sbci	r23, 0xFF	; 255
     2f6:	ce 01       	movw	r24, r28
     2f8:	0e 94 80 03 	call	0x700	; 0x700 <state_chart_setTimer>
/* 'default' enter sequence for state DarkWaiting */
static void state_chart_enseq_main_region_Automatic_r1_DarkWaiting_default(State_chart* handle)
{
	/* 'default' enter sequence for state DarkWaiting */
	state_chart_enact_main_region_Automatic_r1_DarkWaiting(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_r1_DarkWaiting;
     2fc:	85 e0       	ldi	r24, 0x05	; 5
     2fe:	88 83       	st	Y, r24
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	9a 83       	std	Y+2, r25	; 0x02
     306:	89 83       	std	Y+1, r24	; 0x01
     308:	81 cf       	rjmp	.-254    	; 0x20c <state_chart_runCycle+0x3c>
static void state_chart_react_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* The reactions of state DarkWaiting. */
	if (state_chart_check_main_region_Automatic_tr0_tr0(handle) == bool_true)
	{ 
		state_chart_effect_main_region_Automatic_tr0(handle);
     30a:	ce 01       	movw	r24, r28
     30c:	0e 94 71 00 	call	0xe2	; 0xe2 <state_chart_effect_main_region_Automatic_tr0>
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	9a 81       	ldd	r25, Y+2	; 0x02
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	76 cf       	rjmp	.-276    	; 0x204 <state_chart_runCycle+0x34>
static void state_chart_react_main_region_Manual_r1_LIGHT_OFF(State_chart* handle)
{
	/* The reactions of state LIGHT OFF. */
	if (state_chart_check_main_region_Manual_tr0_tr0(handle) == bool_true)
	{ 
		state_chart_effect_main_region_Manual_tr0(handle);
     318:	ce 01       	movw	r24, r28
     31a:	0e 94 5b 00 	call	0xb6	; 0xb6 <state_chart_effect_main_region_Manual_tr0>
     31e:	6f cf       	rjmp	.-290    	; 0x1fe <state_chart_runCycle+0x2e>

/* Default exit sequence for state LIGHT ON */
static void state_chart_exseq_main_region_Automatic_r1_LIGHT_ON(State_chart* handle)
{
	/* Default exit sequence for state LIGHT ON */
	handle->stateConfVector[0] = State_chart_last_state;
     320:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     322:	1a 82       	std	Y+2, r1	; 0x02
     324:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'BrightWating'. */
static void state_chart_enact_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Entry action for state 'BrightWating'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_BrightWating_tev0_raised) , 2500, bool_false);
     326:	00 e0       	ldi	r16, 0x00	; 0
     328:	24 ec       	ldi	r18, 0xC4	; 196
     32a:	39 e0       	ldi	r19, 0x09	; 9
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	be 01       	movw	r22, r28
     332:	67 5f       	subi	r22, 0xF7	; 247
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	ce 01       	movw	r24, r28
     338:	0e 94 80 03 	call	0x700	; 0x700 <state_chart_setTimer>
/* 'default' enter sequence for state BrightWating */
static void state_chart_enseq_main_region_Automatic_r1_BrightWating_default(State_chart* handle)
{
	/* 'default' enter sequence for state BrightWating */
	state_chart_enact_main_region_Automatic_r1_BrightWating(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_r1_BrightWating;
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	88 83       	st	Y, r24
     340:	df cf       	rjmp	.-66     	; 0x300 <state_chart_runCycle+0x130>

/* Default exit sequence for state BrightWating */
static void state_chart_exseq_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Default exit sequence for state BrightWating */
	handle->stateConfVector[0] = State_chart_last_state;
     342:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     344:	1a 82       	std	Y+2, r1	; 0x02
     346:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'BrightWating'. */
static void state_chart_exact_main_region_Automatic_r1_BrightWating(State_chart* handle)
{
	/* Exit action for state 'BrightWating'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_BrightWating_tev0_raised) );		
     348:	be 01       	movw	r22, r28
     34a:	67 5f       	subi	r22, 0xF7	; 247
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	b7 cf       	rjmp	.-146    	; 0x2be <state_chart_runCycle+0xee>

/* Default exit sequence for state DarkWaiting */
static void state_chart_exseq_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Default exit sequence for state DarkWaiting */
	handle->stateConfVector[0] = State_chart_last_state;
     350:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     352:	1a 82       	std	Y+2, r1	; 0x02
     354:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'DarkWaiting'. */
static void state_chart_exact_main_region_Automatic_r1_DarkWaiting(State_chart* handle)
{
	/* Exit action for state 'DarkWaiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_r1_DarkWaiting_tev0_raised) );		
     356:	be 01       	movw	r22, r28
     358:	68 5f       	subi	r22, 0xF8	; 248
     35a:	7f 4f       	sbci	r23, 0xFF	; 255
     35c:	85 cf       	rjmp	.-246    	; 0x268 <state_chart_runCycle+0x98>

0000035e <state_chart_raiseTimeEvent>:
	state_chart_clearInEvents(handle);
}

void state_chart_raiseTimeEvent(const State_chart* handle, sc_eventid evid)
{
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
     35e:	9c 01       	movw	r18, r24
     360:	28 5f       	subi	r18, 0xF8	; 248
     362:	3f 4f       	sbci	r19, 0xFF	; 255
     364:	62 17       	cp	r22, r18
     366:	73 07       	cpc	r23, r19
     368:	3c f0       	brlt	.+14     	; 0x378 <state_chart_raiseTimeEvent+0x1a>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + sizeof(State_chartTimeEvents))
     36a:	0a 96       	adiw	r24, 0x0a	; 10
     36c:	68 17       	cp	r22, r24
     36e:	79 07       	cpc	r23, r25
     370:	18 f4       	brcc	.+6      	; 0x378 <state_chart_raiseTimeEvent+0x1a>
		{
		*(sc_boolean*)evid = bool_true;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	fb 01       	movw	r30, r22
     376:	80 83       	st	Z, r24
     378:	08 95       	ret

0000037a <state_chart_isStateActive>:
	}		
}

sc_boolean state_chart_isStateActive(const State_chart* handle, State_chartStates state)
{
     37a:	dc 01       	movw	r26, r24
	sc_boolean result = bool_false;
	switch (state)
     37c:	46 2f       	mov	r20, r22
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	41 50       	subi	r20, 0x01	; 1
     382:	51 09       	sbc	r21, r1
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	51 05       	cpc	r21, r1
     388:	48 f4       	brcc	.+18     	; 0x39c <state_chart_isStateActive+0x22>
     38a:	4c 5c       	subi	r20, 0xCC	; 204
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	fa 01       	movw	r30, r20
     390:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__tablejump2__>
		case State_chart_main_region_Automatic_r1_LIGHT_OFF :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_LIGHT_OFF] == State_chart_main_region_Automatic_r1_LIGHT_OFF
			);
			break;
		case State_chart_main_region_Automatic_r1_LIGHT_ON :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_LIGHT_ON] == State_chart_main_region_Automatic_r1_LIGHT_ON
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	9c 91       	ld	r25, X
     398:	98 30       	cpi	r25, 0x08	; 8
     39a:	09 f0       	breq	.+2      	; 0x39e <state_chart_isStateActive+0x24>
			);
			break;
		default:
			result = bool_false;
     39c:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return result;
}
     39e:	08 95       	ret
		case State_chart_main_region_Automatic_r1_BrightWating :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_BRIGHTWATING] == State_chart_main_region_Automatic_r1_BrightWating
			);
			break;
		case State_chart_main_region_Automatic_r1_LIGHT_OFF :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_LIGHT_OFF] == State_chart_main_region_Automatic_r1_LIGHT_OFF
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	9c 91       	ld	r25, X
     3a4:	97 30       	cpi	r25, 0x07	; 7
     3a6:	d9 f3       	breq	.-10     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_r1_LIGHT_ON :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_LIGHT_ON] == State_chart_main_region_Automatic_r1_LIGHT_ON
			);
			break;
		default:
			result = bool_false;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	f9 cf       	rjmp	.-14     	; 0x39e <state_chart_isStateActive+0x24>
	sc_boolean result = bool_false;
	switch (state)
	{
		case State_chart_main_region_Manual :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL] >= State_chart_main_region_Manual
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL] <= State_chart_main_region_Manual_r1_LIGHT_ON);
     3ac:	9c 91       	ld	r25, X
     3ae:	91 50       	subi	r25, 0x01	; 1
{
	sc_boolean result = bool_false;
	switch (state)
	{
		case State_chart_main_region_Manual :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL] >= State_chart_main_region_Manual
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	93 30       	cpi	r25, 0x03	; 3
     3b4:	98 f7       	brcc	.-26     	; 0x39c <state_chart_isStateActive+0x22>
		default:
			result = bool_false;
			break;
	}
	return result;
}
     3b6:	08 95       	ret
		case State_chart_main_region_Manual :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL] >= State_chart_main_region_Manual
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL] <= State_chart_main_region_Manual_r1_LIGHT_ON);
			break;
		case State_chart_main_region_Manual_r1_LIGHT_OFF :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_R1_LIGHT_OFF] == State_chart_main_region_Manual_r1_LIGHT_OFF
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	9c 91       	ld	r25, X
     3bc:	92 30       	cpi	r25, 0x02	; 2
     3be:	79 f3       	breq	.-34     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_r1_LIGHT_ON :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_LIGHT_ON] == State_chart_main_region_Automatic_r1_LIGHT_ON
			);
			break;
		default:
			result = bool_false;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	ed cf       	rjmp	.-38     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Manual_r1_LIGHT_OFF :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_R1_LIGHT_OFF] == State_chart_main_region_Manual_r1_LIGHT_OFF
			);
			break;
		case State_chart_main_region_Manual_r1_LIGHT_ON :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_R1_LIGHT_ON] == State_chart_main_region_Manual_r1_LIGHT_ON
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	9c 91       	ld	r25, X
     3c8:	93 30       	cpi	r25, 0x03	; 3
     3ca:	49 f3       	breq	.-46     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_r1_LIGHT_ON :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_LIGHT_ON] == State_chart_main_region_Automatic_r1_LIGHT_ON
			);
			break;
		default:
			result = bool_false;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	e7 cf       	rjmp	.-50     	; 0x39e <state_chart_isStateActive+0x24>
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_R1_LIGHT_ON] == State_chart_main_region_Manual_r1_LIGHT_ON
			);
			break;
		case State_chart_main_region_Automatic :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC] >= State_chart_main_region_Automatic
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC] <= State_chart_main_region_Automatic_r1_LIGHT_ON);
     3d0:	9c 91       	ld	r25, X
     3d2:	94 50       	subi	r25, 0x04	; 4
		case State_chart_main_region_Manual_r1_LIGHT_ON :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_R1_LIGHT_ON] == State_chart_main_region_Manual_r1_LIGHT_ON
			);
			break;
		case State_chart_main_region_Automatic :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC] >= State_chart_main_region_Automatic
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	95 30       	cpi	r25, 0x05	; 5
     3d8:	08 f7       	brcc	.-62     	; 0x39c <state_chart_isStateActive+0x22>
		default:
			result = bool_false;
			break;
	}
	return result;
}
     3da:	08 95       	ret
		case State_chart_main_region_Automatic :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC] >= State_chart_main_region_Automatic
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC] <= State_chart_main_region_Automatic_r1_LIGHT_ON);
			break;
		case State_chart_main_region_Automatic_r1_DarkWaiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_DARKWAITING] == State_chart_main_region_Automatic_r1_DarkWaiting
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	9c 91       	ld	r25, X
     3e0:	95 30       	cpi	r25, 0x05	; 5
     3e2:	e9 f2       	breq	.-70     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_r1_LIGHT_ON :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_LIGHT_ON] == State_chart_main_region_Automatic_r1_LIGHT_ON
			);
			break;
		default:
			result = bool_false;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	db cf       	rjmp	.-74     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_r1_DarkWaiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_DARKWAITING] == State_chart_main_region_Automatic_r1_DarkWaiting
			);
			break;
		case State_chart_main_region_Automatic_r1_BrightWating :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_BRIGHTWATING] == State_chart_main_region_Automatic_r1_BrightWating
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	9c 91       	ld	r25, X
     3ec:	96 30       	cpi	r25, 0x06	; 6
     3ee:	b9 f2       	breq	.-82     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_r1_LIGHT_ON :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_R1_LIGHT_ON] == State_chart_main_region_Automatic_r1_LIGHT_ON
			);
			break;
		default:
			result = bool_false;
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	d5 cf       	rjmp	.-86     	; 0x39e <state_chart_isStateActive+0x24>

000003f4 <state_chartIface_raise_oN>:
	return result;
}

void state_chartIface_raise_oN(State_chart* handle)
{
	handle->iface.ON_raised = bool_true;
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	fc 01       	movw	r30, r24
     3f8:	23 83       	std	Z+3, r18	; 0x03
     3fa:	08 95       	ret

000003fc <state_chartIface_raise_oFF>:
}
void state_chartIface_raise_oFF(State_chart* handle)
{
	handle->iface.OFF_raised = bool_true;
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	fc 01       	movw	r30, r24
     400:	24 83       	std	Z+4, r18	; 0x04
     402:	08 95       	ret

00000404 <state_chartIface_raise_mODE>:
}
void state_chartIface_raise_mODE(State_chart* handle)
{
	handle->iface.MODE_raised = bool_true;
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	fc 01       	movw	r30, r24
     408:	25 83       	std	Z+5, r18	; 0x05
     40a:	08 95       	ret

0000040c <state_chartIface_raise_dARK>:
}
void state_chartIface_raise_dARK(State_chart* handle)
{
	handle->iface.DARK_raised = bool_true;
     40c:	21 e0       	ldi	r18, 0x01	; 1
     40e:	fc 01       	movw	r30, r24
     410:	26 83       	std	Z+6, r18	; 0x06
     412:	08 95       	ret

00000414 <state_chartIface_raise_bRIGHT>:
}
void state_chartIface_raise_bRIGHT(State_chart* handle)
{
	handle->iface.BRIGHT_raised = bool_true;
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	fc 01       	movw	r30, r24
     418:	27 83       	std	Z+7, r18	; 0x07
     41a:	08 95       	ret

0000041c <sc_timer_start>:



/*! Starts a timer with the specified parameters. */
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {
     41c:	6f 92       	push	r6
     41e:	7f 92       	push	r7
     420:	8f 92       	push	r8
     422:	9f 92       	push	r9
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	ce 2d       	mov	r28, r14


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     438:	dc 01       	movw	r26, r24
     43a:	8d 90       	ld	r8, X+
     43c:	9d 90       	ld	r9, X+
     43e:	ad 90       	ld	r10, X+
     440:	bc 90       	ld	r11, X
     442:	13 97       	sbiw	r26, 0x03	; 3
     444:	18 14       	cp	r1, r8
     446:	19 04       	cpc	r1, r9
     448:	1a 04       	cpc	r1, r10
     44a:	1b 04       	cpc	r1, r11
     44c:	1c f5       	brge	.+70     	; 0x494 <sc_timer_start+0x78>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {
     44e:	14 96       	adiw	r26, 0x04	; 4
     450:	ed 91       	ld	r30, X+
     452:	fc 91       	ld	r31, X
     454:	15 97       	sbiw	r26, 0x05	; 5
     456:	a1 85       	ldd	r26, Z+9	; 0x09
     458:	b2 85       	ldd	r27, Z+10	; 0x0a
     45a:	ab 2b       	or	r26, r27
     45c:	49 f1       	breq	.+82     	; 0x4b0 <sc_timer_start+0x94>
     45e:	3f 01       	movw	r6, r30
     460:	bf e0       	ldi	r27, 0x0F	; 15
     462:	6b 0e       	add	r6, r27
     464:	71 1c       	adc	r7, r1
     466:	c1 2c       	mov	r12, r1
     468:	d1 2c       	mov	r13, r1
     46a:	76 01       	movw	r14, r12
     46c:	c3 94       	inc	r12
     46e:	0d c0       	rjmp	.+26     	; 0x48a <sc_timer_start+0x6e>
     470:	f3 01       	movw	r30, r6
     472:	bf ef       	ldi	r27, 0xFF	; 255
     474:	cb 1a       	sub	r12, r27
     476:	db 0a       	sbc	r13, r27
     478:	eb 0a       	sbc	r14, r27
     47a:	fb 0a       	sbc	r15, r27
     47c:	af e0       	ldi	r26, 0x0F	; 15
     47e:	6a 0e       	add	r6, r26
     480:	71 1c       	adc	r7, r1
     482:	a1 85       	ldd	r26, Z+9	; 0x09
     484:	b2 85       	ldd	r27, Z+10	; 0x0a
     486:	ab 2b       	or	r26, r27
     488:	99 f0       	breq	.+38     	; 0x4b0 <sc_timer_start+0x94>
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     48a:	c8 14       	cp	r12, r8
     48c:	d9 04       	cpc	r13, r9
     48e:	ea 04       	cpc	r14, r10
     490:	fb 04       	cpc	r15, r11
     492:	71 f7       	brne	.-36     	; 0x470 <sc_timer_start+0x54>

			break;
		}
	}

}
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	bf 90       	pop	r11
     4a4:	af 90       	pop	r10
     4a6:	9f 90       	pop	r9
     4a8:	8f 90       	pop	r8
     4aa:	7f 90       	pop	r7
     4ac:	6f 90       	pop	r6
     4ae:	08 95       	ret

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {

			/* set timer properties */
			this->timers[i].pt_evid = evid;
     4b0:	52 87       	std	Z+10, r21	; 0x0a
     4b2:	41 87       	std	Z+9, r20	; 0x09
			this->timers[i].time_ms = time_ms;
     4b4:	00 83       	st	Z, r16
     4b6:	11 83       	std	Z+1, r17	; 0x01
     4b8:	22 83       	std	Z+2, r18	; 0x02
     4ba:	33 83       	std	Z+3, r19	; 0x03
			this->timers[i].periodic = periodic;
     4bc:	c4 83       	std	Z+4, r28	; 0x04
			this->timers[i].handle = handle;
     4be:	74 87       	std	Z+12, r23	; 0x0c
     4c0:	63 87       	std	Z+11, r22	; 0x0b
			this->timers[i].service = this;
     4c2:	96 87       	std	Z+14, r25	; 0x0e
     4c4:	85 87       	std	Z+13, r24	; 0x0d

			// reset the elapsed time ...
			this->timers[i].elapsed_time_ms = 0;
     4c6:	15 82       	std	Z+5, r1	; 0x05
     4c8:	16 82       	std	Z+6, r1	; 0x06
     4ca:	17 82       	std	Z+7, r1	; 0x07
     4cc:	10 86       	std	Z+8, r1	; 0x08

			break;
     4ce:	e2 cf       	rjmp	.-60     	; 0x494 <sc_timer_start+0x78>

000004d0 <sc_timer_cancel>:

}


/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	8b 01       	movw	r16, r22

	int i;

	for (i = 0; i < this->timer_count; i++) {
     4da:	dc 01       	movw	r26, r24
     4dc:	4d 91       	ld	r20, X+
     4de:	5d 91       	ld	r21, X+
     4e0:	6d 91       	ld	r22, X+
     4e2:	7c 91       	ld	r23, X
     4e4:	13 97       	sbiw	r26, 0x03	; 3
     4e6:	14 16       	cp	r1, r20
     4e8:	15 06       	cpc	r1, r21
     4ea:	16 06       	cpc	r1, r22
     4ec:	17 06       	cpc	r1, r23
     4ee:	0c f5       	brge	.+66     	; 0x532 <sc_timer_cancel+0x62>
		if (this->timers[i].pt_evid == evid) {
     4f0:	14 96       	adiw	r26, 0x04	; 4
     4f2:	ed 91       	ld	r30, X+
     4f4:	fc 91       	ld	r31, X
     4f6:	15 97       	sbiw	r26, 0x05	; 5
     4f8:	81 85       	ldd	r24, Z+9	; 0x09
     4fa:	92 85       	ldd	r25, Z+10	; 0x0a
     4fc:	80 17       	cp	r24, r16
     4fe:	91 07       	cpc	r25, r17
     500:	e9 f0       	breq	.+58     	; 0x53c <sc_timer_cancel+0x6c>
     502:	9f 01       	movw	r18, r30
     504:	21 5f       	subi	r18, 0xF1	; 241
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	a0 e0       	ldi	r26, 0x00	; 0
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	0b c0       	rjmp	.+22     	; 0x528 <sc_timer_cancel+0x58>
     512:	f9 01       	movw	r30, r18
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	a1 1d       	adc	r26, r1
     518:	b1 1d       	adc	r27, r1
     51a:	21 5f       	subi	r18, 0xF1	; 241
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	c1 85       	ldd	r28, Z+9	; 0x09
     520:	d2 85       	ldd	r29, Z+10	; 0x0a
     522:	c0 17       	cp	r28, r16
     524:	d1 07       	cpc	r29, r17
     526:	51 f0       	breq	.+20     	; 0x53c <sc_timer_cancel+0x6c>
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
     528:	84 17       	cp	r24, r20
     52a:	95 07       	cpc	r25, r21
     52c:	a6 07       	cpc	r26, r22
     52e:	b7 07       	cpc	r27, r23
     530:	81 f7       	brne	.-32     	; 0x512 <sc_timer_cancel+0x42>
			this->timers[i].handle = NULL;

			break;
		}
	}
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret
	int i;

	for (i = 0; i < this->timer_count; i++) {
		if (this->timers[i].pt_evid == evid) {

			this->timers[i].pt_evid = NULL;
     53c:	12 86       	std	Z+10, r1	; 0x0a
     53e:	11 86       	std	Z+9, r1	; 0x09
			this->timers[i].handle = NULL;
     540:	14 86       	std	Z+12, r1	; 0x0c
     542:	13 86       	std	Z+11, r1	; 0x0b

			break;
		}
	}
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <sc_timer_service_init>:

/*! Initializes a timer service with a set of timers. */
void sc_timer_service_init(sc_timer_service_t *tservice,
	sc_timer_t *timers,
	sc_integer count,
	sc_raise_time_event_fp raise_event) {
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	fc 01       	movw	r30, r24

	tservice->timers = timers;
     554:	75 83       	std	Z+5, r23	; 0x05
     556:	64 83       	std	Z+4, r22	; 0x04
	tservice->timer_count = count;
     558:	20 83       	st	Z, r18
     55a:	31 83       	std	Z+1, r19	; 0x01
     55c:	42 83       	std	Z+2, r20	; 0x02
     55e:	53 83       	std	Z+3, r21	; 0x03
	for (int i=0; i<count; i++) {
     560:	12 16       	cp	r1, r18
     562:	13 06       	cpc	r1, r19
     564:	14 06       	cpc	r1, r20
     566:	15 06       	cpc	r1, r21
     568:	4c f4       	brge	.+18     	; 0x57c <sc_timer_service_init+0x2e>
     56a:	db 01       	movw	r26, r22
     56c:	1a 96       	adiw	r26, 0x0a	; 10
     56e:	1c 92       	st	X, r1
     570:	1e 92       	st	-X, r1
     572:	19 97       	sbiw	r26, 0x09	; 9
     574:	1e 96       	adiw	r26, 0x0e	; 14
     576:	9c 93       	st	X, r25
     578:	8e 93       	st	-X, r24
     57a:	1d 97       	sbiw	r26, 0x0d	; 13
		tservice->timers->pt_evid = NULL;
		tservice->timers->service = tservice;
	}

	tservice->raise_event = raise_event;
     57c:	17 83       	std	Z+7, r17	; 0x07
     57e:	06 83       	std	Z+6, r16	; 0x06
}
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	08 95       	ret

00000586 <sc_timer_service_proceed>:


void sc_timer_service_proceed(sc_timer_service_t *this, const sc_integer time_ms) {
     586:	2f 92       	push	r2
     588:	3f 92       	push	r3
     58a:	4f 92       	push	r4
     58c:	5f 92       	push	r5
     58e:	6f 92       	push	r6
     590:	7f 92       	push	r7
     592:	8f 92       	push	r8
     594:	9f 92       	push	r9
     596:	af 92       	push	r10
     598:	bf 92       	push	r11
     59a:	cf 92       	push	r12
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	28 97       	sbiw	r28, 0x08	; 8
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	1c 01       	movw	r2, r24
     5bc:	49 83       	std	Y+1, r20	; 0x01
     5be:	5a 83       	std	Y+2, r21	; 0x02
     5c0:	6b 83       	std	Y+3, r22	; 0x03
     5c2:	7c 83       	std	Y+4, r23	; 0x04

	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     5c4:	fc 01       	movw	r30, r24
     5c6:	80 80       	ld	r8, Z
     5c8:	91 80       	ldd	r9, Z+1	; 0x01
     5ca:	a2 80       	ldd	r10, Z+2	; 0x02
     5cc:	b3 80       	ldd	r11, Z+3	; 0x03
     5ce:	18 14       	cp	r1, r8
     5d0:	19 04       	cpc	r1, r9
     5d2:	1a 04       	cpc	r1, r10
     5d4:	1b 04       	cpc	r1, r11
     5d6:	0c f0       	brlt	.+2      	; 0x5da <sc_timer_service_proceed+0x54>
     5d8:	7a c0       	rjmp	.+244    	; 0x6ce <sc_timer_service_proceed+0x148>
     5da:	c1 2c       	mov	r12, r1
     5dc:	d1 2c       	mov	r13, r1
     5de:	76 01       	movw	r14, r12
     5e0:	c3 94       	inc	r12
     5e2:	18 86       	std	Y+8, r1	; 0x08
     5e4:	1f 82       	std	Y+7, r1	; 0x07
     5e6:	84 81       	ldd	r24, Z+4	; 0x04
     5e8:	95 81       	ldd	r25, Z+5	; 0x05
     5ea:	13 c0       	rjmp	.+38     	; 0x612 <sc_timer_service_proceed+0x8c>
     5ec:	b7 01       	movw	r22, r14
     5ee:	a6 01       	movw	r20, r12
     5f0:	2f 81       	ldd	r18, Y+7	; 0x07
     5f2:	38 85       	ldd	r19, Y+8	; 0x08
     5f4:	21 5f       	subi	r18, 0xF1	; 241
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	38 87       	std	Y+8, r19	; 0x08
     5fa:	2f 83       	std	Y+7, r18	; 0x07
     5fc:	3f ef       	ldi	r19, 0xFF	; 255
     5fe:	c3 1a       	sub	r12, r19
     600:	d3 0a       	sbc	r13, r19
     602:	e3 0a       	sbc	r14, r19
     604:	f3 0a       	sbc	r15, r19
     606:	48 15       	cp	r20, r8
     608:	59 05       	cpc	r21, r9
     60a:	6a 05       	cpc	r22, r10
     60c:	7b 05       	cpc	r23, r11
     60e:	0c f0       	brlt	.+2      	; 0x612 <sc_timer_service_proceed+0x8c>
     610:	5e c0       	rjmp	.+188    	; 0x6ce <sc_timer_service_proceed+0x148>

		/* ... and process all used. */
		if (this->timers[i].pt_evid != NULL) {
     612:	af 81       	ldd	r26, Y+7	; 0x07
     614:	b8 85       	ldd	r27, Y+8	; 0x08
     616:	a8 0f       	add	r26, r24
     618:	b9 1f       	adc	r27, r25
     61a:	19 96       	adiw	r26, 0x09	; 9
     61c:	2d 91       	ld	r18, X+
     61e:	3c 91       	ld	r19, X
     620:	1a 97       	sbiw	r26, 0x0a	; 10
     622:	3e 83       	std	Y+6, r19	; 0x06
     624:	2d 83       	std	Y+5, r18	; 0x05
     626:	23 2b       	or	r18, r19
     628:	09 f3       	breq	.-62     	; 0x5ec <sc_timer_service_proceed+0x66>

			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
     62a:	15 96       	adiw	r26, 0x05	; 5
     62c:	4d 90       	ld	r4, X+
     62e:	5d 90       	ld	r5, X+
     630:	6d 90       	ld	r6, X+
     632:	7c 90       	ld	r7, X
     634:	18 97       	sbiw	r26, 0x08	; 8
     636:	0d 91       	ld	r16, X+
     638:	1d 91       	ld	r17, X+
     63a:	2d 91       	ld	r18, X+
     63c:	3c 91       	ld	r19, X
     63e:	13 97       	sbiw	r26, 0x03	; 3
     640:	40 16       	cp	r4, r16
     642:	51 06       	cpc	r5, r17
     644:	62 06       	cpc	r6, r18
     646:	73 06       	cpc	r7, r19
     648:	8c f6       	brge	.-94     	; 0x5ec <sc_timer_service_proceed+0x66>
				this->timers[i].elapsed_time_ms += time_ms;
     64a:	49 81       	ldd	r20, Y+1	; 0x01
     64c:	5a 81       	ldd	r21, Y+2	; 0x02
     64e:	6b 81       	ldd	r22, Y+3	; 0x03
     650:	7c 81       	ldd	r23, Y+4	; 0x04
     652:	44 0e       	add	r4, r20
     654:	55 1e       	adc	r5, r21
     656:	66 1e       	adc	r6, r22
     658:	77 1e       	adc	r7, r23
     65a:	15 96       	adiw	r26, 0x05	; 5
     65c:	4d 92       	st	X+, r4
     65e:	5d 92       	st	X+, r5
     660:	6d 92       	st	X+, r6
     662:	7c 92       	st	X, r7
     664:	18 97       	sbiw	r26, 0x08	; 8

				if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
     666:	40 16       	cp	r4, r16
     668:	51 06       	cpc	r5, r17
     66a:	62 06       	cpc	r6, r18
     66c:	73 06       	cpc	r7, r19
     66e:	0c f4       	brge	.+2      	; 0x672 <sc_timer_service_proceed+0xec>
     670:	bd cf       	rjmp	.-134    	; 0x5ec <sc_timer_service_proceed+0x66>


/*! Callback that is called when a timer fires. */
static void sc_timer_fired(sc_timer_t *timer) {

	timer->service->raise_event(timer->handle, timer->pt_evid);
     672:	1d 96       	adiw	r26, 0x0d	; 13
     674:	ed 91       	ld	r30, X+
     676:	fc 91       	ld	r31, X
     678:	1e 97       	sbiw	r26, 0x0e	; 14
     67a:	06 80       	ldd	r0, Z+6	; 0x06
     67c:	f7 81       	ldd	r31, Z+7	; 0x07
     67e:	e0 2d       	mov	r30, r0
     680:	6d 81       	ldd	r22, Y+5	; 0x05
     682:	7e 81       	ldd	r23, Y+6	; 0x06
     684:	1b 96       	adiw	r26, 0x0b	; 11
     686:	8d 91       	ld	r24, X+
     688:	9c 91       	ld	r25, X
     68a:	1c 97       	sbiw	r26, 0x0c	; 12
     68c:	09 95       	icall
			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
				this->timers[i].elapsed_time_ms += time_ms;

				if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
					sc_timer_fired(&(this->timers[i]));
					if (this->timers[i].periodic) {
     68e:	f1 01       	movw	r30, r2
     690:	84 81       	ldd	r24, Z+4	; 0x04
     692:	95 81       	ldd	r25, Z+5	; 0x05
     694:	ef 81       	ldd	r30, Y+7	; 0x07
     696:	f8 85       	ldd	r31, Y+8	; 0x08
     698:	e8 0f       	add	r30, r24
     69a:	f9 1f       	adc	r31, r25
     69c:	24 81       	ldd	r18, Z+4	; 0x04
     69e:	22 23       	and	r18, r18
     6a0:	81 f0       	breq	.+32     	; 0x6c2 <sc_timer_service_proceed+0x13c>
						this->timers[i].elapsed_time_ms -= this->timers[i].time_ms;
     6a2:	45 81       	ldd	r20, Z+5	; 0x05
     6a4:	56 81       	ldd	r21, Z+6	; 0x06
     6a6:	67 81       	ldd	r22, Z+7	; 0x07
     6a8:	70 85       	ldd	r23, Z+8	; 0x08
     6aa:	00 81       	ld	r16, Z
     6ac:	11 81       	ldd	r17, Z+1	; 0x01
     6ae:	22 81       	ldd	r18, Z+2	; 0x02
     6b0:	33 81       	ldd	r19, Z+3	; 0x03
     6b2:	40 1b       	sub	r20, r16
     6b4:	51 0b       	sbc	r21, r17
     6b6:	62 0b       	sbc	r22, r18
     6b8:	73 0b       	sbc	r23, r19
     6ba:	45 83       	std	Z+5, r20	; 0x05
     6bc:	56 83       	std	Z+6, r21	; 0x06
     6be:	67 83       	std	Z+7, r22	; 0x07
     6c0:	70 87       	std	Z+8, r23	; 0x08
     6c2:	f1 01       	movw	r30, r2
     6c4:	80 80       	ld	r8, Z
     6c6:	91 80       	ldd	r9, Z+1	; 0x01
     6c8:	a2 80       	ldd	r10, Z+2	; 0x02
     6ca:	b3 80       	ldd	r11, Z+3	; 0x03
     6cc:	8f cf       	rjmp	.-226    	; 0x5ec <sc_timer_service_proceed+0x66>
				}
			}
		}
	}

}
     6ce:	28 96       	adiw	r28, 0x08	; 8
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	3f 90       	pop	r3
     6fc:	2f 90       	pop	r2
     6fe:	08 95       	ret

00000700 <state_chart_setTimer>:
#define CYCLE_PERIOD 10 //number of milliseconds that pass between each statechart cycle<br>
static sc_timer_service_t timer_service;
static sc_timer_t timers[MAX_TIMERS];

//! callback implementation for the setting up time events
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
     700:	4f 92       	push	r4
     702:	5f 92       	push	r5
     704:	6f 92       	push	r6
     706:	7f 92       	push	r7
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	db 01       	movw	r26, r22
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     71c:	c0 90 5a 02 	lds	r12, 0x025A
     720:	d0 90 5b 02 	lds	r13, 0x025B
     724:	e0 90 5c 02 	lds	r14, 0x025C
     728:	f0 90 5d 02 	lds	r15, 0x025D
     72c:	1c 14       	cp	r1, r12
     72e:	1d 04       	cpc	r1, r13
     730:	1e 04       	cpc	r1, r14
     732:	1f 04       	cpc	r1, r15
     734:	fc f4       	brge	.+62     	; 0x774 <state_chart_setTimer+0x74>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {
     736:	c0 91 5e 02 	lds	r28, 0x025E
     73a:	d0 91 5f 02 	lds	r29, 0x025F
     73e:	69 85       	ldd	r22, Y+9	; 0x09
     740:	7a 85       	ldd	r23, Y+10	; 0x0a
     742:	67 2b       	or	r22, r23
     744:	29 f1       	breq	.+74     	; 0x790 <state_chart_setTimer+0x90>
     746:	fe 01       	movw	r30, r28
     748:	3f 96       	adiw	r30, 0x0f	; 15
     74a:	41 2c       	mov	r4, r1
     74c:	51 2c       	mov	r5, r1
     74e:	32 01       	movw	r6, r4
     750:	43 94       	inc	r4
     752:	0b c0       	rjmp	.+22     	; 0x76a <state_chart_setTimer+0x6a>
     754:	ef 01       	movw	r28, r30
     756:	6f ef       	ldi	r22, 0xFF	; 255
     758:	46 1a       	sub	r4, r22
     75a:	56 0a       	sbc	r5, r22
     75c:	66 0a       	sbc	r6, r22
     75e:	76 0a       	sbc	r7, r22
     760:	3f 96       	adiw	r30, 0x0f	; 15
     762:	a9 84       	ldd	r10, Y+9	; 0x09
     764:	ba 84       	ldd	r11, Y+10	; 0x0a
     766:	ab 28       	or	r10, r11
     768:	99 f0       	breq	.+38     	; 0x790 <state_chart_setTimer+0x90>
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     76a:	4c 14       	cp	r4, r12
     76c:	5d 04       	cpc	r5, r13
     76e:	6e 04       	cpc	r6, r14
     770:	7f 04       	cpc	r7, r15
     772:	81 f7       	brne	.-32     	; 0x754 <state_chart_setTimer+0x54>
static sc_timer_t timers[MAX_TIMERS];

//! callback implementation for the setting up time events
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
    sc_timer_start(&timer_service, (void*) handle, evid, time_ms, periodic);
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	7f 90       	pop	r7
     788:	6f 90       	pop	r6
     78a:	5f 90       	pop	r5
     78c:	4f 90       	pop	r4
     78e:	08 95       	ret

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {

			/* set timer properties */
			this->timers[i].pt_evid = evid;
     790:	ba 87       	std	Y+10, r27	; 0x0a
     792:	a9 87       	std	Y+9, r26	; 0x09
			this->timers[i].time_ms = time_ms;
     794:	28 83       	st	Y, r18
     796:	39 83       	std	Y+1, r19	; 0x01
     798:	4a 83       	std	Y+2, r20	; 0x02
     79a:	5b 83       	std	Y+3, r21	; 0x03
			this->timers[i].periodic = periodic;
     79c:	0c 83       	std	Y+4, r16	; 0x04
			this->timers[i].handle = handle;
     79e:	9c 87       	std	Y+12, r25	; 0x0c
     7a0:	8b 87       	std	Y+11, r24	; 0x0b
			this->timers[i].service = this;
     7a2:	8a e5       	ldi	r24, 0x5A	; 90
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	9e 87       	std	Y+14, r25	; 0x0e
     7a8:	8d 87       	std	Y+13, r24	; 0x0d

			// reset the elapsed time ...
			this->timers[i].elapsed_time_ms = 0;
     7aa:	1d 82       	std	Y+5, r1	; 0x05
     7ac:	1e 82       	std	Y+6, r1	; 0x06
     7ae:	1f 82       	std	Y+7, r1	; 0x07
     7b0:	18 86       	std	Y+8, r1	; 0x08
     7b2:	e0 cf       	rjmp	.-64     	; 0x774 <state_chart_setTimer+0x74>

000007b4 <state_chart_unsetTimer>:
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
    sc_timer_start(&timer_service, (void*) handle, evid, time_ms, periodic);
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	8b 01       	movw	r16, r22
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
     7be:	40 91 5a 02 	lds	r20, 0x025A
     7c2:	50 91 5b 02 	lds	r21, 0x025B
     7c6:	60 91 5c 02 	lds	r22, 0x025C
     7ca:	70 91 5d 02 	lds	r23, 0x025D
     7ce:	14 16       	cp	r1, r20
     7d0:	15 06       	cpc	r1, r21
     7d2:	16 06       	cpc	r1, r22
     7d4:	17 06       	cpc	r1, r23
     7d6:	0c f5       	brge	.+66     	; 0x81a <state_chart_unsetTimer+0x66>
		if (this->timers[i].pt_evid == evid) {
     7d8:	e0 91 5e 02 	lds	r30, 0x025E
     7dc:	f0 91 5f 02 	lds	r31, 0x025F
     7e0:	81 85       	ldd	r24, Z+9	; 0x09
     7e2:	92 85       	ldd	r25, Z+10	; 0x0a
     7e4:	08 17       	cp	r16, r24
     7e6:	19 07       	cpc	r17, r25
     7e8:	e9 f0       	breq	.+58     	; 0x824 <state_chart_unsetTimer+0x70>
     7ea:	9f 01       	movw	r18, r30
     7ec:	21 5f       	subi	r18, 0xF1	; 241
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	0b c0       	rjmp	.+22     	; 0x810 <state_chart_unsetTimer+0x5c>
     7fa:	f9 01       	movw	r30, r18
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	a1 1d       	adc	r26, r1
     800:	b1 1d       	adc	r27, r1
     802:	21 5f       	subi	r18, 0xF1	; 241
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	c1 85       	ldd	r28, Z+9	; 0x09
     808:	d2 85       	ldd	r29, Z+10	; 0x0a
     80a:	0c 17       	cp	r16, r28
     80c:	1d 07       	cpc	r17, r29
     80e:	51 f0       	breq	.+20     	; 0x824 <state_chart_unsetTimer+0x70>
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
     810:	84 17       	cp	r24, r20
     812:	95 07       	cpc	r25, r21
     814:	a6 07       	cpc	r26, r22
     816:	b7 07       	cpc	r27, r23
     818:	81 f7       	brne	.-32     	; 0x7fa <state_chart_unsetTimer+0x46>
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
    sc_timer_cancel(&timer_service, evid);
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret
	int i;

	for (i = 0; i < this->timer_count; i++) {
		if (this->timers[i].pt_evid == evid) {

			this->timers[i].pt_evid = NULL;
     824:	12 86       	std	Z+10, r1	; 0x0a
     826:	11 86       	std	Z+9, r1	; 0x09
			this->timers[i].handle = NULL;
     828:	14 86       	std	Z+12, r1	; 0x0c
     82a:	13 86       	std	Z+11, r1	; 0x0b
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
    sc_timer_cancel(&timer_service, evid);
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <sc_timer_setup>:
void sc_timer_service_init(sc_timer_service_t *tservice,
	sc_timer_t *timers,
	sc_integer count,
	sc_raise_time_event_fp raise_event) {

	tservice->timers = timers;
     836:	8e e2       	ldi	r24, 0x2E	; 46
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	90 93 5f 02 	sts	0x025F, r25
     83e:	80 93 5e 02 	sts	0x025E, r24
	tservice->timer_count = count;
     842:	ea e5       	ldi	r30, 0x5A	; 90
     844:	f2 e0       	ldi	r31, 0x02	; 2
     846:	84 e1       	ldi	r24, 0x14	; 20
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	80 83       	st	Z, r24
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	a2 83       	std	Z+2, r26	; 0x02
     854:	b3 83       	std	Z+3, r27	; 0x03
     856:	10 92 38 01 	sts	0x0138, r1
     85a:	10 92 37 01 	sts	0x0137, r1
     85e:	f0 93 3c 01 	sts	0x013C, r31
     862:	e0 93 3b 01 	sts	0x013B, r30
	for (int i=0; i<count; i++) {
		tservice->timers->pt_evid = NULL;
		tservice->timers->service = tservice;
	}

	tservice->raise_event = raise_event;
     866:	8f ea       	ldi	r24, 0xAF	; 175
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 61 02 	sts	0x0261, r25
     86e:	80 93 60 02 	sts	0x0260, r24
     872:	08 95       	ret

00000874 <sc_timer_increment>:
								(sc_raise_time_event_fp) &state_chart_raiseTimeEvent);
}


void sc_timer_increment(const sc_integer time_ms)
{
     874:	ab 01       	movw	r20, r22
     876:	bc 01       	movw	r22, r24
	sc_timer_service_proceed(&timer_service, time_ms);
     878:	8a e5       	ldi	r24, 0x5A	; 90
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	0c 94 c3 02 	jmp	0x586	; 0x586 <sc_timer_service_proceed>

00000880 <adcInit>:
#include "adc.h"

void adcInit(uint8_t Input)
{
	//Make an input pin
	DDRC &= ~(1<<Input);
     880:	97 b1       	in	r25, 0x07	; 7
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	08 2e       	mov	r0, r24
     888:	01 c0       	rjmp	.+2      	; 0x88c <adcInit+0xc>
     88a:	22 0f       	add	r18, r18
     88c:	0a 94       	dec	r0
     88e:	ea f7       	brpl	.-6      	; 0x88a <adcInit+0xa>
     890:	20 95       	com	r18
     892:	29 23       	and	r18, r25
     894:	27 b9       	out	0x07, r18	; 7

	//Connect Input  to ADC
	ADMUX = Input;
     896:	ec e7       	ldi	r30, 0x7C	; 124
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 83       	st	Z, r24

	//use AVcc as ref voltage
	ADMUX |= (1<<REFS0);
     89c:	80 81       	ld	r24, Z
     89e:	80 64       	ori	r24, 0x40	; 64
     8a0:	80 83       	st	Z, r24

	//8 bit result
	ADMUX |= (1<<ADLAR);
     8a2:	80 81       	ld	r24, Z
     8a4:	80 62       	ori	r24, 0x20	; 32
     8a6:	80 83       	st	Z, r24

	//128 prescale = 125kHz ADC clock
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2));
     8a8:	ea e7       	ldi	r30, 0x7A	; 122
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	87 60       	ori	r24, 0x07	; 7
     8b0:	80 83       	st	Z, r24

	//switch on ADC
	ADCSRA |= (1<<ADEN);
     8b2:	80 81       	ld	r24, Z
     8b4:	80 68       	ori	r24, 0x80	; 128
     8b6:	80 83       	st	Z, r24
     8b8:	08 95       	ret

000008ba <adcRead>:
uint16_t adcRead(void)
{
	uint16_t adcOut;

	//start conversion
	ADCSRA |= (1<<ADSC);
     8ba:	80 91 7a 00 	lds	r24, 0x007A
     8be:	80 64       	ori	r24, 0x40	; 64
     8c0:	80 93 7a 00 	sts	0x007A, r24

	//wait for ADC to complete
	//wait until ADSC bit goes low
	while(ADCSRA & (1<<ADSC))
     8c4:	80 91 7a 00 	lds	r24, 0x007A
     8c8:	86 fd       	sbrc	r24, 6
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <adcRead+0xa>
	{

	}

	//ADC is complete - grab result...
	adcOut = ADCH;
     8cc:	80 91 79 00 	lds	r24, 0x0079

	return adcOut;

}
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	08 95       	ret

000008d4 <keypadSetupPins>:
 * and drive the col pin
 */
void keypadSetupPins(void)
{
	//SET column pin as output
	COL_DIR |= ((1<<COL_1_PIN)|(1<<COL_2_PIN)|(1<<COL_3_PIN));
     8d4:	84 b1       	in	r24, 0x04	; 4
     8d6:	8c 61       	ori	r24, 0x1C	; 28
     8d8:	84 b9       	out	0x04, r24	; 4

	//Set rows pin as Inputs
	ROW_DIR &= ~((1<<ROW_1_PIN | 1<<ROW_2_PIN | 1<<ROW_3_PIN | 1<<ROW_4_PIN));
     8da:	87 b1       	in	r24, 0x07	; 7
     8dc:	80 7f       	andi	r24, 0xF0	; 240
     8de:	87 b9       	out	0x07, r24	; 7

	//Enable Pullups resistor on row pin
	ROW_PORT |= ((1<<ROW_1_PIN | 1<<ROW_2_PIN | 1<<ROW_3_PIN | 1<<ROW_4_PIN));
     8e0:	88 b1       	in	r24, 0x08	; 8
     8e2:	8f 60       	ori	r24, 0x0F	; 15
     8e4:	88 b9       	out	0x08, r24	; 8

	//Send out three 0's on columns
	COL_PORT |= ((1<<COL_1_PIN)|(1<<COL_2_PIN)|(1<<COL_3_PIN));
     8e6:	85 b1       	in	r24, 0x05	; 5
     8e8:	8c 61       	ori	r24, 0x1C	; 28
     8ea:	85 b9       	out	0x05, r24	; 5
     8ec:	08 95       	ret

000008ee <keypadGetKeyPressed>:
/* displays the key's pressed in the lcd*/
{
	char rValue =0;
	//send 011 on the col
	// send 0 on the col 1
	COL_PORT &=~ (1<<COL_1_PIN);
     8ee:	2a 98       	cbi	0x05, 2	; 5
	//Send out 11 on col 2 and 3
	COL_PORT |= ((1<<COL_2_PIN) | (1<<COL_3_PIN)) ;
     8f0:	85 b1       	in	r24, 0x05	; 5
     8f2:	88 61       	ori	r24, 0x18	; 24
     8f4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f6:	8f e9       	ldi	r24, 0x9F	; 159
     8f8:	9f e0       	ldi	r25, 0x0F	; 15
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <keypadGetKeyPressed+0xc>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0x1>
     900:	00 00       	nop
	//CRUCIAL - delay allow value to propagate
	_delay_ms(1);


	//Test row 1
	if(!(ROW_INPUT & (1<<ROW_1_PIN)))
     902:	30 9b       	sbis	0x06, 0	; 6
     904:	2b c0       	rjmp	.+86     	; 0x95c <__stack+0x5d>
 * Sets all the cols to low when done.
 */
char keypadGetKeyPressed(void)
/* displays the key's pressed in the lcd*/
{
	char rValue =0;
     906:	80 e0       	ldi	r24, 0x00	; 0
		rValue = '1';

	}

	//Test row 2
	if(!(ROW_INPUT & (1<<ROW_2_PIN)))
     908:	31 9b       	sbis	0x06, 1	; 6
	{
		//there is a 1 on row pin 2
		rValue = '4';
     90a:	84 e3       	ldi	r24, 0x34	; 52
	}

	//Test row 3
	if(!(ROW_INPUT & (1<<ROW_3_PIN)))
     90c:	32 9b       	sbis	0x06, 2	; 6
	{
		//there is a 7 on row pin 3
		rValue = '7';
     90e:	87 e3       	ldi	r24, 0x37	; 55
	}
	if(!(ROW_INPUT & (1<<ROW_4_PIN)))
     910:	33 9b       	sbis	0x06, 3	; 6
		{
			//there is a * on row pin 4
			rValue = '*';
     912:	8a e2       	ldi	r24, 0x2A	; 42
		}

	//send 101 on the co2
	//send 0 on col 2
	COL_PORT &= ~ (1<<COL_2_PIN);
     914:	2b 98       	cbi	0x05, 3	; 5
	// Send 11 on the col 1 and 3
	COL_PORT |= ((1<<COL_1_PIN) | (1<<COL_3_PIN));
     916:	95 b1       	in	r25, 0x05	; 5
     918:	94 61       	ori	r25, 0x14	; 20
     91a:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91c:	95 e0       	ldi	r25, 0x05	; 5
     91e:	9a 95       	dec	r25
     920:	f1 f7       	brne	.-4      	; 0x91e <__stack+0x1f>
     922:	00 00       	nop

	_delay_us(1);

	//Test row 1
	if(!(ROW_INPUT & (1<<ROW_1_PIN)))
     924:	30 9b       	sbis	0x06, 0	; 6
	{
		//there is a 2 on row pin 1
		rValue = '2';
     926:	82 e3       	ldi	r24, 0x32	; 50
	}

	//Test row 2
	if(!(ROW_INPUT & (1<<ROW_2_PIN)))
     928:	31 9b       	sbis	0x06, 1	; 6
	{
		//there is a 5 on row pin 2
		rValue = '5';
     92a:	85 e3       	ldi	r24, 0x35	; 53
	}

	//Test row 3
	if(!(ROW_INPUT & (1<<ROW_3_PIN)))
     92c:	32 9b       	sbis	0x06, 2	; 6
	{
		//there is a 8 on row pin 3
		rValue = '8';
     92e:	88 e3       	ldi	r24, 0x38	; 56
	}

	//Test row 4
	if(!(ROW_INPUT & (1<<ROW_4_PIN)))
     930:	33 9b       	sbis	0x06, 3	; 6
		{
			//there is a 0 on row pin 4
			rValue = '0';
     932:	80 e3       	ldi	r24, 0x30	; 48
		}

	//send 110 on the column 3
	//send 0 on col 3
	COL_PORT &= ~ (1<<COL_3_PIN);
     934:	2c 98       	cbi	0x05, 4	; 5
	// Send 11 on the col 1 and 2
	COL_PORT |= ((1<<COL_1_PIN) | (1<<COL_2_PIN));
     936:	95 b1       	in	r25, 0x05	; 5
     938:	9c 60       	ori	r25, 0x0C	; 12
     93a:	95 b9       	out	0x05, r25	; 5
     93c:	95 e0       	ldi	r25, 0x05	; 5
     93e:	9a 95       	dec	r25
     940:	f1 f7       	brne	.-4      	; 0x93e <__stack+0x3f>
     942:	00 00       	nop

	_delay_us(1);

	//Test row 1
	if(!(ROW_INPUT & (1<<ROW_1_PIN)))
     944:	30 9b       	sbis	0x06, 0	; 6
	{
		//there is a 3 on row pin 1
		rValue = '3';
     946:	83 e3       	ldi	r24, 0x33	; 51

	}

	//Test row 2
	if(!(ROW_INPUT & (1<<ROW_2_PIN)))
     948:	31 9b       	sbis	0x06, 1	; 6
	{
		//there is a 6 on row pin 2
		rValue = '6';
     94a:	86 e3       	ldi	r24, 0x36	; 54
	}

	//Test row 3
	if(!(ROW_INPUT & (1<<ROW_3_PIN)))
     94c:	32 9b       	sbis	0x06, 2	; 6
	{
		//there is a 9 on row pin 3
		rValue = '9';
     94e:	89 e3       	ldi	r24, 0x39	; 57
	}


	//Test row 4
	if(!(ROW_INPUT & (1<<ROW_4_PIN)))
     950:	33 9b       	sbis	0x06, 3	; 6
		{
		////there is a # on row 4 pin
		rValue = '#';
     952:	83 e2       	ldi	r24, 0x23	; 35

		}
	//Send out three 0's on columns
		COL_PORT &= ~((1<<COL_1_PIN)|(1<<COL_2_PIN)|(1<<COL_3_PIN));
     954:	95 b1       	in	r25, 0x05	; 5
     956:	93 7e       	andi	r25, 0xE3	; 227
     958:	95 b9       	out	0x05, r25	; 5

	return rValue;
}
     95a:	08 95       	ret

	//Test row 1
	if(!(ROW_INPUT & (1<<ROW_1_PIN)))
	{
		//there is a 1 on row pin 1
		rValue = '1';
     95c:	81 e3       	ldi	r24, 0x31	; 49
     95e:	d4 cf       	rjmp	.-88     	; 0x908 <__stack+0x9>

00000960 <main>:

static State_chart sc;


int main(void)
{
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	00 d0       	rcall	.+0      	; 0x966 <main+0x6>
     966:	00 d0       	rcall	.+0      	; 0x968 <main+0x8>
     968:	1f 92       	push	r1
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
	millisInit();
     96e:	0e 94 6b 05 	call	0xad6	; 0xad6 <millisInit>
	adcInit(4);
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	0e 94 40 04 	call	0x880	; 0x880 <adcInit>
	usartInit();
     978:	0e 94 ae 05 	call	0xb5c	; 0xb5c <usartInit>
	char array[5];
	DDRB|=(1<<5);
     97c:	25 9a       	sbi	0x04, 5	; 4
	static char keypressed, oldkeypressed=0;			//initializing variables
	uint16_t lumValue = 0;
	keypadSetupPins();
     97e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <keypadSetupPins>


	sc_timer_setup();  //setup the statechart timers
     982:	0e 94 1b 04 	call	0x836	; 0x836 <sc_timer_setup>

	state_chart_init(&sc); //initialize statechart
     986:	84 e6       	ldi	r24, 0x64	; 100
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	0e 94 a0 00 	call	0x140	; 0x140 <state_chart_init>
	state_chart_enter(&sc); //enter the statechart
     98e:	84 e6       	ldi	r24, 0x64	; 100
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 ac 00 	call	0x158	; 0x158 <state_chart_enter>
    uint32_t KeypadScan =millis()+KeypadInterval;
     996:	0e 94 a3 05 	call	0xb46	; 0xb46 <millis>
     99a:	4b 01       	movw	r8, r22
     99c:	5c 01       	movw	r10, r24
     99e:	84 e1       	ldi	r24, 0x14	; 20
     9a0:	88 0e       	add	r8, r24
     9a2:	91 1c       	adc	r9, r1
     9a4:	a1 1c       	adc	r10, r1
     9a6:	b1 1c       	adc	r11, r1
     9a8:	8e 01       	movw	r16, r28
     9aa:	0f 5f       	subi	r16, 0xFF	; 255
     9ac:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				else
				{
					state_chartIface_raise_bRIGHT(&sc);
					usartSendString(" Current Value of ADC ");
					sprintf(array,"%i",lumValue);
     9ae:	87 e1       	ldi	r24, 0x17	; 23
     9b0:	e8 2e       	mov	r14, r24
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	f8 2e       	mov	r15, r24
					usartSendString(array);
					usartSendString(" ThresholdValue is ");
					sprintf(array,"%i",ThresholdValue);
     9b6:	98 e7       	ldi	r25, 0x78	; 120
     9b8:	79 2e       	mov	r7, r25
     9ba:	4b c0       	rjmp	.+150    	; 0xa52 <main+0xf2>
				{
					keypressed=keypadGetKeyPressed();
					KeypadScan =millis()+KeypadInterval;
				}

				if ((keypressed != 0) &&  (keypressed != oldkeypressed))
     9bc:	90 91 62 02 	lds	r25, 0x0262
     9c0:	89 17       	cp	r24, r25
     9c2:	49 f0       	breq	.+18     	; 0x9d6 <main+0x76>
						{
							if (keypressed == '1')
     9c4:	81 33       	cpi	r24, 0x31	; 49
     9c6:	09 f4       	brne	.+2      	; 0x9ca <main+0x6a>
     9c8:	6b c0       	rjmp	.+214    	; 0xaa0 <main+0x140>
							{
								state_chartIface_raise_oN(&sc);
							}

							else if (keypressed == '2')
     9ca:	82 33       	cpi	r24, 0x32	; 50
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <main+0x70>
     9ce:	6f c0       	rjmp	.+222    	; 0xaae <main+0x14e>
							{
								state_chartIface_raise_oFF(&sc);
							}

							else if (keypressed == '3')
     9d0:	83 33       	cpi	r24, 0x33	; 51
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <main+0x76>
     9d4:	73 c0       	rjmp	.+230    	; 0xabc <main+0x15c>
							{
								state_chartIface_raise_mODE(&sc);  // mode state
							}
						}
				oldkeypressed = keypressed;
     9d6:	80 93 62 02 	sts	0x0262, r24
				lumValue = adcRead();
     9da:	0e 94 5d 04 	call	0x8ba	; 0x8ba <adcRead>
     9de:	6c 01       	movw	r12, r24
				if(lumValue < ThresholdValue)
     9e0:	88 e7       	ldi	r24, 0x78	; 120
     9e2:	c8 16       	cp	r12, r24
     9e4:	d1 04       	cpc	r13, r1
     9e6:	08 f0       	brcs	.+2      	; 0x9ea <main+0x8a>
     9e8:	48 c0       	rjmp	.+144    	; 0xa7a <main+0x11a>
				{
					state_chartIface_raise_dARK(&sc);
     9ea:	84 e6       	ldi	r24, 0x64	; 100
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 06 02 	call	0x40c	; 0x40c <state_chartIface_raise_dARK>
					usartSendChar('\n');
				}
				else
				{
					state_chartIface_raise_bRIGHT(&sc);
					usartSendString(" Current Value of ADC ");
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <usartSendString>
					sprintf(array,"%i",lumValue);
     9fa:	df 92       	push	r13
     9fc:	cf 92       	push	r12
     9fe:	ff 92       	push	r15
     a00:	ef 92       	push	r14
     a02:	1f 93       	push	r17
     a04:	0f 93       	push	r16
     a06:	0e 94 e6 05 	call	0xbcc	; 0xbcc <sprintf>
					usartSendString(array);
     a0a:	c8 01       	movw	r24, r16
     a0c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <usartSendString>
					usartSendString(" ThresholdValue is ");
     a10:	8a e1       	ldi	r24, 0x1A	; 26
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 c7 05 	call	0xb8e	; 0xb8e <usartSendString>
					sprintf(array,"%i",ThresholdValue);
     a18:	1f 92       	push	r1
     a1a:	7f 92       	push	r7
     a1c:	ff 92       	push	r15
     a1e:	ef 92       	push	r14
     a20:	1f 93       	push	r17
     a22:	0f 93       	push	r16
     a24:	0e 94 e6 05 	call	0xbcc	; 0xbcc <sprintf>
					usartSendString(array);
     a28:	c8 01       	movw	r24, r16
     a2a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <usartSendString>
					usartSendChar('\n');
     a2e:	8a e0       	ldi	r24, 0x0A	; 10
     a30:	0e 94 c0 05 	call	0xb80	; 0xb80 <usartSendChar>
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61

				}


				sc_timer_increment(50);
     a3e:	62 e3       	ldi	r22, 0x32	; 50
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 3a 04 	call	0x874	; 0x874 <sc_timer_increment>
				state_chart_runCycle(&sc);
     a4a:	84 e6       	ldi	r24, 0x64	; 100
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <state_chart_runCycle>
    uint32_t KeypadScan =millis()+KeypadInterval;

			while(1)
			{

				sleep_mode();//cpu frozen
     a52:	83 b7       	in	r24, 0x33	; 51
     a54:	81 60       	ori	r24, 0x01	; 1
     a56:	83 bf       	out	0x33, r24	; 51
     a58:	88 95       	sleep
     a5a:	83 b7       	in	r24, 0x33	; 51
     a5c:	8e 7f       	andi	r24, 0xFE	; 254
     a5e:	83 bf       	out	0x33, r24	; 51

				if(millis()>= KeypadScan)
     a60:	0e 94 a3 05 	call	0xb46	; 0xb46 <millis>
     a64:	68 15       	cp	r22, r8
     a66:	79 05       	cpc	r23, r9
     a68:	8a 05       	cpc	r24, r10
     a6a:	9b 05       	cpc	r25, r11
     a6c:	58 f4       	brcc	.+22     	; 0xa84 <main+0x124>
				{
					keypressed=keypadGetKeyPressed();
					KeypadScan =millis()+KeypadInterval;
				}

				if ((keypressed != 0) &&  (keypressed != oldkeypressed))
     a6e:	80 91 63 02 	lds	r24, 0x0263
     a72:	81 11       	cpse	r24, r1
     a74:	a3 cf       	rjmp	.-186    	; 0x9bc <main+0x5c>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	ae cf       	rjmp	.-164    	; 0x9d6 <main+0x76>
					usartSendString(array);
					usartSendChar('\n');
				}
				else
				{
					state_chartIface_raise_bRIGHT(&sc);
     a7a:	84 e6       	ldi	r24, 0x64	; 100
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	0e 94 0a 02 	call	0x414	; 0x414 <state_chartIface_raise_bRIGHT>
     a82:	b7 cf       	rjmp	.-146    	; 0x9f2 <main+0x92>

				sleep_mode();//cpu frozen

				if(millis()>= KeypadScan)
				{
					keypressed=keypadGetKeyPressed();
     a84:	0e 94 77 04 	call	0x8ee	; 0x8ee <keypadGetKeyPressed>
     a88:	80 93 63 02 	sts	0x0263, r24
					KeypadScan =millis()+KeypadInterval;
     a8c:	0e 94 a3 05 	call	0xb46	; 0xb46 <millis>
     a90:	4b 01       	movw	r8, r22
     a92:	5c 01       	movw	r10, r24
     a94:	94 e1       	ldi	r25, 0x14	; 20
     a96:	89 0e       	add	r8, r25
     a98:	91 1c       	adc	r9, r1
     a9a:	a1 1c       	adc	r10, r1
     a9c:	b1 1c       	adc	r11, r1
     a9e:	e7 cf       	rjmp	.-50     	; 0xa6e <main+0x10e>

				if ((keypressed != 0) &&  (keypressed != oldkeypressed))
						{
							if (keypressed == '1')
							{
								state_chartIface_raise_oN(&sc);
     aa0:	84 e6       	ldi	r24, 0x64	; 100
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <state_chartIface_raise_oN>
     aa8:	80 91 63 02 	lds	r24, 0x0263
     aac:	94 cf       	rjmp	.-216    	; 0x9d6 <main+0x76>
							}

							else if (keypressed == '2')
							{
								state_chartIface_raise_oFF(&sc);
     aae:	84 e6       	ldi	r24, 0x64	; 100
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <state_chartIface_raise_oFF>
     ab6:	80 91 63 02 	lds	r24, 0x0263
     aba:	8d cf       	rjmp	.-230    	; 0x9d6 <main+0x76>
							}

							else if (keypressed == '3')
							{
								state_chartIface_raise_mODE(&sc);  // mode state
     abc:	84 e6       	ldi	r24, 0x64	; 100
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	0e 94 02 02 	call	0x404	; 0x404 <state_chartIface_raise_mODE>
     ac4:	80 91 63 02 	lds	r24, 0x0263
     ac8:	86 cf       	rjmp	.-244    	; 0x9d6 <main+0x76>

00000aca <state_chartIface_setLight>:
}
}
//Functions from State_chartRequired.h
void state_chartIface_setLight(const State_chart* handle, const sc_boolean lightOn)
{
    if(lightOn)
     aca:	61 11       	cpse	r22, r1
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <state_chartIface_setLight+0x8>
        PORTB |= (1<<5);
    else
    	PORTB &= ~(1<<5);
     ace:	2d 98       	cbi	0x05, 5	; 5
     ad0:	08 95       	ret
}
//Functions from State_chartRequired.h
void state_chartIface_setLight(const State_chart* handle, const sc_boolean lightOn)
{
    if(lightOn)
        PORTB |= (1<<5);
     ad2:	2d 9a       	sbi	0x05, 5	; 5
     ad4:	08 95       	ret

00000ad6 <millisInit>:
 * Initialise elapsedMillis to zero.
 * Set correct prescale and start timer.
 */
void millisInit(void)
{
	TCCR0A = (1<<WGM01);  // compare to capture mode
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<OCIE0A); // set interrupts
     ada:	80 93 6e 00 	sts	0x006E, r24
	sei();   // enable global interrupt
     ade:	78 94       	sei
	TCNT0 = 0;
     ae0:	16 bc       	out	0x26, r1	; 38
	OCR0A = 249;  //divide system clockto find out exact count required
     ae2:	89 ef       	ldi	r24, 0xF9	; 249
     ae4:	87 bd       	out	0x27, r24	; 39
	elapsedMillis = 0;
     ae6:	10 92 6e 02 	sts	0x026E, r1
     aea:	10 92 6f 02 	sts	0x026F, r1
     aee:	10 92 70 02 	sts	0x0270, r1
     af2:	10 92 71 02 	sts	0x0271, r1
	TCCR0B = ((1<<CS01)|(1<<CS00)); //set prescaler to 64
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	85 bd       	out	0x25, r24	; 37
     afa:	08 95       	ret

00000afc <__vector_14>:
/*
 * Don't forget to write the ISR!
 */

ISR (TIMER0_COMPA_vect)
{
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27

	elapsedMillis++;
     b0e:	80 91 6e 02 	lds	r24, 0x026E
     b12:	90 91 6f 02 	lds	r25, 0x026F
     b16:	a0 91 70 02 	lds	r26, 0x0270
     b1a:	b0 91 71 02 	lds	r27, 0x0271
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	a1 1d       	adc	r26, r1
     b22:	b1 1d       	adc	r27, r1
     b24:	80 93 6e 02 	sts	0x026E, r24
     b28:	90 93 6f 02 	sts	0x026F, r25
     b2c:	a0 93 70 02 	sts	0x0270, r26
     b30:	b0 93 71 02 	sts	0x0271, r27
}
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <millis>:
   * Do you need to do anything to ensure this function works correctly in
   * that case?
   */
	uint32_t millis_time;

	cli();
     b46:	f8 94       	cli

	millis_time = elapsedMillis;
     b48:	60 91 6e 02 	lds	r22, 0x026E
     b4c:	70 91 6f 02 	lds	r23, 0x026F
     b50:	80 91 70 02 	lds	r24, 0x0270
     b54:	90 91 71 02 	lds	r25, 0x0271

	sei();
     b58:	78 94       	sei

	return millis_time;
}
     b5a:	08 95       	ret

00000b5c <usartInit>:

#include "usart.h"

void usartInit(void)
{
	UCSR0B |= ((1<<RXEN0) | (1<<TXEN0));
     b5c:	e1 ec       	ldi	r30, 0xC1	; 193
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	88 61       	ori	r24, 0x18	; 24
     b64:	80 83       	st	Z, r24

	UBRR0 = 0x68;
     b66:	88 e6       	ldi	r24, 0x68	; 104
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	90 93 c5 00 	sts	0x00C5, r25
     b6e:	80 93 c4 00 	sts	0x00C4, r24
     b72:	08 95       	ret

00000b74 <usartEnableRxInt>:
}

void usartEnableRxInt(void)
{
	UCSR0B |= (1<<RXCIE0);
     b74:	e1 ec       	ldi	r30, 0xC1	; 193
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	80 68       	ori	r24, 0x80	; 128
     b7c:	80 83       	st	Z, r24
     b7e:	08 95       	ret

00000b80 <usartSendChar>:
}

void usartSendChar(char c)
{
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     b80:	90 91 c0 00 	lds	r25, 0x00C0
     b84:	95 ff       	sbrs	r25, 5
     b86:	fc cf       	rjmp	.-8      	; 0xb80 <usartSendChar>
	UDR0 = c;
     b88:	80 93 c6 00 	sts	0x00C6, r24
     b8c:	08 95       	ret

00000b8e <usartSendString>:

void usartSendString(char string[])
{
	uint8_t i = 0;

	while(string[i] != '\0')
     b8e:	fc 01       	movw	r30, r24
     b90:	30 81       	ld	r19, Z
     b92:	33 23       	and	r19, r19
     b94:	71 f0       	breq	.+28     	; 0xbb2 <usartSendString+0x24>
	UDR0 = c;
}

void usartSendString(char string[])
{
	uint8_t i = 0;
     b96:	40 e0       	ldi	r20, 0x00	; 0

	while(string[i] != '\0')
	{
		usartSendChar(string[i++]);
     b98:	4f 5f       	subi	r20, 0xFF	; 255
	UCSR0B |= (1<<RXCIE0);
}

void usartSendChar(char c)
{
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     b9a:	20 91 c0 00 	lds	r18, 0x00C0
     b9e:	25 ff       	sbrs	r18, 5
     ba0:	fc cf       	rjmp	.-8      	; 0xb9a <usartSendString+0xc>
	UDR0 = c;
     ba2:	30 93 c6 00 	sts	0x00C6, r19

void usartSendString(char string[])
{
	uint8_t i = 0;

	while(string[i] != '\0')
     ba6:	fc 01       	movw	r30, r24
     ba8:	e4 0f       	add	r30, r20
     baa:	f1 1d       	adc	r31, r1
     bac:	30 81       	ld	r19, Z
     bae:	31 11       	cpse	r19, r1
     bb0:	f3 cf       	rjmp	.-26     	; 0xb98 <usartSendString+0xa>
     bb2:	08 95       	ret

00000bb4 <usartCharReceived>:

uint8_t usartCharReceived(void)
{
	uint8_t retVal = 0;

	if(UCSR0A & (1 << RXC0))
     bb4:	80 91 c0 00 	lds	r24, 0x00C0
	{
		retVal = 1;
	}

	return retVal;
}
     bb8:	88 1f       	adc	r24, r24
     bba:	88 27       	eor	r24, r24
     bbc:	88 1f       	adc	r24, r24
     bbe:	08 95       	ret

00000bc0 <__tablejump2__>:
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31

00000bc4 <__tablejump__>:
     bc4:	05 90       	lpm	r0, Z+
     bc6:	f4 91       	lpm	r31, Z
     bc8:	e0 2d       	mov	r30, r0
     bca:	09 94       	ijmp

00000bcc <sprintf>:
     bcc:	ae e0       	ldi	r26, 0x0E	; 14
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ec ee       	ldi	r30, 0xEC	; 236
     bd2:	f5 e0       	ldi	r31, 0x05	; 5
     bd4:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__prologue_saves__+0x1c>
     bd8:	0d 89       	ldd	r16, Y+21	; 0x15
     bda:	1e 89       	ldd	r17, Y+22	; 0x16
     bdc:	86 e0       	ldi	r24, 0x06	; 6
     bde:	8c 83       	std	Y+4, r24	; 0x04
     be0:	1a 83       	std	Y+2, r17	; 0x02
     be2:	09 83       	std	Y+1, r16	; 0x01
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	9f e7       	ldi	r25, 0x7F	; 127
     be8:	9e 83       	std	Y+6, r25	; 0x06
     bea:	8d 83       	std	Y+5, r24	; 0x05
     bec:	ae 01       	movw	r20, r28
     bee:	47 5e       	subi	r20, 0xE7	; 231
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	6f 89       	ldd	r22, Y+23	; 0x17
     bf4:	78 8d       	ldd	r23, Y+24	; 0x18
     bf6:	ce 01       	movw	r24, r28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	0e 94 08 06 	call	0xc10	; 0xc10 <vfprintf>
     bfe:	ef 81       	ldd	r30, Y+7	; 0x07
     c00:	f8 85       	ldd	r31, Y+8	; 0x08
     c02:	e0 0f       	add	r30, r16
     c04:	f1 1f       	adc	r31, r17
     c06:	10 82       	st	Z, r1
     c08:	2e 96       	adiw	r28, 0x0e	; 14
     c0a:	e4 e0       	ldi	r30, 0x04	; 4
     c0c:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__epilogue_restores__+0x1c>

00000c10 <vfprintf>:
     c10:	ac e0       	ldi	r26, 0x0C	; 12
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ee e0       	ldi	r30, 0x0E	; 14
     c16:	f6 e0       	ldi	r31, 0x06	; 6
     c18:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__prologue_saves__>
     c1c:	7c 01       	movw	r14, r24
     c1e:	6b 01       	movw	r12, r22
     c20:	8a 01       	movw	r16, r20
     c22:	fc 01       	movw	r30, r24
     c24:	17 82       	std	Z+7, r1	; 0x07
     c26:	16 82       	std	Z+6, r1	; 0x06
     c28:	83 81       	ldd	r24, Z+3	; 0x03
     c2a:	81 ff       	sbrs	r24, 1
     c2c:	bd c1       	rjmp	.+890    	; 0xfa8 <vfprintf+0x398>
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	4c 01       	movw	r8, r24
     c34:	f7 01       	movw	r30, r14
     c36:	93 81       	ldd	r25, Z+3	; 0x03
     c38:	f6 01       	movw	r30, r12
     c3a:	93 fd       	sbrc	r25, 3
     c3c:	85 91       	lpm	r24, Z+
     c3e:	93 ff       	sbrs	r25, 3
     c40:	81 91       	ld	r24, Z+
     c42:	6f 01       	movw	r12, r30
     c44:	88 23       	and	r24, r24
     c46:	09 f4       	brne	.+2      	; 0xc4a <vfprintf+0x3a>
     c48:	ab c1       	rjmp	.+854    	; 0xfa0 <vfprintf+0x390>
     c4a:	85 32       	cpi	r24, 0x25	; 37
     c4c:	39 f4       	brne	.+14     	; 0xc5c <vfprintf+0x4c>
     c4e:	93 fd       	sbrc	r25, 3
     c50:	85 91       	lpm	r24, Z+
     c52:	93 ff       	sbrs	r25, 3
     c54:	81 91       	ld	r24, Z+
     c56:	6f 01       	movw	r12, r30
     c58:	85 32       	cpi	r24, 0x25	; 37
     c5a:	29 f4       	brne	.+10     	; 0xc66 <vfprintf+0x56>
     c5c:	b7 01       	movw	r22, r14
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     c64:	e7 cf       	rjmp	.-50     	; 0xc34 <vfprintf+0x24>
     c66:	51 2c       	mov	r5, r1
     c68:	31 2c       	mov	r3, r1
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	20 32       	cpi	r18, 0x20	; 32
     c6e:	a0 f4       	brcc	.+40     	; 0xc98 <vfprintf+0x88>
     c70:	8b 32       	cpi	r24, 0x2B	; 43
     c72:	69 f0       	breq	.+26     	; 0xc8e <vfprintf+0x7e>
     c74:	30 f4       	brcc	.+12     	; 0xc82 <vfprintf+0x72>
     c76:	80 32       	cpi	r24, 0x20	; 32
     c78:	59 f0       	breq	.+22     	; 0xc90 <vfprintf+0x80>
     c7a:	83 32       	cpi	r24, 0x23	; 35
     c7c:	69 f4       	brne	.+26     	; 0xc98 <vfprintf+0x88>
     c7e:	20 61       	ori	r18, 0x10	; 16
     c80:	2c c0       	rjmp	.+88     	; 0xcda <vfprintf+0xca>
     c82:	8d 32       	cpi	r24, 0x2D	; 45
     c84:	39 f0       	breq	.+14     	; 0xc94 <vfprintf+0x84>
     c86:	80 33       	cpi	r24, 0x30	; 48
     c88:	39 f4       	brne	.+14     	; 0xc98 <vfprintf+0x88>
     c8a:	21 60       	ori	r18, 0x01	; 1
     c8c:	26 c0       	rjmp	.+76     	; 0xcda <vfprintf+0xca>
     c8e:	22 60       	ori	r18, 0x02	; 2
     c90:	24 60       	ori	r18, 0x04	; 4
     c92:	23 c0       	rjmp	.+70     	; 0xcda <vfprintf+0xca>
     c94:	28 60       	ori	r18, 0x08	; 8
     c96:	21 c0       	rjmp	.+66     	; 0xcda <vfprintf+0xca>
     c98:	27 fd       	sbrc	r18, 7
     c9a:	27 c0       	rjmp	.+78     	; 0xcea <vfprintf+0xda>
     c9c:	30 ed       	ldi	r19, 0xD0	; 208
     c9e:	38 0f       	add	r19, r24
     ca0:	3a 30       	cpi	r19, 0x0A	; 10
     ca2:	78 f4       	brcc	.+30     	; 0xcc2 <vfprintf+0xb2>
     ca4:	26 ff       	sbrs	r18, 6
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <vfprintf+0xa4>
     ca8:	fa e0       	ldi	r31, 0x0A	; 10
     caa:	5f 9e       	mul	r5, r31
     cac:	30 0d       	add	r19, r0
     cae:	11 24       	eor	r1, r1
     cb0:	53 2e       	mov	r5, r19
     cb2:	13 c0       	rjmp	.+38     	; 0xcda <vfprintf+0xca>
     cb4:	8a e0       	ldi	r24, 0x0A	; 10
     cb6:	38 9e       	mul	r3, r24
     cb8:	30 0d       	add	r19, r0
     cba:	11 24       	eor	r1, r1
     cbc:	33 2e       	mov	r3, r19
     cbe:	20 62       	ori	r18, 0x20	; 32
     cc0:	0c c0       	rjmp	.+24     	; 0xcda <vfprintf+0xca>
     cc2:	8e 32       	cpi	r24, 0x2E	; 46
     cc4:	21 f4       	brne	.+8      	; 0xcce <vfprintf+0xbe>
     cc6:	26 fd       	sbrc	r18, 6
     cc8:	6b c1       	rjmp	.+726    	; 0xfa0 <vfprintf+0x390>
     cca:	20 64       	ori	r18, 0x40	; 64
     ccc:	06 c0       	rjmp	.+12     	; 0xcda <vfprintf+0xca>
     cce:	8c 36       	cpi	r24, 0x6C	; 108
     cd0:	11 f4       	brne	.+4      	; 0xcd6 <vfprintf+0xc6>
     cd2:	20 68       	ori	r18, 0x80	; 128
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0xca>
     cd6:	88 36       	cpi	r24, 0x68	; 104
     cd8:	41 f4       	brne	.+16     	; 0xcea <vfprintf+0xda>
     cda:	f6 01       	movw	r30, r12
     cdc:	93 fd       	sbrc	r25, 3
     cde:	85 91       	lpm	r24, Z+
     ce0:	93 ff       	sbrs	r25, 3
     ce2:	81 91       	ld	r24, Z+
     ce4:	6f 01       	movw	r12, r30
     ce6:	81 11       	cpse	r24, r1
     ce8:	c1 cf       	rjmp	.-126    	; 0xc6c <vfprintf+0x5c>
     cea:	98 2f       	mov	r25, r24
     cec:	9f 7d       	andi	r25, 0xDF	; 223
     cee:	95 54       	subi	r25, 0x45	; 69
     cf0:	93 30       	cpi	r25, 0x03	; 3
     cf2:	28 f4       	brcc	.+10     	; 0xcfe <vfprintf+0xee>
     cf4:	0c 5f       	subi	r16, 0xFC	; 252
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	ff e3       	ldi	r31, 0x3F	; 63
     cfa:	f9 83       	std	Y+1, r31	; 0x01
     cfc:	0d c0       	rjmp	.+26     	; 0xd18 <vfprintf+0x108>
     cfe:	83 36       	cpi	r24, 0x63	; 99
     d00:	31 f0       	breq	.+12     	; 0xd0e <vfprintf+0xfe>
     d02:	83 37       	cpi	r24, 0x73	; 115
     d04:	71 f0       	breq	.+28     	; 0xd22 <vfprintf+0x112>
     d06:	83 35       	cpi	r24, 0x53	; 83
     d08:	09 f0       	breq	.+2      	; 0xd0c <vfprintf+0xfc>
     d0a:	5b c0       	rjmp	.+182    	; 0xdc2 <vfprintf+0x1b2>
     d0c:	22 c0       	rjmp	.+68     	; 0xd52 <vfprintf+0x142>
     d0e:	f8 01       	movw	r30, r16
     d10:	80 81       	ld	r24, Z
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	0e 5f       	subi	r16, 0xFE	; 254
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	44 24       	eor	r4, r4
     d1a:	43 94       	inc	r4
     d1c:	51 2c       	mov	r5, r1
     d1e:	54 01       	movw	r10, r8
     d20:	15 c0       	rjmp	.+42     	; 0xd4c <vfprintf+0x13c>
     d22:	38 01       	movw	r6, r16
     d24:	f2 e0       	ldi	r31, 0x02	; 2
     d26:	6f 0e       	add	r6, r31
     d28:	71 1c       	adc	r7, r1
     d2a:	f8 01       	movw	r30, r16
     d2c:	a0 80       	ld	r10, Z
     d2e:	b1 80       	ldd	r11, Z+1	; 0x01
     d30:	26 ff       	sbrs	r18, 6
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x12a>
     d34:	65 2d       	mov	r22, r5
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x12e>
     d3a:	6f ef       	ldi	r22, 0xFF	; 255
     d3c:	7f ef       	ldi	r23, 0xFF	; 255
     d3e:	c5 01       	movw	r24, r10
     d40:	2c 87       	std	Y+12, r18	; 0x0c
     d42:	0e 94 e5 07 	call	0xfca	; 0xfca <strnlen>
     d46:	2c 01       	movw	r4, r24
     d48:	83 01       	movw	r16, r6
     d4a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d4c:	2f 77       	andi	r18, 0x7F	; 127
     d4e:	22 2e       	mov	r2, r18
     d50:	17 c0       	rjmp	.+46     	; 0xd80 <vfprintf+0x170>
     d52:	38 01       	movw	r6, r16
     d54:	f2 e0       	ldi	r31, 0x02	; 2
     d56:	6f 0e       	add	r6, r31
     d58:	71 1c       	adc	r7, r1
     d5a:	f8 01       	movw	r30, r16
     d5c:	a0 80       	ld	r10, Z
     d5e:	b1 80       	ldd	r11, Z+1	; 0x01
     d60:	26 ff       	sbrs	r18, 6
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <vfprintf+0x15a>
     d64:	65 2d       	mov	r22, r5
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x15e>
     d6a:	6f ef       	ldi	r22, 0xFF	; 255
     d6c:	7f ef       	ldi	r23, 0xFF	; 255
     d6e:	c5 01       	movw	r24, r10
     d70:	2c 87       	std	Y+12, r18	; 0x0c
     d72:	0e 94 da 07 	call	0xfb4	; 0xfb4 <strnlen_P>
     d76:	2c 01       	movw	r4, r24
     d78:	2c 85       	ldd	r18, Y+12	; 0x0c
     d7a:	20 68       	ori	r18, 0x80	; 128
     d7c:	22 2e       	mov	r2, r18
     d7e:	83 01       	movw	r16, r6
     d80:	23 fc       	sbrc	r2, 3
     d82:	1b c0       	rjmp	.+54     	; 0xdba <vfprintf+0x1aa>
     d84:	83 2d       	mov	r24, r3
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	48 16       	cp	r4, r24
     d8a:	59 06       	cpc	r5, r25
     d8c:	b0 f4       	brcc	.+44     	; 0xdba <vfprintf+0x1aa>
     d8e:	b7 01       	movw	r22, r14
     d90:	80 e2       	ldi	r24, 0x20	; 32
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     d98:	3a 94       	dec	r3
     d9a:	f4 cf       	rjmp	.-24     	; 0xd84 <vfprintf+0x174>
     d9c:	f5 01       	movw	r30, r10
     d9e:	27 fc       	sbrc	r2, 7
     da0:	85 91       	lpm	r24, Z+
     da2:	27 fe       	sbrs	r2, 7
     da4:	81 91       	ld	r24, Z+
     da6:	5f 01       	movw	r10, r30
     da8:	b7 01       	movw	r22, r14
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     db0:	31 10       	cpse	r3, r1
     db2:	3a 94       	dec	r3
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	4f 1a       	sub	r4, r31
     db8:	51 08       	sbc	r5, r1
     dba:	41 14       	cp	r4, r1
     dbc:	51 04       	cpc	r5, r1
     dbe:	71 f7       	brne	.-36     	; 0xd9c <vfprintf+0x18c>
     dc0:	e5 c0       	rjmp	.+458    	; 0xf8c <vfprintf+0x37c>
     dc2:	84 36       	cpi	r24, 0x64	; 100
     dc4:	11 f0       	breq	.+4      	; 0xdca <vfprintf+0x1ba>
     dc6:	89 36       	cpi	r24, 0x69	; 105
     dc8:	39 f5       	brne	.+78     	; 0xe18 <vfprintf+0x208>
     dca:	f8 01       	movw	r30, r16
     dcc:	27 ff       	sbrs	r18, 7
     dce:	07 c0       	rjmp	.+14     	; 0xdde <vfprintf+0x1ce>
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	0c 5f       	subi	r16, 0xFC	; 252
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <vfprintf+0x1de>
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	88 27       	eor	r24, r24
     de4:	77 fd       	sbrc	r23, 7
     de6:	80 95       	com	r24
     de8:	98 2f       	mov	r25, r24
     dea:	0e 5f       	subi	r16, 0xFE	; 254
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	2f 76       	andi	r18, 0x6F	; 111
     df0:	b2 2e       	mov	r11, r18
     df2:	97 ff       	sbrs	r25, 7
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <vfprintf+0x1f8>
     df6:	90 95       	com	r25
     df8:	80 95       	com	r24
     dfa:	70 95       	com	r23
     dfc:	61 95       	neg	r22
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	20 68       	ori	r18, 0x80	; 128
     e06:	b2 2e       	mov	r11, r18
     e08:	2a e0       	ldi	r18, 0x0A	; 10
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	a4 01       	movw	r20, r8
     e0e:	0e 94 22 08 	call	0x1044	; 0x1044 <__ultoa_invert>
     e12:	a8 2e       	mov	r10, r24
     e14:	a8 18       	sub	r10, r8
     e16:	44 c0       	rjmp	.+136    	; 0xea0 <vfprintf+0x290>
     e18:	85 37       	cpi	r24, 0x75	; 117
     e1a:	29 f4       	brne	.+10     	; 0xe26 <vfprintf+0x216>
     e1c:	2f 7e       	andi	r18, 0xEF	; 239
     e1e:	b2 2e       	mov	r11, r18
     e20:	2a e0       	ldi	r18, 0x0A	; 10
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	25 c0       	rjmp	.+74     	; 0xe70 <vfprintf+0x260>
     e26:	f2 2f       	mov	r31, r18
     e28:	f9 7f       	andi	r31, 0xF9	; 249
     e2a:	bf 2e       	mov	r11, r31
     e2c:	8f 36       	cpi	r24, 0x6F	; 111
     e2e:	c1 f0       	breq	.+48     	; 0xe60 <vfprintf+0x250>
     e30:	18 f4       	brcc	.+6      	; 0xe38 <vfprintf+0x228>
     e32:	88 35       	cpi	r24, 0x58	; 88
     e34:	79 f0       	breq	.+30     	; 0xe54 <vfprintf+0x244>
     e36:	b4 c0       	rjmp	.+360    	; 0xfa0 <vfprintf+0x390>
     e38:	80 37       	cpi	r24, 0x70	; 112
     e3a:	19 f0       	breq	.+6      	; 0xe42 <vfprintf+0x232>
     e3c:	88 37       	cpi	r24, 0x78	; 120
     e3e:	21 f0       	breq	.+8      	; 0xe48 <vfprintf+0x238>
     e40:	af c0       	rjmp	.+350    	; 0xfa0 <vfprintf+0x390>
     e42:	2f 2f       	mov	r18, r31
     e44:	20 61       	ori	r18, 0x10	; 16
     e46:	b2 2e       	mov	r11, r18
     e48:	b4 fe       	sbrs	r11, 4
     e4a:	0d c0       	rjmp	.+26     	; 0xe66 <vfprintf+0x256>
     e4c:	8b 2d       	mov	r24, r11
     e4e:	84 60       	ori	r24, 0x04	; 4
     e50:	b8 2e       	mov	r11, r24
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <vfprintf+0x256>
     e54:	24 ff       	sbrs	r18, 4
     e56:	0a c0       	rjmp	.+20     	; 0xe6c <vfprintf+0x25c>
     e58:	9f 2f       	mov	r25, r31
     e5a:	96 60       	ori	r25, 0x06	; 6
     e5c:	b9 2e       	mov	r11, r25
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <vfprintf+0x25c>
     e60:	28 e0       	ldi	r18, 0x08	; 8
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	05 c0       	rjmp	.+10     	; 0xe70 <vfprintf+0x260>
     e66:	20 e1       	ldi	r18, 0x10	; 16
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0x260>
     e6c:	20 e1       	ldi	r18, 0x10	; 16
     e6e:	32 e0       	ldi	r19, 0x02	; 2
     e70:	f8 01       	movw	r30, r16
     e72:	b7 fe       	sbrs	r11, 7
     e74:	07 c0       	rjmp	.+14     	; 0xe84 <vfprintf+0x274>
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	0c 5f       	subi	r16, 0xFC	; 252
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <vfprintf+0x280>
     e84:	60 81       	ld	r22, Z
     e86:	71 81       	ldd	r23, Z+1	; 0x01
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 5f       	subi	r16, 0xFE	; 254
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	a4 01       	movw	r20, r8
     e92:	0e 94 22 08 	call	0x1044	; 0x1044 <__ultoa_invert>
     e96:	a8 2e       	mov	r10, r24
     e98:	a8 18       	sub	r10, r8
     e9a:	fb 2d       	mov	r31, r11
     e9c:	ff 77       	andi	r31, 0x7F	; 127
     e9e:	bf 2e       	mov	r11, r31
     ea0:	b6 fe       	sbrs	r11, 6
     ea2:	0b c0       	rjmp	.+22     	; 0xeba <vfprintf+0x2aa>
     ea4:	2b 2d       	mov	r18, r11
     ea6:	2e 7f       	andi	r18, 0xFE	; 254
     ea8:	a5 14       	cp	r10, r5
     eaa:	50 f4       	brcc	.+20     	; 0xec0 <vfprintf+0x2b0>
     eac:	b4 fe       	sbrs	r11, 4
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <vfprintf+0x2b4>
     eb0:	b2 fc       	sbrc	r11, 2
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <vfprintf+0x2b4>
     eb4:	2b 2d       	mov	r18, r11
     eb6:	2e 7e       	andi	r18, 0xEE	; 238
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <vfprintf+0x2b4>
     eba:	7a 2c       	mov	r7, r10
     ebc:	2b 2d       	mov	r18, r11
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <vfprintf+0x2b6>
     ec0:	7a 2c       	mov	r7, r10
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <vfprintf+0x2b6>
     ec4:	75 2c       	mov	r7, r5
     ec6:	24 ff       	sbrs	r18, 4
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <vfprintf+0x2d4>
     eca:	fe 01       	movw	r30, r28
     ecc:	ea 0d       	add	r30, r10
     ece:	f1 1d       	adc	r31, r1
     ed0:	80 81       	ld	r24, Z
     ed2:	80 33       	cpi	r24, 0x30	; 48
     ed4:	11 f4       	brne	.+4      	; 0xeda <vfprintf+0x2ca>
     ed6:	29 7e       	andi	r18, 0xE9	; 233
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <vfprintf+0x2dc>
     eda:	22 ff       	sbrs	r18, 2
     edc:	06 c0       	rjmp	.+12     	; 0xeea <vfprintf+0x2da>
     ede:	73 94       	inc	r7
     ee0:	73 94       	inc	r7
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <vfprintf+0x2dc>
     ee4:	82 2f       	mov	r24, r18
     ee6:	86 78       	andi	r24, 0x86	; 134
     ee8:	09 f0       	breq	.+2      	; 0xeec <vfprintf+0x2dc>
     eea:	73 94       	inc	r7
     eec:	23 fd       	sbrc	r18, 3
     eee:	13 c0       	rjmp	.+38     	; 0xf16 <vfprintf+0x306>
     ef0:	20 ff       	sbrs	r18, 0
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <vfprintf+0x2f0>
     ef4:	5a 2c       	mov	r5, r10
     ef6:	73 14       	cp	r7, r3
     ef8:	18 f4       	brcc	.+6      	; 0xf00 <vfprintf+0x2f0>
     efa:	53 0c       	add	r5, r3
     efc:	57 18       	sub	r5, r7
     efe:	73 2c       	mov	r7, r3
     f00:	73 14       	cp	r7, r3
     f02:	68 f4       	brcc	.+26     	; 0xf1e <vfprintf+0x30e>
     f04:	b7 01       	movw	r22, r14
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	2c 87       	std	Y+12, r18	; 0x0c
     f0c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     f10:	73 94       	inc	r7
     f12:	2c 85       	ldd	r18, Y+12	; 0x0c
     f14:	f5 cf       	rjmp	.-22     	; 0xf00 <vfprintf+0x2f0>
     f16:	73 14       	cp	r7, r3
     f18:	10 f4       	brcc	.+4      	; 0xf1e <vfprintf+0x30e>
     f1a:	37 18       	sub	r3, r7
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <vfprintf+0x310>
     f1e:	31 2c       	mov	r3, r1
     f20:	24 ff       	sbrs	r18, 4
     f22:	12 c0       	rjmp	.+36     	; 0xf48 <vfprintf+0x338>
     f24:	b7 01       	movw	r22, r14
     f26:	80 e3       	ldi	r24, 0x30	; 48
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	2c 87       	std	Y+12, r18	; 0x0c
     f2c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     f30:	2c 85       	ldd	r18, Y+12	; 0x0c
     f32:	22 ff       	sbrs	r18, 2
     f34:	17 c0       	rjmp	.+46     	; 0xf64 <vfprintf+0x354>
     f36:	21 ff       	sbrs	r18, 1
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <vfprintf+0x330>
     f3a:	88 e5       	ldi	r24, 0x58	; 88
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <vfprintf+0x334>
     f40:	88 e7       	ldi	r24, 0x78	; 120
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	b7 01       	movw	r22, r14
     f46:	0c c0       	rjmp	.+24     	; 0xf60 <vfprintf+0x350>
     f48:	82 2f       	mov	r24, r18
     f4a:	86 78       	andi	r24, 0x86	; 134
     f4c:	59 f0       	breq	.+22     	; 0xf64 <vfprintf+0x354>
     f4e:	21 fd       	sbrc	r18, 1
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x346>
     f52:	80 e2       	ldi	r24, 0x20	; 32
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <vfprintf+0x348>
     f56:	8b e2       	ldi	r24, 0x2B	; 43
     f58:	27 fd       	sbrc	r18, 7
     f5a:	8d e2       	ldi	r24, 0x2D	; 45
     f5c:	b7 01       	movw	r22, r14
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     f64:	a5 14       	cp	r10, r5
     f66:	38 f4       	brcc	.+14     	; 0xf76 <vfprintf+0x366>
     f68:	b7 01       	movw	r22, r14
     f6a:	80 e3       	ldi	r24, 0x30	; 48
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     f72:	5a 94       	dec	r5
     f74:	f7 cf       	rjmp	.-18     	; 0xf64 <vfprintf+0x354>
     f76:	aa 94       	dec	r10
     f78:	f4 01       	movw	r30, r8
     f7a:	ea 0d       	add	r30, r10
     f7c:	f1 1d       	adc	r31, r1
     f7e:	80 81       	ld	r24, Z
     f80:	b7 01       	movw	r22, r14
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     f88:	a1 10       	cpse	r10, r1
     f8a:	f5 cf       	rjmp	.-22     	; 0xf76 <vfprintf+0x366>
     f8c:	33 20       	and	r3, r3
     f8e:	09 f4       	brne	.+2      	; 0xf92 <vfprintf+0x382>
     f90:	51 ce       	rjmp	.-862    	; 0xc34 <vfprintf+0x24>
     f92:	b7 01       	movw	r22, r14
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fputc>
     f9c:	3a 94       	dec	r3
     f9e:	f6 cf       	rjmp	.-20     	; 0xf8c <vfprintf+0x37c>
     fa0:	f7 01       	movw	r30, r14
     fa2:	86 81       	ldd	r24, Z+6	; 0x06
     fa4:	97 81       	ldd	r25, Z+7	; 0x07
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x39c>
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	9f ef       	ldi	r25, 0xFF	; 255
     fac:	2c 96       	adiw	r28, 0x0c	; 12
     fae:	e2 e1       	ldi	r30, 0x12	; 18
     fb0:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__epilogue_restores__>

00000fb4 <strnlen_P>:
     fb4:	fc 01       	movw	r30, r24
     fb6:	05 90       	lpm	r0, Z+
     fb8:	61 50       	subi	r22, 0x01	; 1
     fba:	70 40       	sbci	r23, 0x00	; 0
     fbc:	01 10       	cpse	r0, r1
     fbe:	d8 f7       	brcc	.-10     	; 0xfb6 <strnlen_P+0x2>
     fc0:	80 95       	com	r24
     fc2:	90 95       	com	r25
     fc4:	8e 0f       	add	r24, r30
     fc6:	9f 1f       	adc	r25, r31
     fc8:	08 95       	ret

00000fca <strnlen>:
     fca:	fc 01       	movw	r30, r24
     fcc:	61 50       	subi	r22, 0x01	; 1
     fce:	70 40       	sbci	r23, 0x00	; 0
     fd0:	01 90       	ld	r0, Z+
     fd2:	01 10       	cpse	r0, r1
     fd4:	d8 f7       	brcc	.-10     	; 0xfcc <strnlen+0x2>
     fd6:	80 95       	com	r24
     fd8:	90 95       	com	r25
     fda:	8e 0f       	add	r24, r30
     fdc:	9f 1f       	adc	r25, r31
     fde:	08 95       	ret

00000fe0 <fputc>:
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	18 2f       	mov	r17, r24
     fea:	09 2f       	mov	r16, r25
     fec:	eb 01       	movw	r28, r22
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	81 fd       	sbrc	r24, 1
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <fputc+0x1a>
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	9f ef       	ldi	r25, 0xFF	; 255
     ff8:	20 c0       	rjmp	.+64     	; 0x103a <fputc+0x5a>
     ffa:	82 ff       	sbrs	r24, 2
     ffc:	10 c0       	rjmp	.+32     	; 0x101e <fputc+0x3e>
     ffe:	4e 81       	ldd	r20, Y+6	; 0x06
    1000:	5f 81       	ldd	r21, Y+7	; 0x07
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	42 17       	cp	r20, r18
    1008:	53 07       	cpc	r21, r19
    100a:	7c f4       	brge	.+30     	; 0x102a <fputc+0x4a>
    100c:	e8 81       	ld	r30, Y
    100e:	f9 81       	ldd	r31, Y+1	; 0x01
    1010:	9f 01       	movw	r18, r30
    1012:	2f 5f       	subi	r18, 0xFF	; 255
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	39 83       	std	Y+1, r19	; 0x01
    1018:	28 83       	st	Y, r18
    101a:	10 83       	st	Z, r17
    101c:	06 c0       	rjmp	.+12     	; 0x102a <fputc+0x4a>
    101e:	e8 85       	ldd	r30, Y+8	; 0x08
    1020:	f9 85       	ldd	r31, Y+9	; 0x09
    1022:	81 2f       	mov	r24, r17
    1024:	09 95       	icall
    1026:	89 2b       	or	r24, r25
    1028:	29 f7       	brne	.-54     	; 0xff4 <fputc+0x14>
    102a:	2e 81       	ldd	r18, Y+6	; 0x06
    102c:	3f 81       	ldd	r19, Y+7	; 0x07
    102e:	2f 5f       	subi	r18, 0xFF	; 255
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	3f 83       	std	Y+7, r19	; 0x07
    1034:	2e 83       	std	Y+6, r18	; 0x06
    1036:	81 2f       	mov	r24, r17
    1038:	90 2f       	mov	r25, r16
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <__ultoa_invert>:
    1044:	fa 01       	movw	r30, r20
    1046:	aa 27       	eor	r26, r26
    1048:	28 30       	cpi	r18, 0x08	; 8
    104a:	51 f1       	breq	.+84     	; 0x10a0 <__ultoa_invert+0x5c>
    104c:	20 31       	cpi	r18, 0x10	; 16
    104e:	81 f1       	breq	.+96     	; 0x10b0 <__ultoa_invert+0x6c>
    1050:	e8 94       	clt
    1052:	6f 93       	push	r22
    1054:	6e 7f       	andi	r22, 0xFE	; 254
    1056:	6e 5f       	subi	r22, 0xFE	; 254
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	8f 4f       	sbci	r24, 0xFF	; 255
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	af 4f       	sbci	r26, 0xFF	; 255
    1060:	b1 e0       	ldi	r27, 0x01	; 1
    1062:	3e d0       	rcall	.+124    	; 0x10e0 <__ultoa_invert+0x9c>
    1064:	b4 e0       	ldi	r27, 0x04	; 4
    1066:	3c d0       	rcall	.+120    	; 0x10e0 <__ultoa_invert+0x9c>
    1068:	67 0f       	add	r22, r23
    106a:	78 1f       	adc	r23, r24
    106c:	89 1f       	adc	r24, r25
    106e:	9a 1f       	adc	r25, r26
    1070:	a1 1d       	adc	r26, r1
    1072:	68 0f       	add	r22, r24
    1074:	79 1f       	adc	r23, r25
    1076:	8a 1f       	adc	r24, r26
    1078:	91 1d       	adc	r25, r1
    107a:	a1 1d       	adc	r26, r1
    107c:	6a 0f       	add	r22, r26
    107e:	71 1d       	adc	r23, r1
    1080:	81 1d       	adc	r24, r1
    1082:	91 1d       	adc	r25, r1
    1084:	a1 1d       	adc	r26, r1
    1086:	20 d0       	rcall	.+64     	; 0x10c8 <__ultoa_invert+0x84>
    1088:	09 f4       	brne	.+2      	; 0x108c <__ultoa_invert+0x48>
    108a:	68 94       	set
    108c:	3f 91       	pop	r19
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	26 9f       	mul	r18, r22
    1092:	11 24       	eor	r1, r1
    1094:	30 19       	sub	r19, r0
    1096:	30 5d       	subi	r19, 0xD0	; 208
    1098:	31 93       	st	Z+, r19
    109a:	de f6       	brtc	.-74     	; 0x1052 <__ultoa_invert+0xe>
    109c:	cf 01       	movw	r24, r30
    109e:	08 95       	ret
    10a0:	46 2f       	mov	r20, r22
    10a2:	47 70       	andi	r20, 0x07	; 7
    10a4:	40 5d       	subi	r20, 0xD0	; 208
    10a6:	41 93       	st	Z+, r20
    10a8:	b3 e0       	ldi	r27, 0x03	; 3
    10aa:	0f d0       	rcall	.+30     	; 0x10ca <__ultoa_invert+0x86>
    10ac:	c9 f7       	brne	.-14     	; 0x10a0 <__ultoa_invert+0x5c>
    10ae:	f6 cf       	rjmp	.-20     	; 0x109c <__ultoa_invert+0x58>
    10b0:	46 2f       	mov	r20, r22
    10b2:	4f 70       	andi	r20, 0x0F	; 15
    10b4:	40 5d       	subi	r20, 0xD0	; 208
    10b6:	4a 33       	cpi	r20, 0x3A	; 58
    10b8:	18 f0       	brcs	.+6      	; 0x10c0 <__ultoa_invert+0x7c>
    10ba:	49 5d       	subi	r20, 0xD9	; 217
    10bc:	31 fd       	sbrc	r19, 1
    10be:	40 52       	subi	r20, 0x20	; 32
    10c0:	41 93       	st	Z+, r20
    10c2:	02 d0       	rcall	.+4      	; 0x10c8 <__ultoa_invert+0x84>
    10c4:	a9 f7       	brne	.-22     	; 0x10b0 <__ultoa_invert+0x6c>
    10c6:	ea cf       	rjmp	.-44     	; 0x109c <__ultoa_invert+0x58>
    10c8:	b4 e0       	ldi	r27, 0x04	; 4
    10ca:	a6 95       	lsr	r26
    10cc:	97 95       	ror	r25
    10ce:	87 95       	ror	r24
    10d0:	77 95       	ror	r23
    10d2:	67 95       	ror	r22
    10d4:	ba 95       	dec	r27
    10d6:	c9 f7       	brne	.-14     	; 0x10ca <__ultoa_invert+0x86>
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 05       	cpc	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	08 95       	ret
    10e0:	9b 01       	movw	r18, r22
    10e2:	ac 01       	movw	r20, r24
    10e4:	0a 2e       	mov	r0, r26
    10e6:	06 94       	lsr	r0
    10e8:	57 95       	ror	r21
    10ea:	47 95       	ror	r20
    10ec:	37 95       	ror	r19
    10ee:	27 95       	ror	r18
    10f0:	ba 95       	dec	r27
    10f2:	c9 f7       	brne	.-14     	; 0x10e6 <__ultoa_invert+0xa2>
    10f4:	62 0f       	add	r22, r18
    10f6:	73 1f       	adc	r23, r19
    10f8:	84 1f       	adc	r24, r20
    10fa:	95 1f       	adc	r25, r21
    10fc:	a0 1d       	adc	r26, r0
    10fe:	08 95       	ret

00001100 <__prologue_saves__>:
    1100:	2f 92       	push	r2
    1102:	3f 92       	push	r3
    1104:	4f 92       	push	r4
    1106:	5f 92       	push	r5
    1108:	6f 92       	push	r6
    110a:	7f 92       	push	r7
    110c:	8f 92       	push	r8
    110e:	9f 92       	push	r9
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	ca 1b       	sub	r28, r26
    112a:	db 0b       	sbc	r29, r27
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	09 94       	ijmp

00001138 <__epilogue_restores__>:
    1138:	2a 88       	ldd	r2, Y+18	; 0x12
    113a:	39 88       	ldd	r3, Y+17	; 0x11
    113c:	48 88       	ldd	r4, Y+16	; 0x10
    113e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1140:	6e 84       	ldd	r6, Y+14	; 0x0e
    1142:	7d 84       	ldd	r7, Y+13	; 0x0d
    1144:	8c 84       	ldd	r8, Y+12	; 0x0c
    1146:	9b 84       	ldd	r9, Y+11	; 0x0b
    1148:	aa 84       	ldd	r10, Y+10	; 0x0a
    114a:	b9 84       	ldd	r11, Y+9	; 0x09
    114c:	c8 84       	ldd	r12, Y+8	; 0x08
    114e:	df 80       	ldd	r13, Y+7	; 0x07
    1150:	ee 80       	ldd	r14, Y+6	; 0x06
    1152:	fd 80       	ldd	r15, Y+5	; 0x05
    1154:	0c 81       	ldd	r16, Y+4	; 0x04
    1156:	1b 81       	ldd	r17, Y+3	; 0x03
    1158:	aa 81       	ldd	r26, Y+2	; 0x02
    115a:	b9 81       	ldd	r27, Y+1	; 0x01
    115c:	ce 0f       	add	r28, r30
    115e:	d1 1d       	adc	r29, r1
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	ed 01       	movw	r28, r26
    116c:	08 95       	ret

0000116e <_exit>:
    116e:	f8 94       	cli

00001170 <__stop_program>:
    1170:	ff cf       	rjmp	.-2      	; 0x1170 <__stop_program>
